{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kohii \u00b6 kohii (\u30b3\u30fc\u30d2\u30fc\u3001 [ko\u031e\u02d0\u00e7i\u02d0] ) \u00b6 Video playback for Android made easy. Kohii is a powerful, extensible, yet easy to use and extensible Video playback library. Kohii provides useful features out of the box, including Easy to start: just one line to start a Video playback. Automatic playback experience on RecyclerView, NestedScrollView, ViewPager2, etc. Configuration change handling works out of the box, including the switching from in-list player to fullscreen player and vice versa. Feature-rich sample app that covers either simple or advance use cases. Extensible, including default implementations that support ExoPlayer, AndroidX Media2, YouTube Player SDK. Demo \u00b6 Automatic playback Playback continuity (Seamless fullscreen) Setup \u00b6 Add to your module's build.gradle dependencies // Update top level build.gradle allprojects { repositories { jcenter () // mavenCentral() should also work. } } // Add these to app level build.gradle (or to module that will use Kohii) def kohiiVersion = '1.1.0.2011003' def exoPlayerVersion = '2.11.3' implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-exoplayer:${kohiiVersion}\" implementation \"com.google.android.exoplayer:exoplayer:${exoPlayerVersion}\" Start a playback \u00b6 Assuming that you have a Fragment which contains a RecyclerView , and you want to play a Video using a PlayerView placed inside a ViewHolder of the RecyclerView , below is what you need to do using Kohii : Kotlin // Kotlin // TODO: Have a videoUrl first. // 1. Initialization in Fragment val kohii = Kohii [ this @Fragment ] kohii . register ( this @Fragment ). addBucket ( this . recyclerView ) // 2. In ViewHolder or Adapter: bind the video to the PlayerView. kohii . setUp ( videoUrl ). bind ( playerView ) Java // Java // TODO: Have a videoUrl first. // 1. Initialization in Fragment Kohii kohii = Kohii . get ( this ); kohii . register ( this ). addBucket ( this . recyclerView ); // 2. In ViewHolder or Adapter: bind the video to the PlayerView. kohii . setUp ( videoUrl ). bind ( playerView ); Requirements \u00b6 Kohii works on Android 4.4+ (API level 19+) and on Java 8+. It is recommended to use Kohii using the Kotlin\u2122 language. The core library doesn't come with any actual playback logic. Actual implementation comes with extension libraries. The extensions require corresponding 3 rd libraries: kohii-exoplayer will require exoplayer , kohii-androidx will require androidx.media2 .","title":"Overview"},{"location":"#kohii","text":"","title":"Kohii"},{"location":"#kohii-koci","text":"Video playback for Android made easy. Kohii is a powerful, extensible, yet easy to use and extensible Video playback library. Kohii provides useful features out of the box, including Easy to start: just one line to start a Video playback. Automatic playback experience on RecyclerView, NestedScrollView, ViewPager2, etc. Configuration change handling works out of the box, including the switching from in-list player to fullscreen player and vice versa. Feature-rich sample app that covers either simple or advance use cases. Extensible, including default implementations that support ExoPlayer, AndroidX Media2, YouTube Player SDK.","title":"kohii (\u30b3\u30fc\u30d2\u30fc\u3001[ko\u031e\u02d0\u00e7i\u02d0])"},{"location":"#demo","text":"Automatic playback Playback continuity (Seamless fullscreen)","title":"Demo"},{"location":"#setup","text":"Add to your module's build.gradle dependencies // Update top level build.gradle allprojects { repositories { jcenter () // mavenCentral() should also work. } } // Add these to app level build.gradle (or to module that will use Kohii) def kohiiVersion = '1.1.0.2011003' def exoPlayerVersion = '2.11.3' implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-exoplayer:${kohiiVersion}\" implementation \"com.google.android.exoplayer:exoplayer:${exoPlayerVersion}\"","title":"Setup"},{"location":"#start-a-playback","text":"Assuming that you have a Fragment which contains a RecyclerView , and you want to play a Video using a PlayerView placed inside a ViewHolder of the RecyclerView , below is what you need to do using Kohii : Kotlin // Kotlin // TODO: Have a videoUrl first. // 1. Initialization in Fragment val kohii = Kohii [ this @Fragment ] kohii . register ( this @Fragment ). addBucket ( this . recyclerView ) // 2. In ViewHolder or Adapter: bind the video to the PlayerView. kohii . setUp ( videoUrl ). bind ( playerView ) Java // Java // TODO: Have a videoUrl first. // 1. Initialization in Fragment Kohii kohii = Kohii . get ( this ); kohii . register ( this ). addBucket ( this . recyclerView ); // 2. In ViewHolder or Adapter: bind the video to the PlayerView. kohii . setUp ( videoUrl ). bind ( playerView );","title":"Start a playback"},{"location":"#requirements","text":"Kohii works on Android 4.4+ (API level 19+) and on Java 8+. It is recommended to use Kohii using the Kotlin\u2122 language. The core library doesn't come with any actual playback logic. Actual implementation comes with extension libraries. The extensions require corresponding 3 rd libraries: kohii-exoplayer will require exoplayer , kohii-androidx will require androidx.media2 .","title":"Requirements"},{"location":"advance-builder/","text":"Using Builder \u00b6 Kohii instance can be constructed using Builder . By default, calling Kohii[context] will create or reuse an instance with default implementation. For advance users, it is more flexible to be able to customize this. Kohii provides Builder to make this happen: Kotlin val playableCreator = MyCustomPlayableCreator () val builder = Kohii . Builder ( context ) . setPlayableCreator ( playableCreator ) val kohii = builder . build () Java PlayableCreator < PlayerView > playableCreator = new MyCustomPlayableCreator (); Kohii . Builder builder = new Kohii . Builder ( context ) . setPlayableCreator ( playableCreator ); Kohii kohii = builder . build (); If you still want to use the default PlayerViewPlayableCreator , it can be constructed by its own Builder too, which will requires a PlayerViewBridgeCreatorFactory which is of type (Context) -> BridgeCreator<PlayerView> : Kotlin val playableCreator : PlayableCreator < PlayerView > = PlayerViewPlayableCreator . Builder ( this ) . setBridgeCreatorFactory ( myFactory ). build () A full Kohii example: Kotlin val kohii = Kohii . Builder ( context ) . setPlayableCreator ( PlayerViewPlayableCreator . Builder ( context ) . setBridgeCreatorFactory { PlayerViewBridgeCreator ( myPlayerProvider , myMediaSourceFactoryProvider ) } . build () ) . setRendererProviderFactory ( myFactory ) . build () Please take a look at the source for all available builder parameters. Using extension methods \u00b6 From v1.1.0.2011003 You also have more advance ways to construct new Kohii instance: Kotlin val kohii = createKohii ( context = context , config = ExoPlayerConfig . DEFAULT ) Where ExoPlayerConfig is the combination of many base parameters to construct ExoPlayer's components like the LoadControl , DefaultTrackSelector , DefaultBandwidthMeter , etc. If you have existing parameter to reuse, you can use this convenient to build a Kohii instance using them. ExoPlayerConfig.DEFAULT is the default configuration where the parameters are the same as default ExoPlayer's setup. If you want to reuse the already-built ExoPlayer components ( LoadControl , DefaultTrackSelector , DefaultBandwidthMeter , etc) instead, you can also use the second convenient creator below: Kotlin val kohii = createKohii ( context = context , playerCreator = myPlayerCreator , mediaSourceFactoryCreator = myMediaSourceFactoryCreator , rendererProviderFactory = myFactory ) Using this method, you can pass your custom way of creating a new Player instance, MediaSourceFactory instance and RendererProvider instance. Each parameter comes with a default value.","title":"Using custom Kohii creators"},{"location":"advance-builder/#using-builder","text":"Kohii instance can be constructed using Builder . By default, calling Kohii[context] will create or reuse an instance with default implementation. For advance users, it is more flexible to be able to customize this. Kohii provides Builder to make this happen: Kotlin val playableCreator = MyCustomPlayableCreator () val builder = Kohii . Builder ( context ) . setPlayableCreator ( playableCreator ) val kohii = builder . build () Java PlayableCreator < PlayerView > playableCreator = new MyCustomPlayableCreator (); Kohii . Builder builder = new Kohii . Builder ( context ) . setPlayableCreator ( playableCreator ); Kohii kohii = builder . build (); If you still want to use the default PlayerViewPlayableCreator , it can be constructed by its own Builder too, which will requires a PlayerViewBridgeCreatorFactory which is of type (Context) -> BridgeCreator<PlayerView> : Kotlin val playableCreator : PlayableCreator < PlayerView > = PlayerViewPlayableCreator . Builder ( this ) . setBridgeCreatorFactory ( myFactory ). build () A full Kohii example: Kotlin val kohii = Kohii . Builder ( context ) . setPlayableCreator ( PlayerViewPlayableCreator . Builder ( context ) . setBridgeCreatorFactory { PlayerViewBridgeCreator ( myPlayerProvider , myMediaSourceFactoryProvider ) } . build () ) . setRendererProviderFactory ( myFactory ) . build () Please take a look at the source for all available builder parameters.","title":"Using Builder"},{"location":"advance-builder/#using-extension-methods","text":"From v1.1.0.2011003 You also have more advance ways to construct new Kohii instance: Kotlin val kohii = createKohii ( context = context , config = ExoPlayerConfig . DEFAULT ) Where ExoPlayerConfig is the combination of many base parameters to construct ExoPlayer's components like the LoadControl , DefaultTrackSelector , DefaultBandwidthMeter , etc. If you have existing parameter to reuse, you can use this convenient to build a Kohii instance using them. ExoPlayerConfig.DEFAULT is the default configuration where the parameters are the same as default ExoPlayer's setup. If you want to reuse the already-built ExoPlayer components ( LoadControl , DefaultTrackSelector , DefaultBandwidthMeter , etc) instead, you can also use the second convenient creator below: Kotlin val kohii = createKohii ( context = context , playerCreator = myPlayerCreator , mediaSourceFactoryCreator = myMediaSourceFactoryCreator , rendererProviderFactory = myFactory ) Using this method, you can pass your custom way of creating a new Player instance, MediaSourceFactory instance and RendererProvider instance. Each parameter comes with a default value.","title":"Using extension methods"},{"location":"advance-manual-playback/","text":"Document pending","title":"Manual playback (experimental)"},{"location":"advance-memory-mode/","text":"Using MemoryMode to improve UX \u00b6 Your screen may contain many Videos at a time, and preload Videos forward so they can start as soon as possible is a legit requirement. In practice, preloading Videos consumes a lot of system resource like memory, network and power. To address this need in proper way, Kohii provides a special control flag called MemoryMode . The idea behinds MemoryMode is as below: The idea is to allow Kohii to preload around Video of interest 1 . When the Video of interest is playing, at the same time Kohii will prepare the closet Videos around it: the first on top, the first below, the first to the left and/or the first to the right, and the second closet Videos, etc ... To control the maxinum number of Videos to prepare, Kohiii needs client to explixitly define this (with a default behavior to be automatic). MemoryMode is the information client uses to define this behavior. To use it, you need to update the code as below: - kohii.register(this) + kohii.register(this, MemoryMode.BALANCED) While allowing client to define this behavior, Kohii will strictly observe system memory status, and will override that behavior on demand to prevent your app from behaving unexpectedly. The Video that is selected to play \u21a9","title":"Using MemoryMode"},{"location":"advance-memory-mode/#using-memorymode-to-improve-ux","text":"Your screen may contain many Videos at a time, and preload Videos forward so they can start as soon as possible is a legit requirement. In practice, preloading Videos consumes a lot of system resource like memory, network and power. To address this need in proper way, Kohii provides a special control flag called MemoryMode . The idea behinds MemoryMode is as below: The idea is to allow Kohii to preload around Video of interest 1 . When the Video of interest is playing, at the same time Kohii will prepare the closet Videos around it: the first on top, the first below, the first to the left and/or the first to the right, and the second closet Videos, etc ... To control the maxinum number of Videos to prepare, Kohiii needs client to explixitly define this (with a default behavior to be automatic). MemoryMode is the information client uses to define this behavior. To use it, you need to update the code as below: - kohii.register(this) + kohii.register(this, MemoryMode.BALANCED) While allowing client to define this behavior, Kohii will strictly observe system memory status, and will override that behavior on demand to prevent your app from behaving unexpectedly. The Video that is selected to play \u21a9","title":"Using MemoryMode to improve UX"},{"location":"advance-multiple-playbacks/","text":"Playing many Videos at the same time \u00b6 Available from v1.1.0.2011003 From v1.1.0.2011003, Kohii adds Playback Selector and Playback Strategy to support multiple playbacks. The Selector is a Single Abstract Method that accepts a collection of candidate (= the Playbacks that can play the media) and returns a collection of Playback that should play the media. This feature is enabled at Bucket level. Which means that: client can have multiple playbacks in a Bucket by using correct Strategy and Selector . The setup is easy: you can set the Strategy and Selector at the time you add the Bucket . Kotlin kohii . register ( this ) . addBucket ( view = recyclerView , strategy = Strategy . MULTI_PLAYER , selector = { candidates -> candidates . take ( 2 ) } ) The code above will: add a new Bucket for the recyclerView , with MULTI_PLAYER Strategy and using a Selector that will select up to 2 Playbacks from the candidates to play. Note that, Strategy and Selector need to be set together to enable the multiple playbacks. If the client uses a Selector that selects many Playbacks, but uses the SINGLE_PLAYER Strategy, it will only play one Playback. The available Strategies are: MULTI_PLAYER : play all Playbacks selected by the Selector . SINGLE_PLAYER : play the first available Playback from the list selected by the Selector . NO_PLAYER : do not let the Selector select anything. NOTE : Multiple playbacks comes with a caveat. In Video playback, audio focus is an important aspect. The client needs to not only respect the audio focus given by system, but also to respect the audio focuses among a Video with the others in the same Application. Therefore, when the client enable MULTI_PLAYER Strategy , the library will forcefully mute the audio of all available Playbacks, regardless the number of Playbacks selected by the Selector . Changing to SINGLE_PLAYER or NO_PLAYER Strategy will switch everything back to normal.","title":"Multiple playbacks"},{"location":"advance-multiple-playbacks/#playing-many-videos-at-the-same-time","text":"Available from v1.1.0.2011003 From v1.1.0.2011003, Kohii adds Playback Selector and Playback Strategy to support multiple playbacks. The Selector is a Single Abstract Method that accepts a collection of candidate (= the Playbacks that can play the media) and returns a collection of Playback that should play the media. This feature is enabled at Bucket level. Which means that: client can have multiple playbacks in a Bucket by using correct Strategy and Selector . The setup is easy: you can set the Strategy and Selector at the time you add the Bucket . Kotlin kohii . register ( this ) . addBucket ( view = recyclerView , strategy = Strategy . MULTI_PLAYER , selector = { candidates -> candidates . take ( 2 ) } ) The code above will: add a new Bucket for the recyclerView , with MULTI_PLAYER Strategy and using a Selector that will select up to 2 Playbacks from the candidates to play. Note that, Strategy and Selector need to be set together to enable the multiple playbacks. If the client uses a Selector that selects many Playbacks, but uses the SINGLE_PLAYER Strategy, it will only play one Playback. The available Strategies are: MULTI_PLAYER : play all Playbacks selected by the Selector . SINGLE_PLAYER : play the first available Playback from the list selected by the Selector . NO_PLAYER : do not let the Selector select anything. NOTE : Multiple playbacks comes with a caveat. In Video playback, audio focus is an important aspect. The client needs to not only respect the audio focus given by system, but also to respect the audio focuses among a Video with the others in the same Application. Therefore, when the client enable MULTI_PLAYER Strategy , the library will forcefully mute the audio of all available Playbacks, regardless the number of Playbacks selected by the Selector . Changing to SINGLE_PLAYER or NO_PLAYER Strategy will switch everything back to normal.","title":"Playing many Videos at the same time"},{"location":"advance-reuse-renderer-instance/","text":"Reuse PlayerView instance for multiple Videos \u00b6 Until now, the setup code is always kohii.setUp(videoUrl).bind(playerView) which may let you think that you will need to bind the Video to a PlayerView instance. In Kohii , target of the method bind is called container . While PlayerView is the place where Video content is rendered (and therefore it is called renderer , it can also be a container which contains itself ). You can bind the Video to any ViewGroup as container, as long as either it is a renderer itself, or it has no children so that it can contain a renderer later. When you bind to a non-renderer container , for example an empty FrameLayout , Kohii will automatically prepare and add the PlayerView instance to that FrameLayout dynamically. At the same time, the unnecessary PlayerView instance will be removed from container and put back to a Pool . This way, only a few PlayerView instances will be created and reused for as many container/Videos as possible. By default, Kohii has its own logic for creating and recycling PlayerView , but developers can build their own by extending Engine - another important component of Kohii . Extending Engine and building custom playback logic will be discussed in topics for developers.","title":"Reusing renderer"},{"location":"advance-reuse-renderer-instance/#reuse-playerview-instance-for-multiple-videos","text":"Until now, the setup code is always kohii.setUp(videoUrl).bind(playerView) which may let you think that you will need to bind the Video to a PlayerView instance. In Kohii , target of the method bind is called container . While PlayerView is the place where Video content is rendered (and therefore it is called renderer , it can also be a container which contains itself ). You can bind the Video to any ViewGroup as container, as long as either it is a renderer itself, or it has no children so that it can contain a renderer later. When you bind to a non-renderer container , for example an empty FrameLayout , Kohii will automatically prepare and add the PlayerView instance to that FrameLayout dynamically. At the same time, the unnecessary PlayerView instance will be removed from container and put back to a Pool . This way, only a few PlayerView instances will be created and reused for as many container/Videos as possible. By default, Kohii has its own logic for creating and recycling PlayerView , but developers can build their own by extending Engine - another important component of Kohii . Extending Engine and building custom playback logic will be discussed in topics for developers.","title":"Reuse PlayerView instance for multiple Videos"},{"location":"advance-summary/","text":"Advance usages \u00b6 Advance usages session will focus on using Kohii with ExoPlayer . Using others extensions will be discussed in more advance topics, because each extension is built with different ability. Here, we assume that you are familiar with ExoPlayer , including its core components (Player, ExoPlayer, SimpleExoPlayer, MediaSource, etc) and UI system (PlayerView, PlayerControlView, ControlDispatcher, etc). This section may use some keywords about components in Kohii like Container , Bucket , etc. You can find their definitions here: Glossary . Advance usages by Kohii : Using custom Kohii creators Using unique tag Show/Hide thumbnail Switching a Video playback between renderers Reuse PlayerView instance for multiple Videos Using MemoryMode to improve UX Playing many Videos at the same time Manual playback","title":"Summary"},{"location":"advance-summary/#advance-usages","text":"Advance usages session will focus on using Kohii with ExoPlayer . Using others extensions will be discussed in more advance topics, because each extension is built with different ability. Here, we assume that you are familiar with ExoPlayer , including its core components (Player, ExoPlayer, SimpleExoPlayer, MediaSource, etc) and UI system (PlayerView, PlayerControlView, ControlDispatcher, etc). This section may use some keywords about components in Kohii like Container , Bucket , etc. You can find their definitions here: Glossary . Advance usages by Kohii : Using custom Kohii creators Using unique tag Show/Hide thumbnail Switching a Video playback between renderers Reuse PlayerView instance for multiple Videos Using MemoryMode to improve UX Playing many Videos at the same time Manual playback","title":"Advance usages"},{"location":"advance-switch-renderer/","text":"Switching a Video playback between renderers \u00b6 In practice, you may find yourself try to bring a Video from a PlayerView to another PlayerView . Doing so can be as simple as calling bind to the destination PlayerView : kohii . setUp ( videoUrl ) { tag = videoTag }. bind ( olayerView1 ) // Later, switch to another `PlayerView` kohii . setUp ( videoUrl ) { tag = videoTag }. bind ( playerView2 ) Note Note that you need to set the same unique tag to the Video, so that after switching to another PlayerView , it keeps playing smoothly, without being reset to beginning. To help you simplify the steps, the call bind(playerView1) with a valid tag will return an object called Rebinder . This Rebinder has one method bind so you can reuse this object to easily rebind a Video to any PlayerView . Rebinder is also a Parcelable , so you can pass this object around. Please check this demo to see how it uses Rebinder to switch a Video from PlayerView to dialog and back.","title":"Switching renderers"},{"location":"advance-switch-renderer/#switching-a-video-playback-between-renderers","text":"In practice, you may find yourself try to bring a Video from a PlayerView to another PlayerView . Doing so can be as simple as calling bind to the destination PlayerView : kohii . setUp ( videoUrl ) { tag = videoTag }. bind ( olayerView1 ) // Later, switch to another `PlayerView` kohii . setUp ( videoUrl ) { tag = videoTag }. bind ( playerView2 ) Note Note that you need to set the same unique tag to the Video, so that after switching to another PlayerView , it keeps playing smoothly, without being reset to beginning. To help you simplify the steps, the call bind(playerView1) with a valid tag will return an object called Rebinder . This Rebinder has one method bind so you can reuse this object to easily rebind a Video to any PlayerView . Rebinder is also a Parcelable , so you can pass this object around. Please check this demo to see how it uses Rebinder to switch a Video from PlayerView to dialog and back.","title":"Switching a Video playback between renderers"},{"location":"advance-thumbnail/","text":"Show/Hide thumbnail \u00b6 Kohii provides a special interface called ArtworkHintListener . With this interface, Kohii can tell client when it should show/hide thumbnail (or artwork in Kohii 's term). Sample code: // 1. Let ViewHolder implement ArtworkHintListener interface. class VideoViewHolder ( itemView : View ): ViewHolder ( itemView ), ArtworkHintListener { val thumbnail : ImageView = // ... this is the ImageView for the thumbnail. // Override this callback to show/hide thumbnail. override fun onArtworkHint ( playback : Playback , shouldShow : Boolean , position : Long , state : Int ) { thumbnail . isVisible = shouldShow } } // 2. Provide the ArtworkHintListener when setting up the Video in ViewHolder kohii . setUp ( assetVideoUri ) { artworkHintListener = this @VideoViewHolder } . bind ( playerView ) You can see this setup in action in this demo . In the callback onArtworkHint , other than a boolean flag shouldShow which is a hint from Kohii about if the artwork should be shown or hidden, there is also position which is the current position of the Video, and state which is current state of the player. Using these values, you can have your own behavior, other than just show/hide the ImageView.","title":"Show/Hide thumbnail"},{"location":"advance-thumbnail/#showhide-thumbnail","text":"Kohii provides a special interface called ArtworkHintListener . With this interface, Kohii can tell client when it should show/hide thumbnail (or artwork in Kohii 's term). Sample code: // 1. Let ViewHolder implement ArtworkHintListener interface. class VideoViewHolder ( itemView : View ): ViewHolder ( itemView ), ArtworkHintListener { val thumbnail : ImageView = // ... this is the ImageView for the thumbnail. // Override this callback to show/hide thumbnail. override fun onArtworkHint ( playback : Playback , shouldShow : Boolean , position : Long , state : Int ) { thumbnail . isVisible = shouldShow } } // 2. Provide the ArtworkHintListener when setting up the Video in ViewHolder kohii . setUp ( assetVideoUri ) { artworkHintListener = this @VideoViewHolder } . bind ( playerView ) You can see this setup in action in this demo . In the callback onArtworkHint , other than a boolean flag shouldShow which is a hint from Kohii about if the artwork should be shown or hidden, there is also position which is the current position of the Video, and state which is current state of the player. Using these values, you can have your own behavior, other than just show/hide the ImageView.","title":"Show/Hide thumbnail"},{"location":"advance-unique-tag/","text":"Using unique tag \u00b6 To have the automatic playback works, you just need this: Kotlin kohii . setUp ( videoUrl ). bind ( playerView ) Java kohii . setUp ( videoUrl ). bind ( playerView ); With this one line, once user scrolls some Videos off screen, and then scrolls them back, the playback position will be reset and the Videos will start from the beginning. If you want the Videos to start from where it was before being scrolled off screen, you need to set an application wide unique tag for the Video. Sample code as below: Kotlin kohii . setUp ( videoUrl ) { tag = videoUniqueTag } . bind ( playerView ) By having a unique tag, your Video state will also be retained across configuration changes like Window size change, orientation change or other system config changes. So it is highly recommended to have unique tags for your Videos. With tag Without tag","title":"Using unique tag"},{"location":"advance-unique-tag/#using-unique-tag","text":"To have the automatic playback works, you just need this: Kotlin kohii . setUp ( videoUrl ). bind ( playerView ) Java kohii . setUp ( videoUrl ). bind ( playerView ); With this one line, once user scrolls some Videos off screen, and then scrolls them back, the playback position will be reset and the Videos will start from the beginning. If you want the Videos to start from where it was before being scrolled off screen, you need to set an application wide unique tag for the Video. Sample code as below: Kotlin kohii . setUp ( videoUrl ) { tag = videoUniqueTag } . bind ( playerView ) By having a unique tag, your Video state will also be retained across configuration changes like Window size change, orientation change or other system config changes. So it is highly recommended to have unique tags for your Videos. With tag Without tag","title":"Using unique tag"},{"location":"changelog/","text":"Change Log \u00b6 [Unreleased] \u00b6 Added \u00b6 (kohii-core): Add PlayerPool implementation. (kohii-core): Expose Playback.lock flag. (kohii-exoplayer): Add ExoPlayerPool that extends PlayerPool and replace the ExoPlayerProvider . (kohii-androidx): Add MediaPlayerPool that extends PlayerPool and replace the MediaPlayerProvider . (kohii-ads): Initial implementation using ExoPlayer and Ima Extension API. Changed \u00b6 (kohii-core): Update selection logic. If there is a Playback started manually, the Selector will receive that Playback, otherwise it receives the default candidates. (kohii-exoplayer): ExoPlayer is updated to 2.11.8. (kohii-exoplayer): Use default CacheDataSourceFactory, which uses default fragment size of 5MB. (kohii-exoplayer): DefaultMediaSourceFactoryProvider now accepts nullable DrmSessionManagerProvider. (kohii-exoplayer): Default ExoPlayer implementation will always update the AudioAttributes when the Volume setting is called. Removed \u00b6 (kohii-exoplayer): Remove ExoPlayerProvider and its default implementation. (kohii-androidx): Remove MediaPlayerProvider and its default implementation. [1.1.1.2011003] \u00b6 Added \u00b6 Fix an issue that cause cache doesn't write to file ( https://github.com/eneim/kohii/pull/91 ); [1.1.0.2011003] \u00b6 ExoPlayer: 2.11.3 Support multiple playback . Check out docs and recipe for more information. Experimental manual playback. Read more here . Add method Kohii.createControlDispatcher(Playback) . Read more here . Introduce PlayableObserver , Read more here . Introduce activeLifecycleState setting for the Manager. Default to State.STARTED . All the playbacks in a Manager can be played only if the lifecycle state of the Manager is at least this value. Experimental PlayerParameters , NetworkTypeChangeListener : the callback from a NetworkTypeChangeListener needs to return a PlayerParameters value so that the player can switch the video/audio quality, resolution, etc. Deprecate the VideoSize . Its value is no longer used anymore in the library. Experimental initialPlaybackInfo setting for the Binder. Setting this value will allow the Playback to start from a specific PlaybackInfo value. Experimental releaseOnInActive setting for the Binder. Setting this to false will let the Playback keep its state when it is inactive, but not yet detached from the Manager. Add method Playback.Controller.setupRenderer(Playback, Any?) and Playback.Controller.teardownRenderer(Playback, Any?) . Client can configure the renderer with custom manual control logic. Support Playback locking: if a Playback is locked, it will still be selected but will not be played. Add ExoPlayerCache to the kohii-exoplayer package. It can be used to obtain a pre-built Cache easily. Add TrackSelectorFactory , LoadControlFactory to the kohii-exoplayer package. Add ExoPlayerConfig to gather most of the detailed setting for a SimpleExoPlayer instance. Add createKohii convenient methods to easily create Kohii instance with custom parameters. Add Engine.lock* and Engine.unlock* methods to support manual lock/unlock an Activity/Manager/Bucket or Playback. Add a simple demonstration that builds TikTok-alike UI/UX: source code . Another document hub for Kohii: https://www.notion.so/The-Kohii-Library-c89a75e2df2b485391b425b5dc83adce [Breaking] Rename Playable#considerRequestRenderer -> Playable#setupRenderer . [Breaking] Rename Playable#considerReleaseRenderer -> Playable#teardownRenderer . [Breaking] RendererProvider#releaseRenderer now needs to return a boolean. [Breaking] Playback#addCallback and Playback#removeCallback are now internal. [Breaking] The DefaultControlDispatcher is now internal. [Breaking] Include Playback in the ArtworkHintListener#onArtworkHint . [Breaking] Remove default implementations for BandwidthMeterFactory . [1.0.0.2010004] \u00b6 2020.03.15 Open Builder for Kohii and Latte . Clients can now use custom implementations to construct those classes. Example usages: val kohii = Kohii . Builder ( context ) . setPlayableCreator ( customPlayableCreator ) . build () 1.0.0.2010004-beta.5 \u00b6 Experiment release for Bucket.Selector , usage is not finalized yet. Currently it is proved to allow select multiple Playbacks for a Bucket, but finally only one Playback will be picked to play by the Group. Add @JvmOverloads annotation to support calling from Java. Other internal improvements. 1.0.0.2010004-beta.3 \u00b6 2019.12.18 This is the very first release that is documented. Please visit document page for detail. First public beta release.","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"(kohii-core): Add PlayerPool implementation. (kohii-core): Expose Playback.lock flag. (kohii-exoplayer): Add ExoPlayerPool that extends PlayerPool and replace the ExoPlayerProvider . (kohii-androidx): Add MediaPlayerPool that extends PlayerPool and replace the MediaPlayerProvider . (kohii-ads): Initial implementation using ExoPlayer and Ima Extension API.","title":"Added"},{"location":"changelog/#changed","text":"(kohii-core): Update selection logic. If there is a Playback started manually, the Selector will receive that Playback, otherwise it receives the default candidates. (kohii-exoplayer): ExoPlayer is updated to 2.11.8. (kohii-exoplayer): Use default CacheDataSourceFactory, which uses default fragment size of 5MB. (kohii-exoplayer): DefaultMediaSourceFactoryProvider now accepts nullable DrmSessionManagerProvider. (kohii-exoplayer): Default ExoPlayer implementation will always update the AudioAttributes when the Volume setting is called.","title":"Changed"},{"location":"changelog/#removed","text":"(kohii-exoplayer): Remove ExoPlayerProvider and its default implementation. (kohii-androidx): Remove MediaPlayerProvider and its default implementation.","title":"Removed"},{"location":"changelog/#1112011003","text":"","title":"[1.1.1.2011003]"},{"location":"changelog/#added_1","text":"Fix an issue that cause cache doesn't write to file ( https://github.com/eneim/kohii/pull/91 );","title":"Added"},{"location":"changelog/#1102011003","text":"ExoPlayer: 2.11.3 Support multiple playback . Check out docs and recipe for more information. Experimental manual playback. Read more here . Add method Kohii.createControlDispatcher(Playback) . Read more here . Introduce PlayableObserver , Read more here . Introduce activeLifecycleState setting for the Manager. Default to State.STARTED . All the playbacks in a Manager can be played only if the lifecycle state of the Manager is at least this value. Experimental PlayerParameters , NetworkTypeChangeListener : the callback from a NetworkTypeChangeListener needs to return a PlayerParameters value so that the player can switch the video/audio quality, resolution, etc. Deprecate the VideoSize . Its value is no longer used anymore in the library. Experimental initialPlaybackInfo setting for the Binder. Setting this value will allow the Playback to start from a specific PlaybackInfo value. Experimental releaseOnInActive setting for the Binder. Setting this to false will let the Playback keep its state when it is inactive, but not yet detached from the Manager. Add method Playback.Controller.setupRenderer(Playback, Any?) and Playback.Controller.teardownRenderer(Playback, Any?) . Client can configure the renderer with custom manual control logic. Support Playback locking: if a Playback is locked, it will still be selected but will not be played. Add ExoPlayerCache to the kohii-exoplayer package. It can be used to obtain a pre-built Cache easily. Add TrackSelectorFactory , LoadControlFactory to the kohii-exoplayer package. Add ExoPlayerConfig to gather most of the detailed setting for a SimpleExoPlayer instance. Add createKohii convenient methods to easily create Kohii instance with custom parameters. Add Engine.lock* and Engine.unlock* methods to support manual lock/unlock an Activity/Manager/Bucket or Playback. Add a simple demonstration that builds TikTok-alike UI/UX: source code . Another document hub for Kohii: https://www.notion.so/The-Kohii-Library-c89a75e2df2b485391b425b5dc83adce [Breaking] Rename Playable#considerRequestRenderer -> Playable#setupRenderer . [Breaking] Rename Playable#considerReleaseRenderer -> Playable#teardownRenderer . [Breaking] RendererProvider#releaseRenderer now needs to return a boolean. [Breaking] Playback#addCallback and Playback#removeCallback are now internal. [Breaking] The DefaultControlDispatcher is now internal. [Breaking] Include Playback in the ArtworkHintListener#onArtworkHint . [Breaking] Remove default implementations for BandwidthMeterFactory .","title":"[1.1.0.2011003]"},{"location":"changelog/#1002010004","text":"2020.03.15 Open Builder for Kohii and Latte . Clients can now use custom implementations to construct those classes. Example usages: val kohii = Kohii . Builder ( context ) . setPlayableCreator ( customPlayableCreator ) . build ()","title":"[1.0.0.2010004]"},{"location":"changelog/#1002010004-beta5","text":"Experiment release for Bucket.Selector , usage is not finalized yet. Currently it is proved to allow select multiple Playbacks for a Bucket, but finally only one Playback will be picked to play by the Group. Add @JvmOverloads annotation to support calling from Java. Other internal improvements.","title":"1.0.0.2010004-beta.5"},{"location":"changelog/#1002010004-beta3","text":"2019.12.18 This is the very first release that is documented. Please visit document page for detail. First public beta release.","title":"1.0.0.2010004-beta.3"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mr.nguyenhoainam@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mr.nguyenhoainam@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"custom-engine/","text":"Custom Engine \u00b6 Document pending","title":"Custom Engine"},{"location":"custom-engine/#custom-engine","text":"Document pending","title":"Custom Engine"},{"location":"demos/","text":"Exploring the demo app \u00b6 Kohii is built with a feature-rich demo application. You can find many recommended ways to use Kohii from them. This session tries to go throw those demos to describe what they do and how to make it in concept. This session will be updated accordingly following the changes of this library. Kohii + RecyclerView \u00b6 Document pending https://ene.im/2020/06/28/kohii-201-videos-in-recyclerview Kohii + TikTok \u00b6 https://ene.im/2020/07/03/clone-tiktok-using-kohii https://www.notion.so/Clone-TikTok-using-Kohii-dc0c254d74544561950ff6309212c183 Kohii + Facebook \u00b6 Document pending","title":"Demo app"},{"location":"demos/#exploring-the-demo-app","text":"Kohii is built with a feature-rich demo application. You can find many recommended ways to use Kohii from them. This session tries to go throw those demos to describe what they do and how to make it in concept. This session will be updated accordingly following the changes of this library.","title":"Exploring the demo app"},{"location":"demos/#kohii-recyclerview","text":"Document pending https://ene.im/2020/06/28/kohii-201-videos-in-recyclerview","title":"Kohii + RecyclerView"},{"location":"demos/#kohii-tiktok","text":"https://ene.im/2020/07/03/clone-tiktok-using-kohii https://www.notion.so/Clone-TikTok-using-Kohii-dc0c254d74544561950ff6309212c183","title":"Kohii + TikTok"},{"location":"demos/#kohii-facebook","text":"Document pending","title":"Kohii + Facebook"},{"location":"design/","text":"Roadmap \u00b6 Basic binding Simple syntax to start binding a Video to a ViewGroup (PlayerView or a ViewGroup that will contain a PlayerView), using Url, Uri or specific Media object. Automatically update the playbacks in RecyclerView, NestedScrollView or general ViewGroup. Automatically update the playbacks in ViewPager, ViewPager2. Callbacks Callbacks for Kohii components status. Callbacks for playback status. (Nice to have) Opinionated callbacks that tell client when it should show/hide thumbnail . Introduce Playback.ArtworkHintListener Handle configuration change Retain playback on configuration changes. Manual control over Playbacks Allow client to have full control over Playbacks: client can start/pause any Playback without the control of system/Kohii. Allow client to have half-manual control over Playbacks: client can start/pause any Playback on demand, but Kohii can also start/pause the Playback regarding some conditions. Global control: simple method to pause/resume everything. The resume behavior follow each Playback\\'s config. Flexible VolumeInfo update mechanism: allow to change VolumeInfo for individual Video or all Videos in the same parent. ExoPlayer related implementations First-class support for playback using ExoPlayer/PlayerView. Cached playback using ExoPlayer cache mechanism. Offline/downloaded playback using ExoPlayer download mechanism. Extensible architecture Base abstraction. Default implementation for ExoPlayer. (Nice to have) Experiment implementation for YouTube Videos using YouTube Player API. (Nice to have) Experiment implementation for YouTube Videos using OSS playback library. (Nice to have) Experiment implementation for AndroidX Media 2. (Nice to have) Experiment implementation for Platform MediaPlayer/VideoView. Others Flag/Callback to enable/disable automatic playback. Useful to trigger the feature on demand (eg: due to Network quality changes). MemoryMode setting, allows client to control how Videos will be kept when it is not playing. For example in HIGH MemoryMode, many Videos can keep resource at the same time, so the playback will be really smooth, but in LOW MemoryMode, any paused Video will be released to save resource. Ads support with Mopub, IMA. Demos Basic RecyclerView sample, no nesting. Basic NestedScrollView sample, no nesting. RecyclerView with NestedScrollView nested in a ViewHolder. RecyclerView with RecyclerView nested in a ViewHolder. NestedScrollView with a RecyclerView nested inside. RecyclerView with user interaction (eg: Click). NestedScrollView with user interaction (eg: Click). ViewPager where pages are PlayerViews or FrameLayouts. ViewPager where pages are RecyclerViews with Videos. (It is recommended to use Fragment with RecyclerView inside ViewPager instead) ViewPager where pages are Fragments contain PlayerViews or FrameLayout. ViewPager where pages are Fragments contain RecyclerView with Videos. ViewPager2 where pages are PlayerViews or FrameLayouts. ViewPager2 where pages are RecyclerViews with Videos. (It is recommended to use Fragment with RecyclerView inside ViewPager instead) ViewPager2 where pages are Fragments contain PlayerViews or FrameLayout. ViewPager2 where pages are Fragments contain RecyclerView with Videos. Multiple Fragments where each contains RecyclerView or ViewPager with Videos. Sample to mimic Facebook. YouTube sample using Android Player SDK (the Official SDK). YouTube sample using PierfrancescoSoffritti/android-youtube-player . Background Playback support Allow configuration to enable/disable background Playback. The config would allow to setup: flag to turn the feature on/off, necessary information for the foreground notification (eg Bitmap for the Notification large image). Allow the Playback to keep playing after closing the App on-demand. Allow the Playback to keep playing when: the Playback is deselected from the Manager, but no newer Playback is selected. Others Store PlaybackInfo to pages + local DB to optimize/reduce in-memory cache. Resource creation \u00b6 Binding Playable to Container (ViewGroup) \u00b6 The actual binding only happens once the Container is attached to Window. The result will be a Playback that has reference to the Container. After being bound, the Container might be detached/re-attached without the need to remove the Playback. States of a Playback: 'ADDED': the binding is established. 'DETACHED': the Container is detached from Window. 'ATTACHED, INACTIVE': the Container is attached to Window, but its visible area is < 0. 'ATTACHED, ACTIVE': the Container is attached to Window, but its visible area is >= 0. 'REMOVED': the binding is destroyed. Lifecycle of a Playback: a Playback lives through the 'ADDED' state and 'REMOVED' state. A 'REMOVED' Playback must also be 'INACTIVE' and 'DETACHED'. Lifecycle of a Playback relies on its Container (ViewGroup)'s lifecycle, the Host that contains that Container and the Manager that contains the Host. Binding scenarios and the behavior: Bind a Playable to a fresh Container: Establish new binding (new Playback will be created and added to the Manager). Any old Playback referenced by Playable must be removed. Bind a Playable to a Container that was bound to different Playable: Establish new binding (new Playback will be created and added to the Manager). Any old Playback referenced by Playable must be removed. Any Playback reference to the same Container must be removed. Bind a Playable to a Container that was bond to the same Playable: no action required. Manager lifecycle and its affects: A Manager lifecycle is bound to its 'origin's lifecycle'. The origin can be ComponentActivity or Fragment. ON_STOP event: all Playbacks must be transferred to up-to 'INACTIVE' state. ON_DESTROY event: all Playbacks must be transferred to up-to 'REMOVED' state. ON_START event: refresh the status of Playbacks to its latest state.","title":"Design"},{"location":"design/#roadmap","text":"Basic binding Simple syntax to start binding a Video to a ViewGroup (PlayerView or a ViewGroup that will contain a PlayerView), using Url, Uri or specific Media object. Automatically update the playbacks in RecyclerView, NestedScrollView or general ViewGroup. Automatically update the playbacks in ViewPager, ViewPager2. Callbacks Callbacks for Kohii components status. Callbacks for playback status. (Nice to have) Opinionated callbacks that tell client when it should show/hide thumbnail . Introduce Playback.ArtworkHintListener Handle configuration change Retain playback on configuration changes. Manual control over Playbacks Allow client to have full control over Playbacks: client can start/pause any Playback without the control of system/Kohii. Allow client to have half-manual control over Playbacks: client can start/pause any Playback on demand, but Kohii can also start/pause the Playback regarding some conditions. Global control: simple method to pause/resume everything. The resume behavior follow each Playback\\'s config. Flexible VolumeInfo update mechanism: allow to change VolumeInfo for individual Video or all Videos in the same parent. ExoPlayer related implementations First-class support for playback using ExoPlayer/PlayerView. Cached playback using ExoPlayer cache mechanism. Offline/downloaded playback using ExoPlayer download mechanism. Extensible architecture Base abstraction. Default implementation for ExoPlayer. (Nice to have) Experiment implementation for YouTube Videos using YouTube Player API. (Nice to have) Experiment implementation for YouTube Videos using OSS playback library. (Nice to have) Experiment implementation for AndroidX Media 2. (Nice to have) Experiment implementation for Platform MediaPlayer/VideoView. Others Flag/Callback to enable/disable automatic playback. Useful to trigger the feature on demand (eg: due to Network quality changes). MemoryMode setting, allows client to control how Videos will be kept when it is not playing. For example in HIGH MemoryMode, many Videos can keep resource at the same time, so the playback will be really smooth, but in LOW MemoryMode, any paused Video will be released to save resource. Ads support with Mopub, IMA. Demos Basic RecyclerView sample, no nesting. Basic NestedScrollView sample, no nesting. RecyclerView with NestedScrollView nested in a ViewHolder. RecyclerView with RecyclerView nested in a ViewHolder. NestedScrollView with a RecyclerView nested inside. RecyclerView with user interaction (eg: Click). NestedScrollView with user interaction (eg: Click). ViewPager where pages are PlayerViews or FrameLayouts. ViewPager where pages are RecyclerViews with Videos. (It is recommended to use Fragment with RecyclerView inside ViewPager instead) ViewPager where pages are Fragments contain PlayerViews or FrameLayout. ViewPager where pages are Fragments contain RecyclerView with Videos. ViewPager2 where pages are PlayerViews or FrameLayouts. ViewPager2 where pages are RecyclerViews with Videos. (It is recommended to use Fragment with RecyclerView inside ViewPager instead) ViewPager2 where pages are Fragments contain PlayerViews or FrameLayout. ViewPager2 where pages are Fragments contain RecyclerView with Videos. Multiple Fragments where each contains RecyclerView or ViewPager with Videos. Sample to mimic Facebook. YouTube sample using Android Player SDK (the Official SDK). YouTube sample using PierfrancescoSoffritti/android-youtube-player . Background Playback support Allow configuration to enable/disable background Playback. The config would allow to setup: flag to turn the feature on/off, necessary information for the foreground notification (eg Bitmap for the Notification large image). Allow the Playback to keep playing after closing the App on-demand. Allow the Playback to keep playing when: the Playback is deselected from the Manager, but no newer Playback is selected. Others Store PlaybackInfo to pages + local DB to optimize/reduce in-memory cache.","title":"Roadmap"},{"location":"design/#resource-creation","text":"","title":"Resource creation"},{"location":"design/#binding-playable-to-container-viewgroup","text":"The actual binding only happens once the Container is attached to Window. The result will be a Playback that has reference to the Container. After being bound, the Container might be detached/re-attached without the need to remove the Playback. States of a Playback: 'ADDED': the binding is established. 'DETACHED': the Container is detached from Window. 'ATTACHED, INACTIVE': the Container is attached to Window, but its visible area is < 0. 'ATTACHED, ACTIVE': the Container is attached to Window, but its visible area is >= 0. 'REMOVED': the binding is destroyed. Lifecycle of a Playback: a Playback lives through the 'ADDED' state and 'REMOVED' state. A 'REMOVED' Playback must also be 'INACTIVE' and 'DETACHED'. Lifecycle of a Playback relies on its Container (ViewGroup)'s lifecycle, the Host that contains that Container and the Manager that contains the Host. Binding scenarios and the behavior: Bind a Playable to a fresh Container: Establish new binding (new Playback will be created and added to the Manager). Any old Playback referenced by Playable must be removed. Bind a Playable to a Container that was bound to different Playable: Establish new binding (new Playback will be created and added to the Manager). Any old Playback referenced by Playable must be removed. Any Playback reference to the same Container must be removed. Bind a Playable to a Container that was bond to the same Playable: no action required. Manager lifecycle and its affects: A Manager lifecycle is bound to its 'origin's lifecycle'. The origin can be ComponentActivity or Fragment. ON_STOP event: all Playbacks must be transferred to up-to 'INACTIVE' state. ON_DESTROY event: all Playbacks must be transferred to up-to 'REMOVED' state. ON_START event: refresh the status of Playbacks to its latest state.","title":"Binding Playable to Container (ViewGroup)"},{"location":"getting-started/","text":"Getting start \u00b6 Kohii is an Android library, therefore to use it, you need to add its artifacts to your module's build.gradle dependency list. Kohii is released to both bintray jcenter repository and sonatype maven central repository , so before adding Kohii to your project, make sure the following lines exist in your project root build.gradle file: allprojects { repositories { jcenter () // default repo, and mavenCentral() should also work. } } Kohii has the following artifacts: kohii-core This artifact contains core design of the library. It doesn't contain enough implementation detail to start the playback. To do so you need to include one of the following artifacts: kohii-exoplayer This artifact contains the implementation of kohii-core that uses ExoPlayer as playback backend . As a result, you will also need to include necessary ExoPlayer artifacts as well. Your dependency to use kohii-exoplayer will look like below: def kohiiVersion = '1.1.0.2011003' // always use latest available version def exoplayerVersion = '2.11.3' implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-exoplayer:${kohiiVersion}\" implementation \"com.google.android.exoplayer:exoplayer:${exoplayerVersion}\" Regarding Kohii version name structure Kohii extension for ExoPlayer uses a specific version of ExoPlayer for the playback logic. Because ExoPlayer doesn't guarantee backward compatibility on each minor release, Kohii includes the ExoPlayer release number in its release name to tell developer about which version of ExoPlayer it uses. For example Kohii 1.0.0.2010004 will use ExoPlayer 2.10.4 for playback logic, but Kohii 1.0.0.2011000 will use ExoPlayer 2.11.0 instead. kohii-androidx This artifact contains the implementation of kohii-core that uses AndroidX Media2 as playback backend . As a result, you will also need to include necessary AndroidX Media2 artifacts as well. The setup would be the same as kohii-exoplayer , accept that you need these instead of ExoPlayer : def kohiiVersion = '1.1.0.2011003' // always use latest available version implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-androidx:${kohiiVersion}\" def media2Version = '1.0.3' implementation \"androidx.media2:media2-widget:${media2Version}\" implementation \"androidx.media2:media2-common:${media2Version}\" implementation \"androidx.media2:media2-player:${media2Version}\" implementation \"androidx.media2:media2-session:${media2Version}\" kohii-experiments This artifacts includes experimental implementations. In short the playback logic provided by this package should be used with caution. Most important things to mention are [1] Kohii doesn't guarantee the compatibility of the experiments, [2] Developers want to adopt these experiments are suggested to copy-paste and modify the code to meet their need. Currently, kohii-experiments provides playback logic for YouTube Playback based on the Official YouTube Android Player API and the Unofficial YouTube Player library for Android and Chromecast . Using this package as below: def kohiiVersion = '1.1.0.2011003' // always use latest available version implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-experiments:${kohiiVersion}\" Warning Again, please use this package with caution!","title":"Getting start"},{"location":"getting-started/#getting-start","text":"Kohii is an Android library, therefore to use it, you need to add its artifacts to your module's build.gradle dependency list. Kohii is released to both bintray jcenter repository and sonatype maven central repository , so before adding Kohii to your project, make sure the following lines exist in your project root build.gradle file: allprojects { repositories { jcenter () // default repo, and mavenCentral() should also work. } } Kohii has the following artifacts: kohii-core This artifact contains core design of the library. It doesn't contain enough implementation detail to start the playback. To do so you need to include one of the following artifacts: kohii-exoplayer This artifact contains the implementation of kohii-core that uses ExoPlayer as playback backend . As a result, you will also need to include necessary ExoPlayer artifacts as well. Your dependency to use kohii-exoplayer will look like below: def kohiiVersion = '1.1.0.2011003' // always use latest available version def exoplayerVersion = '2.11.3' implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-exoplayer:${kohiiVersion}\" implementation \"com.google.android.exoplayer:exoplayer:${exoplayerVersion}\" Regarding Kohii version name structure Kohii extension for ExoPlayer uses a specific version of ExoPlayer for the playback logic. Because ExoPlayer doesn't guarantee backward compatibility on each minor release, Kohii includes the ExoPlayer release number in its release name to tell developer about which version of ExoPlayer it uses. For example Kohii 1.0.0.2010004 will use ExoPlayer 2.10.4 for playback logic, but Kohii 1.0.0.2011000 will use ExoPlayer 2.11.0 instead. kohii-androidx This artifact contains the implementation of kohii-core that uses AndroidX Media2 as playback backend . As a result, you will also need to include necessary AndroidX Media2 artifacts as well. The setup would be the same as kohii-exoplayer , accept that you need these instead of ExoPlayer : def kohiiVersion = '1.1.0.2011003' // always use latest available version implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-androidx:${kohiiVersion}\" def media2Version = '1.0.3' implementation \"androidx.media2:media2-widget:${media2Version}\" implementation \"androidx.media2:media2-common:${media2Version}\" implementation \"androidx.media2:media2-player:${media2Version}\" implementation \"androidx.media2:media2-session:${media2Version}\" kohii-experiments This artifacts includes experimental implementations. In short the playback logic provided by this package should be used with caution. Most important things to mention are [1] Kohii doesn't guarantee the compatibility of the experiments, [2] Developers want to adopt these experiments are suggested to copy-paste and modify the code to meet their need. Currently, kohii-experiments provides playback logic for YouTube Playback based on the Official YouTube Android Player API and the Unofficial YouTube Player library for Android and Chromecast . Using this package as below: def kohiiVersion = '1.1.0.2011003' // always use latest available version implementation \"im.ene.kohii:kohii-core:${kohiiVersion}\" implementation \"im.ene.kohii:kohii-experiments:${kohiiVersion}\" Warning Again, please use this package with caution!","title":"Getting start"},{"location":"glossary/","text":"Glossary \u00b6 This section helps you to understand the core concepts of Kohii . Renderer and Container \u00b6 When we play a Video to a destination surface, we call that surface a Renderer . Some examples of a Renderer are VideoView in Android framework, PlayerView in ExoPlayer. A component that can contain a Renderer is called Container . If a PlayerView renderer is added directly to a FrameLayout , that FrameLayout is a container. In Kohii , by calling bind(someView) , you are placing your Video to a Container . The renderer can also be the container when it contains itself. Note Currently in Kohii , we only support ViewGroup containers, but theoretically it can be anything. In the future, we will try to expand the concept of container to other types. The idea of Renderer and Container allows Kohii to build the abstractions around them where a renderer can be attached to a container, detached from a container and passed around, and therefore renderers can be reused for unlimited number of Videos. This behavior is supported out of the box by kohii-exoplayer and kohii-androidx packages. Playback and Playable \u00b6 Playback is a component in Kohii , designed to manage the container. Like Fragment in the Android framework which (optionally) has a View and lifecycle , Playback manages a view which is the container, and it has a lifecycle controlled by another component called Manager . A Playback's lifecycle is scoped to the container's lifecycle and the Manager's lifecycle, which is as large as an Activity or a Fragment's lifecycle. When you place a Video in a container by calling bind(container) , Kohii allows you to have some configurations such as tag, delay, visible threshold by which the Video should start or pause, etc. These configurations are passed to the Playback, processed and passed down to lower layer to construct resources for an actual playback. So you can have a Video playing with one configuration in a container, but another configuration in another container. It is helpful when you want to switch a Video playback from list to full-screen and vice-versa. Playable is a component in Kohii , designed to manage the renderer. A Playable is created when the client calls bind(container) , and there is no Playable created previously for the same Video information. In other words, a Playable will be available when there is a Playback requests it. Kohii manages Playable globally, which means that its lifecycle is scoped to the Application lifetime. But once a Playable is no longer needed , it will be destroyed. In Kohii , when a Playable is not used by any Playback, it will be released and scheduled to be destroyed. Though, during transient states like configuration change, current Playback will be destroyed (because its container is destroyed) and new Playback is still under construction, Kohii will give the Playable a few more time to wait for a Playback to request it. After this duration, if a Playable is not requested, Kohii will destroy it to reclaim its memory. The idea of Playable and Playback allows client to use the same Video and player resource for different renderers, which help to reduce the memory usage and enable developers to build complicated scenarios much easier. Bucket, Manager and Group \u00b6 Considering an Application where you have an Activity contains 3 Fragments: A, B and C. A has a RecyclerView (named RA) contains a lot of Videos. B has a ScrollView (named SB) contains many Videos and another RecyclerView (named RB) contains many Videos too. You only want RB to start playing the Videos automatically, and later you want to disable the Video playback of RB and enable it for RA. Kohii makes this possible by using a number of management components: Bucket, Manager and Group. Bucket is a component designed to manage a big View component like RecyclerView , NestedScrollView or ViewPager . Bucket is built by the Manager from the View it manages. And it has the responsibility to tell Manager about UI updates, as well as to select which Video to play from all Videos it knows about. The View is called the root of a Bucket . You can setup any View to be the root of a Bucket. A simple FrameLayout can be the root for a Bucket of all the Renderers it contains. Most of the time you want to use the most suitable root for your use case. For example, in your screen you have a RecyclerView whose each child is a FrameLayout with a PlayerView in it. Either the RecyclerView or each of its FrameLayout children can be the root of a Bucket, but if you want to manage all the Videos at once, you need to use build the Bucket from the RecyclerView. Kohii has built-in factory methods to build Bucket for RecyclerView , NestedScrollView , ViewPager , ViewPager2 and the general ViewGroup . You can have many Bucket in a single screen to enable complicated behavior. For example: when a RecyclerView with many Videos is nested in another RecyclerView, you can build the Bucket for both the RecyclerViews to control the Videos of the nested one. Manager is a component designed to manage a Fragment or an Activity which contains big View*s using Buckets. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose Video need to be controlled. So in our scenario above, Fragment B only need to register the RecyclerView to **Kohii* , the Manager will then acknowledge this RecyclerView and create a Bucket for it. Manager also manages all Playbacks in all Buckets, and closely communicates with the Group about any UI change. Group is as important as an Activity in Android framework. It contains many Managers just like an Activity can contain many Fragments , and it listens to Managers request to refresh the overall state. Because we will only allow a small number of videos from one Bucket of one Manager at a time to be playing, Group exists to take care of playback state of all Managers , and will carefully update the whole screen (i.e the Activity ) accordingly. Master, Engine \u00b6 Master is the component that controls everything used by the library. In short term, it is the brain of Kohii . There will be only one Master instance exists at one time. It controls the Playable's lifecycle, including destroying them when they are not needed anymore. It manages all the Groups of an Application, dispatch the playback events and so on. The client should never need to access the Master directly. Engine is a component that connects the client with the Master. An Engine has 3 important responsibilities: to initialize other important components like Managers, Groups, to help the client to bind the Video resource to a Container, and to build Playable for the Video. Most of the time, developer only needs to work with the Engine. You can also build custom Engine for your need.","title":"Glossary"},{"location":"glossary/#glossary","text":"This section helps you to understand the core concepts of Kohii .","title":"Glossary"},{"location":"glossary/#renderer-and-container","text":"When we play a Video to a destination surface, we call that surface a Renderer . Some examples of a Renderer are VideoView in Android framework, PlayerView in ExoPlayer. A component that can contain a Renderer is called Container . If a PlayerView renderer is added directly to a FrameLayout , that FrameLayout is a container. In Kohii , by calling bind(someView) , you are placing your Video to a Container . The renderer can also be the container when it contains itself. Note Currently in Kohii , we only support ViewGroup containers, but theoretically it can be anything. In the future, we will try to expand the concept of container to other types. The idea of Renderer and Container allows Kohii to build the abstractions around them where a renderer can be attached to a container, detached from a container and passed around, and therefore renderers can be reused for unlimited number of Videos. This behavior is supported out of the box by kohii-exoplayer and kohii-androidx packages.","title":"Renderer and Container"},{"location":"glossary/#playback-and-playable","text":"Playback is a component in Kohii , designed to manage the container. Like Fragment in the Android framework which (optionally) has a View and lifecycle , Playback manages a view which is the container, and it has a lifecycle controlled by another component called Manager . A Playback's lifecycle is scoped to the container's lifecycle and the Manager's lifecycle, which is as large as an Activity or a Fragment's lifecycle. When you place a Video in a container by calling bind(container) , Kohii allows you to have some configurations such as tag, delay, visible threshold by which the Video should start or pause, etc. These configurations are passed to the Playback, processed and passed down to lower layer to construct resources for an actual playback. So you can have a Video playing with one configuration in a container, but another configuration in another container. It is helpful when you want to switch a Video playback from list to full-screen and vice-versa. Playable is a component in Kohii , designed to manage the renderer. A Playable is created when the client calls bind(container) , and there is no Playable created previously for the same Video information. In other words, a Playable will be available when there is a Playback requests it. Kohii manages Playable globally, which means that its lifecycle is scoped to the Application lifetime. But once a Playable is no longer needed , it will be destroyed. In Kohii , when a Playable is not used by any Playback, it will be released and scheduled to be destroyed. Though, during transient states like configuration change, current Playback will be destroyed (because its container is destroyed) and new Playback is still under construction, Kohii will give the Playable a few more time to wait for a Playback to request it. After this duration, if a Playable is not requested, Kohii will destroy it to reclaim its memory. The idea of Playable and Playback allows client to use the same Video and player resource for different renderers, which help to reduce the memory usage and enable developers to build complicated scenarios much easier.","title":"Playback and Playable"},{"location":"glossary/#bucket-manager-and-group","text":"Considering an Application where you have an Activity contains 3 Fragments: A, B and C. A has a RecyclerView (named RA) contains a lot of Videos. B has a ScrollView (named SB) contains many Videos and another RecyclerView (named RB) contains many Videos too. You only want RB to start playing the Videos automatically, and later you want to disable the Video playback of RB and enable it for RA. Kohii makes this possible by using a number of management components: Bucket, Manager and Group. Bucket is a component designed to manage a big View component like RecyclerView , NestedScrollView or ViewPager . Bucket is built by the Manager from the View it manages. And it has the responsibility to tell Manager about UI updates, as well as to select which Video to play from all Videos it knows about. The View is called the root of a Bucket . You can setup any View to be the root of a Bucket. A simple FrameLayout can be the root for a Bucket of all the Renderers it contains. Most of the time you want to use the most suitable root for your use case. For example, in your screen you have a RecyclerView whose each child is a FrameLayout with a PlayerView in it. Either the RecyclerView or each of its FrameLayout children can be the root of a Bucket, but if you want to manage all the Videos at once, you need to use build the Bucket from the RecyclerView. Kohii has built-in factory methods to build Bucket for RecyclerView , NestedScrollView , ViewPager , ViewPager2 and the general ViewGroup . You can have many Bucket in a single screen to enable complicated behavior. For example: when a RecyclerView with many Videos is nested in another RecyclerView, you can build the Bucket for both the RecyclerViews to control the Videos of the nested one. Manager is a component designed to manage a Fragment or an Activity which contains big View*s using Buckets. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose Video need to be controlled. So in our scenario above, Fragment B only need to register the RecyclerView to **Kohii* , the Manager will then acknowledge this RecyclerView and create a Bucket for it. Manager also manages all Playbacks in all Buckets, and closely communicates with the Group about any UI change. Group is as important as an Activity in Android framework. It contains many Managers just like an Activity can contain many Fragments , and it listens to Managers request to refresh the overall state. Because we will only allow a small number of videos from one Bucket of one Manager at a time to be playing, Group exists to take care of playback state of all Managers , and will carefully update the whole screen (i.e the Activity ) accordingly.","title":"Bucket, Manager and Group"},{"location":"glossary/#master-engine","text":"Master is the component that controls everything used by the library. In short term, it is the brain of Kohii . There will be only one Master instance exists at one time. It controls the Playable's lifecycle, including destroying them when they are not needed anymore. It manages all the Groups of an Application, dispatch the playback events and so on. The client should never need to access the Master directly. Engine is a component that connects the client with the Master. An Engine has 3 important responsibilities: to initialize other important components like Managers, Groups, to help the client to bind the Video resource to a Container, and to build Playable for the Video. Most of the time, developer only needs to work with the Engine. You can also build custom Engine for your need.","title":"Master, Engine"},{"location":"intro/","text":"TL, DR \u00b6 Kohii is a library that: Is built for Android, supports Android 4.4 (SDK 19) and up. Provides easy to use Video playback functionality, including automatic playback, playback continuity across config change, lifecycle change and more. By default, support ExoPlayer and any ViewGroup as the bucket for videos, including: RecyclerView, NestedScrollView, ViewPager, ViewPager2, general ViewGroup, etc Kohii provides following features by default: Full automatic playback control using ExoPlayer as playback framework. Semi manual playback control using ExoPlayer as playback framework. User can play/pause specific player on demand, Kohii will smartly pause the Video if it is not visible anymore, and restore the previous state later if needed. Full manual playback control using ExoPlayer as playback framework. User can play/pause specific player on demand, Kohii does not touch anything, but take care of cleaning resource if needed (eg: release Player instances after user closes the Application). Preserve playback continuity across configuration changes, lifecycle changes (eg: from Activity to Activity) using ExoPlayer as playback framework. This means: rotating the device, switching to multi-windows mode or opening full-screen player doesn\\'t trigger pausing/resuming the playback. While the visual part will be re-rendered (due to View recreation), the audio part is kept smoothly, provide continuous playback experience. Reuse PlayerView instances for many players. Thinking that playing thousands of videos in sequence just using one PlayerView instance . Scoped volume configuration. This means: you can set volume value of one Video, and apply the same for others, depending on the scope you want. The scope can be just that Video, or all Videos in the same RecyclerView/ScrollView , or all Videos in the same Activity . Rich features demo app: demo and guidelines for creating various UX/UI patterns, from simple to complicated, including Picture-In-Picture playback or Scroll-To-Mini-Player UX just like YouTube app. For advance developers Kohii API is highly abstracted. You can easily extend it to support non-ExoPlayer API, or more complicated playback API. There is demo on how to use this YouTube player library in Kohii. The idea of Playback Continuity \u00b6 The concept Playback Continuity comes when I prepared for the Tokyo DroidKaigi 2019 where I will also talk about the same topic. Its idea was in my mind for a long time ago. Thinking about a Video playback, what are the common scenarios: Single, individual playback, like watching a movie on Netflix or YouTube. Multiple playback, like viewing many videos on a timeline like Facebook, and watch them one by one while scrolling through the list. All of these scenarios must share some common behaviors: Features \u00b6 0. Rich feature demo application \u00b6 As always, I try to cover as much of the capabilities of the library as possible in the demo app. By that, you can have the recommended ways to implement many patterns using Kohii , including: Using Kohii in RecyclerView only (the simplest pattern). Using Kohii in NestedScrollView only (yes, Kohii does not just support RecyclerView, it works with any ViewGroup you can imagine of, or, most of them). Using Kohii in ViewPager only, where each page is a Fragment (this is one of the thing that toro could not support well, so Kohii is here for the rescue). Using Kohii in Master/Detail UI composition (this is a new pattern I\\'m experimenting with, and it needs time to be battle proof, and it needs your feedback to be mature <3). Using Kohii in RecyclerView, with 'click-to-fullscreen' feature like YouTube UI. This is the game changer, my selling point for Kohii <3. Implementation of it is also discussed in this post . Using Kohii in RecyclerView, with 'click-to-fullscreen' feature that open the fullscreen playback in new Activity , without pausing/resuming the playback . So starting new Activity for fullscreen player will not interrupt your playback UX, sounds good huh? Using Kohii in RecyclerView, with 'click-to-fullscreen' feature that open the fullscreen playback in new Fragment , because single Activity is the new trend. To make it more fun, I also add the fragment transition learnt from here . And more to come, depending on the feedback I got, request I receive and time I have to spend. 1. Few-line setup, full auto \u00b6 Thinking that you just need the following lines to integrate fully automatic Video playback in to your App: // Init Kohii for Fragment or Activity val kohii = Kohii [ this /* fragment or activity instance */ ] kohii . register ( this , arrayOf ( recyclerView )) // register the RecyclerView to be a 'host' of our Videos. // In ViewHolder or Adapter's onBindViewHolder, where kohii instance is passed from above kohii . setUp ( videoUrl ). bind ( playerView ) // playerView is instance of ExoPlayer's PlayerView. This is the fastest way to use Kohii . With this setup, you got: Videos will be played/paused automatically on user's scroll. The top-most PlayerView whose visible area is equal to, or more than 65% of its area will be the one to play, all other PlayerView instances will be paused. Configuration changes like multi-windows mode, orientation change etc will not interupt the playback. (As the matter of fact, SurfaceView or TextureView used in PlayerView will be recreated, so you will see the glitch of the Video image frame, but the Audio will keep playing during the configuration change). Under the hood: Resource for Video playback is initialized as late as possible, so there is little to no impact to app's UX. Resource for Video playback is cached for reusability, so playback switching will be as fast as possible. Cached resource will be released as soon as possible, so there is no concern about memory leak. All playback logic, ExoPlayer implementation are provided by Kohii. You don't need to worry about anything. Digging in the API, you will have more control over the playback behavior, including: Repeat mode, which is the same with that of ExoPlayer. Delay, which help you to start the Playback with an amount of delay. Visible area of the PlayerView that trigger the playback. It is 65% by default, but you are free to change it. Initial playback info, so you can control the starting position, volume of a playback. And more. 2. Reusing PlayerView instance, with the same amount of code \u00b6 Yes, you read it correctly. Now you can reuse PlayerView instance across many Video playback. This is something toro could not archive, due to the limitation of its design. And as it is highly requested , Kohii is my answer to the problem. Changing the setup before to this // Init Kohii for Fragment or Activity val kohii = Kohii [ this /* fragment or activity instance */ ] kohii . register ( this , arrayOf ( recyclerView )) // register the RecyclerView to be a 'host' of our Videos. // In ViewHolder or Adapter's onBindViewHolder, where kohii instance is passed from above kohii . setUp ( videoUrl ). bind ( playerViewContainer ) // playerViewContainer is a ViewGroup to put PlayerView instance on demand. Just changing from using a PlayerView instance directly to using a container , you are done. To help you understand this feature, let\\'s talk about the why real quick: why reusing PlayerView instance is that cool? . If you take a look on the issue I mention above , go from bottom-up because it is a long issue to read through, you can see the discussion about reusing stuff in the ExoPlayer & RecyclerView combination . Yes, it is important to reuse as much as possible, to keep a smooth user experience, as well as to save memory. Assuming that you use PlayerView in your ViewHolder to play the video. If your viewport has 3 ~ 4 ViewHolders that contains Video, there will be at most one PlayerView that is playing at a time, and at least 2 ~ 3 PlayerView instances doing nothing, but still keeping an expensive Surface object alive. We know that creating and keeping Surface are expensive operations, so reusing the Surface is a reasonable requirement. How Kohii supports this: The required step is client provides the container to Kohii using the code above. The container can be just a FrameLayout. Kohii keeps a pool of PlayerView that will create the PlayerView instance on demand, and keep the cache of up to 2 instances of it, in the Activity's lifecycle scope. So once the Activity is destroyed, the pool is automatically cleared, again, no fear of memory leak. Kohii knows when the PlayerView should appear, and when it should not . When the PlayerView is demanded, Kohii acquires one instance from the pool. If there is no cached instance, a new instance will be created. On one hand, this instance will be passed to the playback engine, and on the other hand, it will be added to the container by internal mechanism. When the PlayerView should disappear, Kohii will remove it from the container , and release it back to the pool for reuse. Because there will be at most one PlayerView to play at a time, and Kohii's pool keeps up to 2 instances at a time, there will be at most 2 PlayerView instances living at a moment. (In practice, depends on how complicated your video content is, there will be more. For example you have both DRM content and non-DRM content, and you want to use TextureView for non-DRM ones, then Kohii keeps 2 pools for 2 types of playback). The caveat of this mechanism is that by default you do not control the way a PlayerView is created (spoiler: with more lines of code, you can). With more advance setup, you have the following control: How to add and remove PlayerView instance to/from the container . Because your container may contains other Views, Kohii allows you to provide your way to handle this operation. How to create PlayerView instance, because you may have your custom PlayerView implementation. 3. Manual control \u00b6 Some of the requirement I got from toro are the abilities to: Manually control the playback using UI/buttons Mute/Un-mute one playback and apply that to all Those 2 control can be gathered in one group: manual playback control, with scope. Kohii provides the following behaviors to make it possible: Allow client to configure so that, user can fully control the video playback, without any help by Kohii. For instance: when your RecyclerView is shown, and the first ViewHolder is a Video and it is fully visible. This behavior will not start the playback automatically, user can start/pause/do anything with the playback using client-provide UI controller. Once user scrolls the Video so that it is no longer visible on screen, Kohii will not do anything to pause or release the playback. If it was playing before, it keeps playing. If it was paused before, it keeps being paused. But once the Activity that contains this playback is destroyed, Kohii will correctly clear any resource in use. And even better, the manual playback is retained across configuration change, without any interuption. Allow client to configure so that, user can control the playback on the fly. This means that: Kohii will still start the playback automatically, but once user click to some buttons to pause it, Kohii will not change that state. So a video paused by user, even if it is fully visible, will not be played automatically (in full-auto config, Kohii will start this playback). When user scrolls the Video so that it is no longer visible enough, Kohii will do its jobs to pause and release resource if needed. And when user scrolls the Video back to visible enough, Kohii will put the playback to its previous state: if it was playing before being scrolled off-screen, it will be resumed; if it was paused before being scrolled off-screen, it keeps being paused. About the volume control, it works in a bit different way: Kohii allows client to apply a volume value by scope . There are 4 scopes in Kohii, but to not go too deep, I will just talk about 2: playback scope, and global scope. If client applies a volume value to playback scope , then only the receiver playback object will have this new volume value. But if client applies a volume value to global scope , then all currently playing playbacks, and any playback that will be created next will have the new volume value. The control flow is easy to imagine, but not easy to implementation. What I did for Kohii is one of my best thing I have ever done. And I hope it helps you to solve your problems.","title":"Intro"},{"location":"intro/#tl-dr","text":"Kohii is a library that: Is built for Android, supports Android 4.4 (SDK 19) and up. Provides easy to use Video playback functionality, including automatic playback, playback continuity across config change, lifecycle change and more. By default, support ExoPlayer and any ViewGroup as the bucket for videos, including: RecyclerView, NestedScrollView, ViewPager, ViewPager2, general ViewGroup, etc Kohii provides following features by default: Full automatic playback control using ExoPlayer as playback framework. Semi manual playback control using ExoPlayer as playback framework. User can play/pause specific player on demand, Kohii will smartly pause the Video if it is not visible anymore, and restore the previous state later if needed. Full manual playback control using ExoPlayer as playback framework. User can play/pause specific player on demand, Kohii does not touch anything, but take care of cleaning resource if needed (eg: release Player instances after user closes the Application). Preserve playback continuity across configuration changes, lifecycle changes (eg: from Activity to Activity) using ExoPlayer as playback framework. This means: rotating the device, switching to multi-windows mode or opening full-screen player doesn\\'t trigger pausing/resuming the playback. While the visual part will be re-rendered (due to View recreation), the audio part is kept smoothly, provide continuous playback experience. Reuse PlayerView instances for many players. Thinking that playing thousands of videos in sequence just using one PlayerView instance . Scoped volume configuration. This means: you can set volume value of one Video, and apply the same for others, depending on the scope you want. The scope can be just that Video, or all Videos in the same RecyclerView/ScrollView , or all Videos in the same Activity . Rich features demo app: demo and guidelines for creating various UX/UI patterns, from simple to complicated, including Picture-In-Picture playback or Scroll-To-Mini-Player UX just like YouTube app. For advance developers Kohii API is highly abstracted. You can easily extend it to support non-ExoPlayer API, or more complicated playback API. There is demo on how to use this YouTube player library in Kohii.","title":"TL, DR"},{"location":"intro/#the-idea-of-playback-continuity","text":"The concept Playback Continuity comes when I prepared for the Tokyo DroidKaigi 2019 where I will also talk about the same topic. Its idea was in my mind for a long time ago. Thinking about a Video playback, what are the common scenarios: Single, individual playback, like watching a movie on Netflix or YouTube. Multiple playback, like viewing many videos on a timeline like Facebook, and watch them one by one while scrolling through the list. All of these scenarios must share some common behaviors:","title":"The idea of Playback Continuity"},{"location":"intro/#features","text":"","title":"Features"},{"location":"intro/#0-rich-feature-demo-application","text":"As always, I try to cover as much of the capabilities of the library as possible in the demo app. By that, you can have the recommended ways to implement many patterns using Kohii , including: Using Kohii in RecyclerView only (the simplest pattern). Using Kohii in NestedScrollView only (yes, Kohii does not just support RecyclerView, it works with any ViewGroup you can imagine of, or, most of them). Using Kohii in ViewPager only, where each page is a Fragment (this is one of the thing that toro could not support well, so Kohii is here for the rescue). Using Kohii in Master/Detail UI composition (this is a new pattern I\\'m experimenting with, and it needs time to be battle proof, and it needs your feedback to be mature <3). Using Kohii in RecyclerView, with 'click-to-fullscreen' feature like YouTube UI. This is the game changer, my selling point for Kohii <3. Implementation of it is also discussed in this post . Using Kohii in RecyclerView, with 'click-to-fullscreen' feature that open the fullscreen playback in new Activity , without pausing/resuming the playback . So starting new Activity for fullscreen player will not interrupt your playback UX, sounds good huh? Using Kohii in RecyclerView, with 'click-to-fullscreen' feature that open the fullscreen playback in new Fragment , because single Activity is the new trend. To make it more fun, I also add the fragment transition learnt from here . And more to come, depending on the feedback I got, request I receive and time I have to spend.","title":"0. Rich feature demo application"},{"location":"intro/#1-few-line-setup-full-auto","text":"Thinking that you just need the following lines to integrate fully automatic Video playback in to your App: // Init Kohii for Fragment or Activity val kohii = Kohii [ this /* fragment or activity instance */ ] kohii . register ( this , arrayOf ( recyclerView )) // register the RecyclerView to be a 'host' of our Videos. // In ViewHolder or Adapter's onBindViewHolder, where kohii instance is passed from above kohii . setUp ( videoUrl ). bind ( playerView ) // playerView is instance of ExoPlayer's PlayerView. This is the fastest way to use Kohii . With this setup, you got: Videos will be played/paused automatically on user's scroll. The top-most PlayerView whose visible area is equal to, or more than 65% of its area will be the one to play, all other PlayerView instances will be paused. Configuration changes like multi-windows mode, orientation change etc will not interupt the playback. (As the matter of fact, SurfaceView or TextureView used in PlayerView will be recreated, so you will see the glitch of the Video image frame, but the Audio will keep playing during the configuration change). Under the hood: Resource for Video playback is initialized as late as possible, so there is little to no impact to app's UX. Resource for Video playback is cached for reusability, so playback switching will be as fast as possible. Cached resource will be released as soon as possible, so there is no concern about memory leak. All playback logic, ExoPlayer implementation are provided by Kohii. You don't need to worry about anything. Digging in the API, you will have more control over the playback behavior, including: Repeat mode, which is the same with that of ExoPlayer. Delay, which help you to start the Playback with an amount of delay. Visible area of the PlayerView that trigger the playback. It is 65% by default, but you are free to change it. Initial playback info, so you can control the starting position, volume of a playback. And more.","title":"1. Few-line setup, full auto"},{"location":"intro/#2-reusing-playerview-instance-with-the-same-amount-of-code","text":"Yes, you read it correctly. Now you can reuse PlayerView instance across many Video playback. This is something toro could not archive, due to the limitation of its design. And as it is highly requested , Kohii is my answer to the problem. Changing the setup before to this // Init Kohii for Fragment or Activity val kohii = Kohii [ this /* fragment or activity instance */ ] kohii . register ( this , arrayOf ( recyclerView )) // register the RecyclerView to be a 'host' of our Videos. // In ViewHolder or Adapter's onBindViewHolder, where kohii instance is passed from above kohii . setUp ( videoUrl ). bind ( playerViewContainer ) // playerViewContainer is a ViewGroup to put PlayerView instance on demand. Just changing from using a PlayerView instance directly to using a container , you are done. To help you understand this feature, let\\'s talk about the why real quick: why reusing PlayerView instance is that cool? . If you take a look on the issue I mention above , go from bottom-up because it is a long issue to read through, you can see the discussion about reusing stuff in the ExoPlayer & RecyclerView combination . Yes, it is important to reuse as much as possible, to keep a smooth user experience, as well as to save memory. Assuming that you use PlayerView in your ViewHolder to play the video. If your viewport has 3 ~ 4 ViewHolders that contains Video, there will be at most one PlayerView that is playing at a time, and at least 2 ~ 3 PlayerView instances doing nothing, but still keeping an expensive Surface object alive. We know that creating and keeping Surface are expensive operations, so reusing the Surface is a reasonable requirement. How Kohii supports this: The required step is client provides the container to Kohii using the code above. The container can be just a FrameLayout. Kohii keeps a pool of PlayerView that will create the PlayerView instance on demand, and keep the cache of up to 2 instances of it, in the Activity's lifecycle scope. So once the Activity is destroyed, the pool is automatically cleared, again, no fear of memory leak. Kohii knows when the PlayerView should appear, and when it should not . When the PlayerView is demanded, Kohii acquires one instance from the pool. If there is no cached instance, a new instance will be created. On one hand, this instance will be passed to the playback engine, and on the other hand, it will be added to the container by internal mechanism. When the PlayerView should disappear, Kohii will remove it from the container , and release it back to the pool for reuse. Because there will be at most one PlayerView to play at a time, and Kohii's pool keeps up to 2 instances at a time, there will be at most 2 PlayerView instances living at a moment. (In practice, depends on how complicated your video content is, there will be more. For example you have both DRM content and non-DRM content, and you want to use TextureView for non-DRM ones, then Kohii keeps 2 pools for 2 types of playback). The caveat of this mechanism is that by default you do not control the way a PlayerView is created (spoiler: with more lines of code, you can). With more advance setup, you have the following control: How to add and remove PlayerView instance to/from the container . Because your container may contains other Views, Kohii allows you to provide your way to handle this operation. How to create PlayerView instance, because you may have your custom PlayerView implementation.","title":"2. Reusing PlayerView instance, with the same amount of code"},{"location":"intro/#3-manual-control","text":"Some of the requirement I got from toro are the abilities to: Manually control the playback using UI/buttons Mute/Un-mute one playback and apply that to all Those 2 control can be gathered in one group: manual playback control, with scope. Kohii provides the following behaviors to make it possible: Allow client to configure so that, user can fully control the video playback, without any help by Kohii. For instance: when your RecyclerView is shown, and the first ViewHolder is a Video and it is fully visible. This behavior will not start the playback automatically, user can start/pause/do anything with the playback using client-provide UI controller. Once user scrolls the Video so that it is no longer visible on screen, Kohii will not do anything to pause or release the playback. If it was playing before, it keeps playing. If it was paused before, it keeps being paused. But once the Activity that contains this playback is destroyed, Kohii will correctly clear any resource in use. And even better, the manual playback is retained across configuration change, without any interuption. Allow client to configure so that, user can control the playback on the fly. This means that: Kohii will still start the playback automatically, but once user click to some buttons to pause it, Kohii will not change that state. So a video paused by user, even if it is fully visible, will not be played automatically (in full-auto config, Kohii will start this playback). When user scrolls the Video so that it is no longer visible enough, Kohii will do its jobs to pause and release resource if needed. And when user scrolls the Video back to visible enough, Kohii will put the playback to its previous state: if it was playing before being scrolled off-screen, it will be resumed; if it was paused before being scrolled off-screen, it keeps being paused. About the volume control, it works in a bit different way: Kohii allows client to apply a volume value by scope . There are 4 scopes in Kohii, but to not go too deep, I will just talk about 2: playback scope, and global scope. If client applies a volume value to playback scope , then only the receiver playback object will have this new volume value. But if client applies a volume value to global scope , then all currently playing playbacks, and any playback that will be created next will have the new volume value. The control flow is easy to imagine, but not easy to implementation. What I did for Kohii is one of my best thing I have ever done. And I hope it helps you to solve your problems.","title":"3. Manual control"},{"location":"usage-basic/","text":"Basic usages \u00b6 The scenario \u00b6 This basic usage session will guide you step-by-step to complete this scenario: you have a Fragment with many Videos in a vertical RecyclerView . You want each Video to start playing automatically if that Video is visible more than 65% of its full area, and stay on top of all the visible Videos (fully, or partly) . If you scroll the list, the Video that is not visible enough will be paused automatically, and the other Video which sastisfy the condition above will start playing automatically. TL,DR \u00b6 We will explains a lot of details, so it may be a lot of texts. Here is the short version if you want to start right away: First, add this to your Fragment#onViewCreated or Activity#onCreate Kotlin val kohii = Kohii [ this ] kohii . register ( this ) . addBucket ( recyclerView ) // assume that you are using a RecyclerView . addBucket ( anotherRecyclerView ) // yeah, 2 RVs in one place, why not. Java Kohii kohii = Kohii . get ( this ); kohii . register ( this ) . addBucket ( recyclerView ) // assume that you are using a RecyclerView . addBucket ( anotherRecyclerView ); // yeah, 2 RVs in one place, why not. Second, add this in your RecyclerView.Adapter#onBindViewHolder , or corresponding place in ViewHolder Kotlin // You need to pass the kohii instance here kohii . setUp ( videoUrl ). bind ( playerView ) Java // You need to pass the kohii instance here kohii . setUp ( videoUrl ). bind ( playerView ); Done, you have what you want. But before leaving, let's discover the details below with your curiousity. Before you start: thinking in Kohii \u00b6 It is important that you get the concept of Kohii before we go further. Because the way you think about Video playback until now would be different to what Kohii thinks. Until now, you may see and/or use the following pattern: videoView . setVideoPath ( videoUrl ) This line reads : I have a VideoView and I will play a Video in it by calling setVideoPath method. In Kohii , the direction is opposite: kohii . setUp ( videoUrl ). bind ( videoView ) This line reads: I have a Video and I will play it in a VideoView. Let's setup the Video and bind it to the VideoView. The difference here is: who is the main actor ? In traditional way, the VideoView owns the Video and therefore, when it dies, we also lose the Video playback. In Kohii , we let the Video be the active part. It acknowledges the VideoView it will be played on. So when the VideoView dies, your Video can be smoothly switched to other VideoView . To give you an imagine about why it is good this way, consider this scenario: you have a list of Videos, and you want to open one Video in fullscreen, smoothly . Thinking in traditional way : How I can open this VideoView (which is now in the list) in fullscreen? If I use other VideoView I will need to call that setVideoPath again and it will create new resource and stuff and the playback will be reloaded, and so on... We see some challenges here already. While thinking in Kohii way , it sounds easier: How can I open this Video (which is now in the list) in fullscreen? Can I just switch it from current VideoView to the fullscreen VideoView ? This way of thinking is the base for all the abstractions in Kohii . How this idea comes to life will be discussed later. Now that you have the concept about Kohii , let's get our hands dirty. Preparation \u00b6 This section will use some assumptions below: You will use Kohii in Fragment (the usage will be the same in Activity ). You use ExoPlayer for the playback (implementation provided via kohii-exoplayer extension). You own the content or have enough rights to use them. Kohii has no responsibility about how you use it in your app. First, you need to initialize a few things so that Kohii makes sense of your application. \u25a0 Initialize Kohii instance Kohii should be used as a Global instance. You can get it as follow: Kotlin val kohii = Kohii [ this @Fragment ] // or using Context also works: val kohii = Kohii[requireContext()] Java Kohii kohii = Kohii . get ( this ); // or using Context: Kohii kohii = Kohii.get(requireContext()); As a singleton , Kohii instance can be passed around or re-obtained in other Fragment . You can also use dependency injection library like Dagger to prepare a global instance, and inject it to required places. \u25a0 Register necessary objects to Kohii Kohii needs to know about a few things to work properly: Where you are using Kohii from? A Fragment or Activity ? Line below answers that question: Kotlin // From the Fragment's onViewCreated() kohii . register ( this @Fragment ) Java // From the Fragment's onViewCreated() kohii . register ( this ); The line above also return a Manager object. It is useful in some advance usages, but we don't need it for now. Which ViewGroup contains Videos? We call that ViewGroup a Bucket . Because you may have more than one bucket in your Fragment , and not all of them need to be tracked by Kohii , you should only register ones you care about. Code for it is as below: Kotlin kohii . register ( this @Fragment ) // or manager . addBucket ( recyclerView ) . addBucket ( anotherRecyclerView ) // yeah, 2 RVs in one Fragment, why not. Java kohii . register ( this ) // or manager . addBucket ( recyclerView ) . addBucket ( anotherRecyclerView ); // yeah, 2 RVs in one Fragment, why not. It is enough setting up for this session. Next, we will setup the Video for each ViewHolder. Integration \u00b6 To make it works, you need only one line: Kotlin // You must pass the kohii instance here // playerView is the PlayerView you want to play your Video on kohii . setUp ( videoUrl ). bind ( playerView ) Java // You must pass the kohii instance here // playerView is the PlayerView you want to play your Video on kohii . setUp ( videoUrl ). bind ( playerView ); But let's understand the concept behind: In the one line above: kohii.setUp(videoUrl) turns the url to a Binder object which can be used to bind to a container . Once you finish the setup, you have the Video to be automatically played/paused once user scrolls the list such that the container is visible more (will play) or less (will pause) than 65% of its area. Also, to ensure the playback is automatic, if the renderer is a PlayerView Kohii will forcefully disable the PlayerView 's PlayerControlView even if you set it before. To have manual playback control enabled, you need some additional configuration which will be discussed in other session.","title":"Basic usages"},{"location":"usage-basic/#basic-usages","text":"","title":"Basic usages"},{"location":"usage-basic/#the-scenario","text":"This basic usage session will guide you step-by-step to complete this scenario: you have a Fragment with many Videos in a vertical RecyclerView . You want each Video to start playing automatically if that Video is visible more than 65% of its full area, and stay on top of all the visible Videos (fully, or partly) . If you scroll the list, the Video that is not visible enough will be paused automatically, and the other Video which sastisfy the condition above will start playing automatically.","title":"The scenario"},{"location":"usage-basic/#tldr","text":"We will explains a lot of details, so it may be a lot of texts. Here is the short version if you want to start right away: First, add this to your Fragment#onViewCreated or Activity#onCreate Kotlin val kohii = Kohii [ this ] kohii . register ( this ) . addBucket ( recyclerView ) // assume that you are using a RecyclerView . addBucket ( anotherRecyclerView ) // yeah, 2 RVs in one place, why not. Java Kohii kohii = Kohii . get ( this ); kohii . register ( this ) . addBucket ( recyclerView ) // assume that you are using a RecyclerView . addBucket ( anotherRecyclerView ); // yeah, 2 RVs in one place, why not. Second, add this in your RecyclerView.Adapter#onBindViewHolder , or corresponding place in ViewHolder Kotlin // You need to pass the kohii instance here kohii . setUp ( videoUrl ). bind ( playerView ) Java // You need to pass the kohii instance here kohii . setUp ( videoUrl ). bind ( playerView ); Done, you have what you want. But before leaving, let's discover the details below with your curiousity.","title":"TL,DR"},{"location":"usage-basic/#before-you-start-thinking-in-kohii","text":"It is important that you get the concept of Kohii before we go further. Because the way you think about Video playback until now would be different to what Kohii thinks. Until now, you may see and/or use the following pattern: videoView . setVideoPath ( videoUrl ) This line reads : I have a VideoView and I will play a Video in it by calling setVideoPath method. In Kohii , the direction is opposite: kohii . setUp ( videoUrl ). bind ( videoView ) This line reads: I have a Video and I will play it in a VideoView. Let's setup the Video and bind it to the VideoView. The difference here is: who is the main actor ? In traditional way, the VideoView owns the Video and therefore, when it dies, we also lose the Video playback. In Kohii , we let the Video be the active part. It acknowledges the VideoView it will be played on. So when the VideoView dies, your Video can be smoothly switched to other VideoView . To give you an imagine about why it is good this way, consider this scenario: you have a list of Videos, and you want to open one Video in fullscreen, smoothly . Thinking in traditional way : How I can open this VideoView (which is now in the list) in fullscreen? If I use other VideoView I will need to call that setVideoPath again and it will create new resource and stuff and the playback will be reloaded, and so on... We see some challenges here already. While thinking in Kohii way , it sounds easier: How can I open this Video (which is now in the list) in fullscreen? Can I just switch it from current VideoView to the fullscreen VideoView ? This way of thinking is the base for all the abstractions in Kohii . How this idea comes to life will be discussed later. Now that you have the concept about Kohii , let's get our hands dirty.","title":"Before you start: thinking in Kohii"},{"location":"usage-basic/#preparation","text":"This section will use some assumptions below: You will use Kohii in Fragment (the usage will be the same in Activity ). You use ExoPlayer for the playback (implementation provided via kohii-exoplayer extension). You own the content or have enough rights to use them. Kohii has no responsibility about how you use it in your app. First, you need to initialize a few things so that Kohii makes sense of your application. \u25a0 Initialize Kohii instance Kohii should be used as a Global instance. You can get it as follow: Kotlin val kohii = Kohii [ this @Fragment ] // or using Context also works: val kohii = Kohii[requireContext()] Java Kohii kohii = Kohii . get ( this ); // or using Context: Kohii kohii = Kohii.get(requireContext()); As a singleton , Kohii instance can be passed around or re-obtained in other Fragment . You can also use dependency injection library like Dagger to prepare a global instance, and inject it to required places. \u25a0 Register necessary objects to Kohii Kohii needs to know about a few things to work properly: Where you are using Kohii from? A Fragment or Activity ? Line below answers that question: Kotlin // From the Fragment's onViewCreated() kohii . register ( this @Fragment ) Java // From the Fragment's onViewCreated() kohii . register ( this ); The line above also return a Manager object. It is useful in some advance usages, but we don't need it for now. Which ViewGroup contains Videos? We call that ViewGroup a Bucket . Because you may have more than one bucket in your Fragment , and not all of them need to be tracked by Kohii , you should only register ones you care about. Code for it is as below: Kotlin kohii . register ( this @Fragment ) // or manager . addBucket ( recyclerView ) . addBucket ( anotherRecyclerView ) // yeah, 2 RVs in one Fragment, why not. Java kohii . register ( this ) // or manager . addBucket ( recyclerView ) . addBucket ( anotherRecyclerView ); // yeah, 2 RVs in one Fragment, why not. It is enough setting up for this session. Next, we will setup the Video for each ViewHolder.","title":"Preparation"},{"location":"usage-basic/#integration","text":"To make it works, you need only one line: Kotlin // You must pass the kohii instance here // playerView is the PlayerView you want to play your Video on kohii . setUp ( videoUrl ). bind ( playerView ) Java // You must pass the kohii instance here // playerView is the PlayerView you want to play your Video on kohii . setUp ( videoUrl ). bind ( playerView ); But let's understand the concept behind: In the one line above: kohii.setUp(videoUrl) turns the url to a Binder object which can be used to bind to a container . Once you finish the setup, you have the Video to be automatically played/paused once user scrolls the list such that the container is visible more (will play) or less (will pause) than 65% of its area. Also, to ensure the playback is automatic, if the renderer is a PlayerView Kohii will forcefully disable the PlayerView 's PlayerControlView even if you set it before. To have manual playback control enabled, you need some additional configuration which will be discussed in other session.","title":"Integration"},{"location":"api/kohii-ads/","text":"kohii-ads Packages \u00b6 Name Summary kohii.v1.ads kohii.v1.ads.exoplayer Index \u00b6 All Types","title":"kohii-ads"},{"location":"api/kohii-ads/#packages","text":"Name Summary kohii.v1.ads kohii.v1.ads.exoplayer","title":"Packages"},{"location":"api/kohii-ads/#index","text":"All Types","title":"Index"},{"location":"api/kohii-ads/alltypes/","text":"All Types \u00b6 Name Summary kohii.v1.ads.AdMedia A Media type that optionally contains information about Advertisement media. kohii.v1.ads.AdMediaItem A default implementation of AdMedia . kohii.v1.ads.exoplayer.ImaBridgeConfig Configurations for a PlayerViewImaBridge . kohii.v1.ads.Manilo An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension). kohii.v1.ads.exoplayer.PlayerViewImaBridge A PlayerViewBridge that supports ad media using ImaAdsLoader . kohii.v1.ads.exoplayer.PlayerViewImaBridgeCreator A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"Index"},{"location":"api/kohii-ads/alltypes/#all-types","text":"Name Summary kohii.v1.ads.AdMedia A Media type that optionally contains information about Advertisement media. kohii.v1.ads.AdMediaItem A default implementation of AdMedia . kohii.v1.ads.exoplayer.ImaBridgeConfig Configurations for a PlayerViewImaBridge . kohii.v1.ads.Manilo An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension). kohii.v1.ads.exoplayer.PlayerViewImaBridge A PlayerViewBridge that supports ad media using ImaAdsLoader . kohii.v1.ads.exoplayer.PlayerViewImaBridgeCreator A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"All Types"},{"location":"api/kohii-ads/kohii.v1.ads/","text":"kohii-ads / kohii.v1.ads Package kohii.v1.ads \u00b6 Types \u00b6 Name Summary AdMedia interface AdMedia : Media A Media type that optionally contains information about Advertisement media. AdMediaItem data class AdMediaItem : MediaItem , AdMedia A default implementation of AdMedia . Manilo class Manilo : Kohii, AdEventListener An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension).","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads/#package-kohiiv1ads","text":"","title":"Package kohii.v1.ads"},{"location":"api/kohii-ads/kohii.v1.ads/#types","text":"Name Summary AdMedia interface AdMedia : Media A Media type that optionally contains information about Advertisement media. AdMediaItem data class AdMediaItem : MediaItem , AdMedia A default implementation of AdMedia . Manilo class Manilo : Kohii, AdEventListener An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension).","title":"Types"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media/","text":"kohii-ads / kohii.v1.ads / AdMedia AdMedia \u00b6 interface AdMedia : Media A Media type that optionally contains information about Advertisement media. Properties \u00b6 Name Summary adTagUri abstract val adTagUri: Uri ? Inheritors \u00b6 Name Summary AdMediaItem data class AdMediaItem : MediaItem , AdMedia A default implementation of AdMedia .","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media/#admedia","text":"interface AdMedia : Media A Media type that optionally contains information about Advertisement media.","title":"AdMedia"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media/#properties","text":"Name Summary adTagUri abstract val adTagUri: Uri ?","title":"Properties"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media/#inheritors","text":"Name Summary AdMediaItem data class AdMediaItem : MediaItem , AdMedia A default implementation of AdMedia .","title":"Inheritors"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media/ad-tag-uri/","text":"kohii-ads / kohii.v1.ads / AdMedia / adTagUri adTagUri \u00b6 abstract val adTagUri: Uri ?","title":"Ad tag uri"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media/ad-tag-uri/#adtaguri","text":"abstract val adTagUri: Uri ?","title":"adTagUri"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/","text":"kohii-ads / kohii.v1.ads / AdMediaItem AdMediaItem \u00b6 data class AdMediaItem : MediaItem , AdMedia A default implementation of AdMedia . Constructors \u00b6 Name Summary <init> AdMediaItem(uri: Uri , adTagUri: Uri ? = null, type: String ? = null, mediaDrm: MediaDrm ? = null) A default implementation of AdMedia . Properties \u00b6 Name Summary adTagUri val adTagUri: Uri ? mediaDrm val mediaDrm: MediaDrm ? type val type: String ? uri val uri: Uri","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/#admediaitem","text":"data class AdMediaItem : MediaItem , AdMedia A default implementation of AdMedia .","title":"AdMediaItem"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/#constructors","text":"Name Summary <init> AdMediaItem(uri: Uri , adTagUri: Uri ? = null, type: String ? = null, mediaDrm: MediaDrm ? = null) A default implementation of AdMedia .","title":"Constructors"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/#properties","text":"Name Summary adTagUri val adTagUri: Uri ? mediaDrm val mediaDrm: MediaDrm ? type val type: String ? uri val uri: Uri","title":"Properties"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/-init-/","text":"kohii-ads / kohii.v1.ads / AdMediaItem / <init> <init> \u00b6 AdMediaItem(uri: Uri , adTagUri: Uri ? = null, type: String ? = null, mediaDrm: MediaDrm ? = null) A default implementation of AdMedia .","title":" init "},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/-init-/#init","text":"AdMediaItem(uri: Uri , adTagUri: Uri ? = null, type: String ? = null, mediaDrm: MediaDrm ? = null) A default implementation of AdMedia .","title":"&lt;init&gt;"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/ad-tag-uri/","text":"kohii-ads / kohii.v1.ads / AdMediaItem / adTagUri adTagUri \u00b6 val adTagUri: Uri ? Overrides AdMedia.adTagUri","title":"Ad tag uri"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/ad-tag-uri/#adtaguri","text":"val adTagUri: Uri ? Overrides AdMedia.adTagUri","title":"adTagUri"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/media-drm/","text":"kohii-ads / kohii.v1.ads / AdMediaItem / mediaDrm mediaDrm \u00b6 val mediaDrm: MediaDrm ?","title":"Media drm"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/media-drm/#mediadrm","text":"val mediaDrm: MediaDrm ?","title":"mediaDrm"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/type/","text":"kohii-ads / kohii.v1.ads / AdMediaItem / type type \u00b6 val type: String ?","title":"Type"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/type/#type","text":"val type: String ?","title":"type"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/uri/","text":"kohii-ads / kohii.v1.ads / AdMediaItem / uri uri \u00b6 val uri: Uri","title":"Uri"},{"location":"api/kohii-ads/kohii.v1.ads/-ad-media-item/uri/#uri","text":"val uri: Uri","title":"uri"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/","text":"kohii-ads / kohii.v1.ads / Manilo Manilo \u00b6 class Manilo : Kohii, AdEventListener An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension). Constructors \u00b6 Name Summary <init> Manilo(context: Context , playerPool: PlayerPool ` = ExoPlayerPool(context = context), mediaSourceFactoryProvider: MediaSourceFactoryProvider = with(context.applicationContext) { val userAgent = Common.getUserAgent(this, BuildConfig.LIB_NAME) val httpDataSourceFactory = DefaultHttpDataSourceFactory(userAgent) val mediaCache: Cache = ExoPlayerCache.lruCacheSingleton.get(this) val upstreamFactory = DefaultDataSourceFactory(this, httpDataSourceFactory) val drmSessionManagerProvider = DefaultDrmSessionManagerProvider(this, httpDataSourceFactory) DefaultMediaSourceFactoryProvider(upstreamFactory, drmSessionManagerProvider, mediaCache) }, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>Creates a new instance of [Manilo](./index.md) from a [Context](https://developer.android.com/reference/android/content/Context.html), a custom [MediaSourceFactory](#) and a custom [ImaAdsLoader.Builder](#). Application can also use a custom [PlayerPool](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-player-pool/index.md) for the [Player](#) and a custom [MediaSourceFactoryProvider](#), but they are all optional.`Manilo(context: `[`Context`](https://developer.android.com/reference/android/content/Context.html)`, config: ExoPlayerConfig, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>Creates a new instance of [Manilo](./index.md) from a [Context](https://developer.android.com/reference/android/content/Context.html), an [ExoPlayerConfig](#), a custom [MediaSourceFactory](#) and a custom [ImaAdsLoader.Builder](#).`Manilo(context: `[`Context`](https://developer.android.com/reference/android/content/Context.html)`, playerCreator: ((`[`Context`](https://developer.android.com/reference/android/content/Context.html)`) -> Player)? = null, mediaSourceFactoryCreator: ((`[`Media`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.media/-media/index.md)`) -> MediaSourceFactory)? = null, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>Creates a new instance of [Manilo](./index.md) from a [Context](https://developer.android.com/reference/android/content/Context.html), a custom way to create [Player](#) instance, a custom way to create [MediaSourceFactory](#) for the [Media](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.media/-media/index.md) item, a custom [MediaSourceFactory](#) for the ad media and a custom [ImaAdsLoader.Builder](#).`Manilo(master: `[`Master`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-master/index.md)`, playableCreator: `[`PlayableCreator`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-playable-creator/index.md)`<PlayerView> = PlayerViewPlayableCreator.Builder(master.app) .setBridgeCreatorFactory(defaultBridgeCreatorFactory) .build(), rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>An [Engine](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-engine/index.md) that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension). | Functions \u00b6 Name Summary onAdEvent fun onAdEvent(adEvent: AdEvent): Unit Companion Object Functions \u00b6 Name Summary get operator fun get(context: Context ): Manilo operator fun get(fragment: Fragment ): Manilo","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/#manilo","text":"class Manilo : Kohii, AdEventListener An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension).","title":"Manilo"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/#constructors","text":"Name Summary <init> Manilo(context: Context , playerPool: PlayerPool ` = ExoPlayerPool(context = context), mediaSourceFactoryProvider: MediaSourceFactoryProvider = with(context.applicationContext) { val userAgent = Common.getUserAgent(this, BuildConfig.LIB_NAME) val httpDataSourceFactory = DefaultHttpDataSourceFactory(userAgent) val mediaCache: Cache = ExoPlayerCache.lruCacheSingleton.get(this) val upstreamFactory = DefaultDataSourceFactory(this, httpDataSourceFactory) val drmSessionManagerProvider = DefaultDrmSessionManagerProvider(this, httpDataSourceFactory) DefaultMediaSourceFactoryProvider(upstreamFactory, drmSessionManagerProvider, mediaCache) }, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>Creates a new instance of [Manilo](./index.md) from a [Context](https://developer.android.com/reference/android/content/Context.html), a custom [MediaSourceFactory](#) and a custom [ImaAdsLoader.Builder](#). Application can also use a custom [PlayerPool](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-player-pool/index.md) for the [Player](#) and a custom [MediaSourceFactoryProvider](#), but they are all optional.`Manilo(context: `[`Context`](https://developer.android.com/reference/android/content/Context.html)`, config: ExoPlayerConfig, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>Creates a new instance of [Manilo](./index.md) from a [Context](https://developer.android.com/reference/android/content/Context.html), an [ExoPlayerConfig](#), a custom [MediaSourceFactory](#) and a custom [ImaAdsLoader.Builder](#).`Manilo(context: `[`Context`](https://developer.android.com/reference/android/content/Context.html)`, playerCreator: ((`[`Context`](https://developer.android.com/reference/android/content/Context.html)`) -> Player)? = null, mediaSourceFactoryCreator: ((`[`Media`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.media/-media/index.md)`) -> MediaSourceFactory)? = null, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>Creates a new instance of [Manilo](./index.md) from a [Context](https://developer.android.com/reference/android/content/Context.html), a custom way to create [Player](#) instance, a custom way to create [MediaSourceFactory](#) for the [Media](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.media/-media/index.md) item, a custom [MediaSourceFactory](#) for the ad media and a custom [ImaAdsLoader.Builder](#).`Manilo(master: `[`Master`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-master/index.md)`, playableCreator: `[`PlayableCreator`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-playable-creator/index.md)`<PlayerView> = PlayerViewPlayableCreator.Builder(master.app) .setBridgeCreatorFactory(defaultBridgeCreatorFactory) .build(), rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })`<br>An [Engine](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-engine/index.md) that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension). |","title":"Constructors"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/#functions","text":"Name Summary onAdEvent fun onAdEvent(adEvent: AdEvent): Unit","title":"Functions"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/#companion-object-functions","text":"Name Summary get operator fun get(context: Context ): Manilo operator fun get(fragment: Fragment ): Manilo","title":"Companion Object Functions"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/-init-/","text":"kohii-ads / kohii.v1.ads / Manilo / <init> <init> \u00b6 Manilo(context: Context , playerPool: PlayerPool ` = ExoPlayerPool(context = context), mediaSourceFactoryProvider: MediaSourceFactoryProvider = with(context.applicationContext) { val userAgent = Common.getUserAgent(this, BuildConfig.LIB_NAME) val httpDataSourceFactory = DefaultHttpDataSourceFactory(userAgent) val mediaCache: Cache = ExoPlayerCache.lruCacheSingleton.get(this) val upstreamFactory = DefaultDataSourceFactory(this, httpDataSourceFactory) val drmSessionManagerProvider = DefaultDrmSessionManagerProvider(this, httpDataSourceFactory) DefaultMediaSourceFactoryProvider(upstreamFactory, drmSessionManagerProvider, mediaCache) }, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })` Creates a new instance of Manilo from a Context , a custom MediaSourceFactory and a custom ImaAdsLoader.Builder . Application can also use a custom PlayerPool for the Player and a custom MediaSourceFactoryProvider , but they are all optional. Manilo(context: Context , config: ExoPlayerConfig, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) Creates a new instance of Manilo from a Context , an ExoPlayerConfig , a custom MediaSourceFactory and a custom ImaAdsLoader.Builder . Manilo(context: Context , playerCreator: (( Context ) -> Player)? = null, mediaSourceFactoryCreator: (( Media ) -> MediaSourceFactory)? = null, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) Creates a new instance of Manilo from a Context , a custom way to create Player instance, a custom way to create MediaSourceFactory for the Media item, a custom MediaSourceFactory for the ad media and a custom ImaAdsLoader.Builder . Parameters \u00b6 playerCreator - Creates a new Player instance. Manilo(master: Master , playableCreator: PlayableCreator <PlayerView> = PlayerViewPlayableCreator.Builder(master.app) .setBridgeCreatorFactory(defaultBridgeCreatorFactory) .build(), rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension).","title":" init "},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/-init-/#init","text":"Manilo(context: Context , playerPool: PlayerPool ` = ExoPlayerPool(context = context), mediaSourceFactoryProvider: MediaSourceFactoryProvider = with(context.applicationContext) { val userAgent = Common.getUserAgent(this, BuildConfig.LIB_NAME) val httpDataSourceFactory = DefaultHttpDataSourceFactory(userAgent) val mediaCache: Cache = ExoPlayerCache.lruCacheSingleton.get(this) val upstreamFactory = DefaultDataSourceFactory(this, httpDataSourceFactory) val drmSessionManagerProvider = DefaultDrmSessionManagerProvider(this, httpDataSourceFactory) DefaultMediaSourceFactoryProvider(upstreamFactory, drmSessionManagerProvider, mediaCache) }, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: `[`RendererProviderFactory`](file:/Users/nam.nguyen/Documents/Playground/Android/Kohii/docs/api/kohii-core/kohii.v1.core/-renderer-provider-factory.md)` = { PlayerViewProvider() })` Creates a new instance of Manilo from a Context , a custom MediaSourceFactory and a custom ImaAdsLoader.Builder . Application can also use a custom PlayerPool for the Player and a custom MediaSourceFactoryProvider , but they are all optional. Manilo(context: Context , config: ExoPlayerConfig, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) Creates a new instance of Manilo from a Context , an ExoPlayerConfig , a custom MediaSourceFactory and a custom ImaAdsLoader.Builder . Manilo(context: Context , playerCreator: (( Context ) -> Player)? = null, mediaSourceFactoryCreator: (( Media ) -> MediaSourceFactory)? = null, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder?, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) Creates a new instance of Manilo from a Context , a custom way to create Player instance, a custom way to create MediaSourceFactory for the Media item, a custom MediaSourceFactory for the ad media and a custom ImaAdsLoader.Builder .","title":"&lt;init&gt;"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/-init-/#parameters","text":"playerCreator - Creates a new Player instance. Manilo(master: Master , playableCreator: PlayableCreator <PlayerView> = PlayerViewPlayableCreator.Builder(master.app) .setBridgeCreatorFactory(defaultBridgeCreatorFactory) .build(), rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) An Engine that employs the ExoPlayer API and supports Ads using the Google IMA SDK (via the ExoPlayer Ima extension).","title":"Parameters"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/get/","text":"kohii-ads / kohii.v1.ads / Manilo / get get \u00b6 operator fun get(context: Context ): Manilo operator fun get(fragment: Fragment ): Manilo","title":"Get"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/get/#get","text":"operator fun get(context: Context ): Manilo operator fun get(fragment: Fragment ): Manilo","title":"get"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/on-ad-event/","text":"kohii-ads / kohii.v1.ads / Manilo / onAdEvent onAdEvent \u00b6 fun onAdEvent(adEvent: AdEvent): Unit","title":"On ad event"},{"location":"api/kohii-ads/kohii.v1.ads/-manilo/on-ad-event/#onadevent","text":"fun onAdEvent(adEvent: AdEvent): Unit","title":"onAdEvent"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/","text":"kohii-ads / kohii.v1.ads.exoplayer Package kohii.v1.ads.exoplayer \u00b6 Types \u00b6 Name Summary ImaBridgeConfig class ImaBridgeConfig Configurations for a PlayerViewImaBridge . PlayerViewImaBridge class PlayerViewImaBridge : PlayerViewBridge, AdViewProvider A PlayerViewBridge that supports ad media using ImaAdsLoader . PlayerViewImaBridgeCreator class PlayerViewImaBridgeCreator : BridgeCreator <PlayerView> A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/#package-kohiiv1adsexoplayer","text":"","title":"Package kohii.v1.ads.exoplayer"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/#types","text":"Name Summary ImaBridgeConfig class ImaBridgeConfig Configurations for a PlayerViewImaBridge . PlayerViewImaBridge class PlayerViewImaBridge : PlayerViewBridge, AdViewProvider A PlayerViewBridge that supports ad media using ImaAdsLoader . PlayerViewImaBridgeCreator class PlayerViewImaBridgeCreator : BridgeCreator <PlayerView> A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"Types"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/","text":"kohii-ads / kohii.v1.ads.exoplayer / ImaBridgeConfig ImaBridgeConfig \u00b6 class ImaBridgeConfig Configurations for a PlayerViewImaBridge . Parameters \u00b6 adsLoader - The ImaAdsLoader to construct a PlayerViewImaBridge . adsMediaSourceFactory - The MediaSourceFactory to create the MediaSource for an Ad. Constructors \u00b6 Name Summary <init> ImaBridgeConfig(adsLoader: ImaAdsLoader, adsMediaSourceFactory: MediaSourceFactory) Configurations for a PlayerViewImaBridge . Properties \u00b6 Name Summary adsLoader val adsLoader: ImaAdsLoader The ImaAdsLoader to construct a PlayerViewImaBridge . adsMediaSourceFactory val adsMediaSourceFactory: MediaSourceFactory The MediaSourceFactory to create the MediaSource for an Ad.","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/#imabridgeconfig","text":"class ImaBridgeConfig Configurations for a PlayerViewImaBridge .","title":"ImaBridgeConfig"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/#parameters","text":"adsLoader - The ImaAdsLoader to construct a PlayerViewImaBridge . adsMediaSourceFactory - The MediaSourceFactory to create the MediaSource for an Ad.","title":"Parameters"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/#constructors","text":"Name Summary <init> ImaBridgeConfig(adsLoader: ImaAdsLoader, adsMediaSourceFactory: MediaSourceFactory) Configurations for a PlayerViewImaBridge .","title":"Constructors"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/#properties","text":"Name Summary adsLoader val adsLoader: ImaAdsLoader The ImaAdsLoader to construct a PlayerViewImaBridge . adsMediaSourceFactory val adsMediaSourceFactory: MediaSourceFactory The MediaSourceFactory to create the MediaSource for an Ad.","title":"Properties"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/-init-/","text":"kohii-ads / kohii.v1.ads.exoplayer / ImaBridgeConfig / <init> <init> \u00b6 ImaBridgeConfig(adsLoader: ImaAdsLoader, adsMediaSourceFactory: MediaSourceFactory) Configurations for a PlayerViewImaBridge . Parameters \u00b6 adsLoader - The ImaAdsLoader to construct a PlayerViewImaBridge . adsMediaSourceFactory - The MediaSourceFactory to create the MediaSource for an Ad.","title":" init "},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/-init-/#init","text":"ImaBridgeConfig(adsLoader: ImaAdsLoader, adsMediaSourceFactory: MediaSourceFactory) Configurations for a PlayerViewImaBridge .","title":"&lt;init&gt;"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/-init-/#parameters","text":"adsLoader - The ImaAdsLoader to construct a PlayerViewImaBridge . adsMediaSourceFactory - The MediaSourceFactory to create the MediaSource for an Ad.","title":"Parameters"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/ads-loader/","text":"kohii-ads / kohii.v1.ads.exoplayer / ImaBridgeConfig / adsLoader adsLoader \u00b6 val adsLoader: ImaAdsLoader The ImaAdsLoader to construct a PlayerViewImaBridge .","title":"Ads loader"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/ads-loader/#adsloader","text":"val adsLoader: ImaAdsLoader The ImaAdsLoader to construct a PlayerViewImaBridge .","title":"adsLoader"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/ads-media-source-factory/","text":"kohii-ads / kohii.v1.ads.exoplayer / ImaBridgeConfig / adsMediaSourceFactory adsMediaSourceFactory \u00b6 val adsMediaSourceFactory: MediaSourceFactory The MediaSourceFactory to create the MediaSource for an Ad.","title":"Ads media source factory"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-ima-bridge-config/ads-media-source-factory/#adsmediasourcefactory","text":"val adsMediaSourceFactory: MediaSourceFactory The MediaSourceFactory to create the MediaSource for an Ad.","title":"adsMediaSourceFactory"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge PlayerViewImaBridge \u00b6 class PlayerViewImaBridge : PlayerViewBridge, AdViewProvider A PlayerViewBridge that supports ad media using ImaAdsLoader . Constructors \u00b6 Name Summary <init> PlayerViewImaBridge(context: Context , media: AdMedia , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, imaBridgeConfig: ImaBridgeConfig ) A PlayerViewBridge that supports ad media using ImaAdsLoader . Properties \u00b6 Name Summary renderer var renderer: PlayerView? Functions \u00b6 Name Summary createMediaSource fun createMediaSource(): MediaSource getAdOverlayViews fun getAdOverlayViews(): Array < View > getAdViewGroup fun getAdViewGroup(): ViewGroup ready fun ready(): Unit release fun release(): Unit reset fun reset(resetPlayer: Boolean ): Unit","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/#playerviewimabridge","text":"class PlayerViewImaBridge : PlayerViewBridge, AdViewProvider A PlayerViewBridge that supports ad media using ImaAdsLoader .","title":"PlayerViewImaBridge"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/#constructors","text":"Name Summary <init> PlayerViewImaBridge(context: Context , media: AdMedia , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, imaBridgeConfig: ImaBridgeConfig ) A PlayerViewBridge that supports ad media using ImaAdsLoader .","title":"Constructors"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/#properties","text":"Name Summary renderer var renderer: PlayerView?","title":"Properties"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/#functions","text":"Name Summary createMediaSource fun createMediaSource(): MediaSource getAdOverlayViews fun getAdOverlayViews(): Array < View > getAdViewGroup fun getAdViewGroup(): ViewGroup ready fun ready(): Unit release fun release(): Unit reset fun reset(resetPlayer: Boolean ): Unit","title":"Functions"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/-init-/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / <init> <init> \u00b6 PlayerViewImaBridge(context: Context , media: AdMedia , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, imaBridgeConfig: ImaBridgeConfig ) A PlayerViewBridge that supports ad media using ImaAdsLoader .","title":" init "},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/-init-/#init","text":"PlayerViewImaBridge(context: Context , media: AdMedia , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, imaBridgeConfig: ImaBridgeConfig ) A PlayerViewBridge that supports ad media using ImaAdsLoader .","title":"&lt;init&gt;"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/create-media-source/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / createMediaSource createMediaSource \u00b6 protected fun createMediaSource(): MediaSource","title":"Create media source"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/create-media-source/#createmediasource","text":"protected fun createMediaSource(): MediaSource","title":"createMediaSource"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/get-ad-overlay-views/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / getAdOverlayViews getAdOverlayViews \u00b6 fun getAdOverlayViews(): Array < View >","title":"Get ad overlay views"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/get-ad-overlay-views/#getadoverlayviews","text":"fun getAdOverlayViews(): Array < View >","title":"getAdOverlayViews"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/get-ad-view-group/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / getAdViewGroup getAdViewGroup \u00b6 fun getAdViewGroup(): ViewGroup","title":"Get ad view group"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/get-ad-view-group/#getadviewgroup","text":"fun getAdViewGroup(): ViewGroup","title":"getAdViewGroup"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/ready/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / ready ready \u00b6 fun ready(): Unit","title":"Ready"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/ready/#ready","text":"fun ready(): Unit","title":"ready"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/release/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / release release \u00b6 fun release(): Unit","title":"Release"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/release/#release","text":"fun release(): Unit","title":"release"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/renderer/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / renderer renderer \u00b6 var renderer: PlayerView?","title":"Renderer"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/renderer/#renderer","text":"var renderer: PlayerView?","title":"renderer"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/reset/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridge / reset reset \u00b6 fun reset(resetPlayer: Boolean ): Unit","title":"Reset"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge/reset/#reset","text":"fun reset(resetPlayer: Boolean ): Unit","title":"reset"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridgeCreator PlayerViewImaBridgeCreator \u00b6 class PlayerViewImaBridgeCreator : BridgeCreator <PlayerView> A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise. Parameters \u00b6 playerPool - The PlayerPool for Player instances. mediaSourceFactoryProvider - The MediaSourceFactoryProvider for the video of the Media . adsMediaSourceFactory - The MediaSourceFactory to create MediaSource for the Ad. imaAdsLoaderBuilder - The ImaAdsLoader.Builder to create the ImaAdsLoader . When null, the library will use a default one. When the library uses a default builder, it also sets a default AdEventListener for debugging purpose. Applications that want to use their own listeners should provide their own Builders. Constructors \u00b6 Name Summary <init> PlayerViewImaBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder? = null) A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise. Functions \u00b6 Name Summary cleanUp fun cleanUp(): Unit createBridge fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"Index"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/#playerviewimabridgecreator","text":"class PlayerViewImaBridgeCreator : BridgeCreator <PlayerView> A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"PlayerViewImaBridgeCreator"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/#parameters","text":"playerPool - The PlayerPool for Player instances. mediaSourceFactoryProvider - The MediaSourceFactoryProvider for the video of the Media . adsMediaSourceFactory - The MediaSourceFactory to create MediaSource for the Ad. imaAdsLoaderBuilder - The ImaAdsLoader.Builder to create the ImaAdsLoader . When null, the library will use a default one. When the library uses a default builder, it also sets a default AdEventListener for debugging purpose. Applications that want to use their own listeners should provide their own Builders.","title":"Parameters"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/#constructors","text":"Name Summary <init> PlayerViewImaBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder? = null) A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"Constructors"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/#functions","text":"Name Summary cleanUp fun cleanUp(): Unit createBridge fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"Functions"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/-init-/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridgeCreator / <init> <init> \u00b6 PlayerViewImaBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder? = null) A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise. Parameters \u00b6 playerPool - The PlayerPool for Player instances. mediaSourceFactoryProvider - The MediaSourceFactoryProvider for the video of the Media . adsMediaSourceFactory - The MediaSourceFactory to create MediaSource for the Ad. imaAdsLoaderBuilder - The ImaAdsLoader.Builder to create the ImaAdsLoader . When null, the library will use a default one. When the library uses a default builder, it also sets a default AdEventListener for debugging purpose. Applications that want to use their own listeners should provide their own Builders.","title":" init "},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/-init-/#init","text":"PlayerViewImaBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider, adsMediaSourceFactory: MediaSourceFactory, imaAdsLoaderBuilder: Builder? = null) A BridgeCreator that creates instance of PlayerViewImaBridge if the Media contains an ad media Uri, or fallback to a PlayerViewBridge otherwise.","title":"&lt;init&gt;"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/-init-/#parameters","text":"playerPool - The PlayerPool for Player instances. mediaSourceFactoryProvider - The MediaSourceFactoryProvider for the video of the Media . adsMediaSourceFactory - The MediaSourceFactory to create MediaSource for the Ad. imaAdsLoaderBuilder - The ImaAdsLoader.Builder to create the ImaAdsLoader . When null, the library will use a default one. When the library uses a default builder, it also sets a default AdEventListener for debugging purpose. Applications that want to use their own listeners should provide their own Builders.","title":"Parameters"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/clean-up/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridgeCreator / cleanUp cleanUp \u00b6 fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/clean-up/#cleanup","text":"fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/create-bridge/","text":"kohii-ads / kohii.v1.ads.exoplayer / PlayerViewImaBridgeCreator / createBridge createBridge \u00b6 fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"Create bridge"},{"location":"api/kohii-ads/kohii.v1.ads.exoplayer/-player-view-ima-bridge-creator/create-bridge/#createbridge","text":"fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"createBridge"},{"location":"api/kohii-androidx/","text":"kohii-androidx Packages \u00b6 Name Summary kohii.v1.x Index \u00b6 All Types","title":"kohii-androidx"},{"location":"api/kohii-androidx/#packages","text":"Name Summary kohii.v1.x","title":"Packages"},{"location":"api/kohii-androidx/#index","text":"All Types","title":"Index"},{"location":"api/kohii-androidx/alltypes/","text":"All Types \u00b6 Name Summary kohii.v1.x.Latte Latte is an Engine for VideoView kohii.v1.x.MediaPlayerPool A PlayerPool for the MediaPlayer . kohii.v1.x.VideoViewBridge kohii.v1.core.Bridge for VideoView kohii.v1.x.VideoViewPlayableCreator Default implementation of PlayableCreator that supports VideoView","title":"Index"},{"location":"api/kohii-androidx/alltypes/#all-types","text":"Name Summary kohii.v1.x.Latte Latte is an Engine for VideoView kohii.v1.x.MediaPlayerPool A PlayerPool for the MediaPlayer . kohii.v1.x.VideoViewBridge kohii.v1.core.Bridge for VideoView kohii.v1.x.VideoViewPlayableCreator Default implementation of PlayableCreator that supports VideoView","title":"All Types"},{"location":"api/kohii-androidx/kohii.v1.x/","text":"kohii-androidx / kohii.v1.x Package kohii.v1.x \u00b6 Types \u00b6 Name Summary Latte class Latte : Engine < VideoView > Latte is an Engine for VideoView MediaPlayerPool open class MediaPlayerPool : PlayerPool < MediaPlayer > A PlayerPool for the MediaPlayer . VideoViewBridge class VideoViewBridge : AbstractBridge < VideoView > kohii.v1.core.Bridge for VideoView VideoViewPlayableCreator class VideoViewPlayableCreator : PlayableCreator < VideoView > Default implementation of PlayableCreator that supports VideoView","title":"Index"},{"location":"api/kohii-androidx/kohii.v1.x/#package-kohiiv1x","text":"","title":"Package kohii.v1.x"},{"location":"api/kohii-androidx/kohii.v1.x/#types","text":"Name Summary Latte class Latte : Engine < VideoView > Latte is an Engine for VideoView MediaPlayerPool open class MediaPlayerPool : PlayerPool < MediaPlayer > A PlayerPool for the MediaPlayer . VideoViewBridge class VideoViewBridge : AbstractBridge < VideoView > kohii.v1.core.Bridge for VideoView VideoViewPlayableCreator class VideoViewPlayableCreator : PlayableCreator < VideoView > Default implementation of PlayableCreator that supports VideoView","title":"Types"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/","text":"kohii-androidx / kohii.v1.x / Latte Latte \u00b6 class Latte : Engine < VideoView > Latte is an Engine for VideoView Types \u00b6 Name Summary Builder class Builder Functions \u00b6 Name Summary prepare fun prepare(manager: Manager ): Unit Companion Object Functions \u00b6 Name Summary get operator fun get(context: Context ): Latte operator fun get(fragment: Fragment ): Latte","title":"Index"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/#latte","text":"class Latte : Engine < VideoView > Latte is an Engine for VideoView","title":"Latte"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/#functions","text":"Name Summary prepare fun prepare(manager: Manager ): Unit","title":"Functions"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/#companion-object-functions","text":"Name Summary get operator fun get(context: Context ): Latte operator fun get(fragment: Fragment ): Latte","title":"Companion Object Functions"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/get/","text":"kohii-androidx / kohii.v1.x / Latte / get get \u00b6 @JvmStatic operator fun get(context: Context ): Latte @JvmStatic operator fun get(fragment: Fragment ): Latte","title":"Get"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/get/#get","text":"@JvmStatic operator fun get(context: Context ): Latte @JvmStatic operator fun get(fragment: Fragment ): Latte","title":"get"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/prepare/","text":"kohii-androidx / kohii.v1.x / Latte / prepare prepare \u00b6 fun prepare(manager: Manager ): Unit","title":"Prepare"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/prepare/#prepare","text":"fun prepare(manager: Manager ): Unit","title":"prepare"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/","text":"kohii-androidx / kohii.v1.x / Latte / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(context: Context ) Functions \u00b6 Name Summary build fun build(): Latte setPlayableCreator fun setPlayableCreator(playableCreator: PlayableCreator < VideoView >): Latte.Builder setRendererProviderFactory fun setRendererProviderFactory(factory: RendererProviderFactory ): Latte.Builder","title":"Index"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/#constructors","text":"Name Summary <init> Builder(context: Context )","title":"Constructors"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/#functions","text":"Name Summary build fun build(): Latte setPlayableCreator fun setPlayableCreator(playableCreator: PlayableCreator < VideoView >): Latte.Builder setRendererProviderFactory fun setRendererProviderFactory(factory: RendererProviderFactory ): Latte.Builder","title":"Functions"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/-init-/","text":"kohii-androidx / kohii.v1.x / Latte / Builder / <init> <init> \u00b6 Builder(context: Context )","title":" init "},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/-init-/#init","text":"Builder(context: Context )","title":"&lt;init&gt;"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/build/","text":"kohii-androidx / kohii.v1.x / Latte / Builder / build build \u00b6 fun build(): Latte","title":"Build"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/build/#build","text":"fun build(): Latte","title":"build"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/set-playable-creator/","text":"kohii-androidx / kohii.v1.x / Latte / Builder / setPlayableCreator setPlayableCreator \u00b6 fun setPlayableCreator(playableCreator: PlayableCreator < VideoView >): Latte.Builder","title":"Set playable creator"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/set-playable-creator/#setplayablecreator","text":"fun setPlayableCreator(playableCreator: PlayableCreator < VideoView >): Latte.Builder","title":"setPlayableCreator"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/set-renderer-provider-factory/","text":"kohii-androidx / kohii.v1.x / Latte / Builder / setRendererProviderFactory setRendererProviderFactory \u00b6 fun setRendererProviderFactory(factory: RendererProviderFactory ): Latte.Builder","title":"Set renderer provider factory"},{"location":"api/kohii-androidx/kohii.v1.x/-latte/-builder/set-renderer-provider-factory/#setrendererproviderfactory","text":"fun setRendererProviderFactory(factory: RendererProviderFactory ): Latte.Builder","title":"setRendererProviderFactory"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/","text":"kohii-androidx / kohii.v1.x / MediaPlayerPool MediaPlayerPool \u00b6 open class MediaPlayerPool : PlayerPool < MediaPlayer > A PlayerPool for the MediaPlayer . Constructors \u00b6 Name Summary <init> MediaPlayerPool(context: Context ) A PlayerPool for the MediaPlayer . Functions \u00b6 Name Summary createPlayer open fun createPlayer(media: Media ): MediaPlayer destroyPlayer open fun destroyPlayer(player: MediaPlayer ): Unit recyclePlayerForMedia open fun recyclePlayerForMedia(media: Media ): Boolean resetPlayer open fun resetPlayer(player: MediaPlayer ): Unit","title":"Index"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/#mediaplayerpool","text":"open class MediaPlayerPool : PlayerPool < MediaPlayer > A PlayerPool for the MediaPlayer .","title":"MediaPlayerPool"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/#constructors","text":"Name Summary <init> MediaPlayerPool(context: Context ) A PlayerPool for the MediaPlayer .","title":"Constructors"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/#functions","text":"Name Summary createPlayer open fun createPlayer(media: Media ): MediaPlayer destroyPlayer open fun destroyPlayer(player: MediaPlayer ): Unit recyclePlayerForMedia open fun recyclePlayerForMedia(media: Media ): Boolean resetPlayer open fun resetPlayer(player: MediaPlayer ): Unit","title":"Functions"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/-init-/","text":"kohii-androidx / kohii.v1.x / MediaPlayerPool / <init> <init> \u00b6 MediaPlayerPool(context: Context ) A PlayerPool for the MediaPlayer .","title":" init "},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/-init-/#init","text":"MediaPlayerPool(context: Context ) A PlayerPool for the MediaPlayer .","title":"&lt;init&gt;"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/create-player/","text":"kohii-androidx / kohii.v1.x / MediaPlayerPool / createPlayer createPlayer \u00b6 open fun createPlayer(media: Media ): MediaPlayer","title":"Create player"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/create-player/#createplayer","text":"open fun createPlayer(media: Media ): MediaPlayer","title":"createPlayer"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/destroy-player/","text":"kohii-androidx / kohii.v1.x / MediaPlayerPool / destroyPlayer destroyPlayer \u00b6 open fun destroyPlayer(player: MediaPlayer ): Unit","title":"Destroy player"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/destroy-player/#destroyplayer","text":"open fun destroyPlayer(player: MediaPlayer ): Unit","title":"destroyPlayer"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/recycle-player-for-media/","text":"kohii-androidx / kohii.v1.x / MediaPlayerPool / recyclePlayerForMedia recyclePlayerForMedia \u00b6 protected open fun recyclePlayerForMedia(media: Media ): Boolean","title":"Recycle player for media"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/recycle-player-for-media/#recycleplayerformedia","text":"protected open fun recyclePlayerForMedia(media: Media ): Boolean","title":"recyclePlayerForMedia"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/reset-player/","text":"kohii-androidx / kohii.v1.x / MediaPlayerPool / resetPlayer resetPlayer \u00b6 open fun resetPlayer(player: MediaPlayer ): Unit","title":"Reset player"},{"location":"api/kohii-androidx/kohii.v1.x/-media-player-pool/reset-player/#resetplayer","text":"open fun resetPlayer(player: MediaPlayer ): Unit","title":"resetPlayer"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge VideoViewBridge \u00b6 class VideoViewBridge : AbstractBridge < VideoView > kohii.v1.core.Bridge for VideoView Constructors \u00b6 Name Summary <init> VideoViewBridge(media: Media , playerPool: PlayerPool < MediaPlayer >) kohii.v1.core.Bridge for VideoView Properties \u00b6 Name Summary playbackInfo var playbackInfo: PlaybackInfo playerParameters var playerParameters: PlayerParameters playerState val playerState: Int renderer var renderer: VideoView ? repeatMode var repeatMode: Int volumeInfo var volumeInfo: VolumeInfo Functions \u00b6 Name Summary isPlaying fun isPlaying(): Boolean pause fun pause(): Unit play fun play(): Unit prepare fun prepare(loadSource: Boolean ): Unit ready fun ready(): Unit release fun release(): Unit reset fun reset(resetPlayer: Boolean ): Unit seekTo fun seekTo(positionMs: Long ): Unit","title":"Index"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/#videoviewbridge","text":"class VideoViewBridge : AbstractBridge < VideoView > kohii.v1.core.Bridge for VideoView","title":"VideoViewBridge"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/#constructors","text":"Name Summary <init> VideoViewBridge(media: Media , playerPool: PlayerPool < MediaPlayer >) kohii.v1.core.Bridge for VideoView","title":"Constructors"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/#properties","text":"Name Summary playbackInfo var playbackInfo: PlaybackInfo playerParameters var playerParameters: PlayerParameters playerState val playerState: Int renderer var renderer: VideoView ? repeatMode var repeatMode: Int volumeInfo var volumeInfo: VolumeInfo","title":"Properties"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/#functions","text":"Name Summary isPlaying fun isPlaying(): Boolean pause fun pause(): Unit play fun play(): Unit prepare fun prepare(loadSource: Boolean ): Unit ready fun ready(): Unit release fun release(): Unit reset fun reset(resetPlayer: Boolean ): Unit seekTo fun seekTo(positionMs: Long ): Unit","title":"Functions"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/-init-/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / <init> <init> \u00b6 VideoViewBridge(media: Media , playerPool: PlayerPool < MediaPlayer >) kohii.v1.core.Bridge for VideoView","title":" init "},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/-init-/#init","text":"VideoViewBridge(media: Media , playerPool: PlayerPool < MediaPlayer >) kohii.v1.core.Bridge for VideoView","title":"&lt;init&gt;"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/is-playing/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / isPlaying isPlaying \u00b6 fun isPlaying(): Boolean","title":"Is playing"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/is-playing/#isplaying","text":"fun isPlaying(): Boolean","title":"isPlaying"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/pause/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / pause pause \u00b6 fun pause(): Unit","title":"Pause"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/pause/#pause","text":"fun pause(): Unit","title":"pause"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/play/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / play play \u00b6 fun play(): Unit","title":"Play"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/play/#play","text":"fun play(): Unit","title":"play"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/playback-info/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / playbackInfo playbackInfo \u00b6 var playbackInfo: PlaybackInfo","title":"Playback info"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/playback-info/#playbackinfo","text":"var playbackInfo: PlaybackInfo","title":"playbackInfo"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/player-parameters/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / playerParameters playerParameters \u00b6 var playerParameters: PlayerParameters","title":"Player parameters"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/player-parameters/#playerparameters","text":"var playerParameters: PlayerParameters","title":"playerParameters"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/player-state/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / playerState playerState \u00b6 val playerState: Int","title":"Player state"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/player-state/#playerstate","text":"val playerState: Int","title":"playerState"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/prepare/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / prepare prepare \u00b6 fun prepare(loadSource: Boolean ): Unit","title":"Prepare"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/prepare/#prepare","text":"fun prepare(loadSource: Boolean ): Unit","title":"prepare"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/ready/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / ready ready \u00b6 fun ready(): Unit","title":"Ready"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/ready/#ready","text":"fun ready(): Unit","title":"ready"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/release/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / release release \u00b6 fun release(): Unit","title":"Release"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/release/#release","text":"fun release(): Unit","title":"release"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/renderer/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / renderer renderer \u00b6 var renderer: VideoView ?","title":"Renderer"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/renderer/#renderer","text":"var renderer: VideoView ?","title":"renderer"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/repeat-mode/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / repeatMode repeatMode \u00b6 var repeatMode: Int","title":"Repeat mode"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/repeat-mode/#repeatmode","text":"var repeatMode: Int","title":"repeatMode"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/reset/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / reset reset \u00b6 fun reset(resetPlayer: Boolean ): Unit","title":"Reset"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/reset/#reset","text":"fun reset(resetPlayer: Boolean ): Unit","title":"reset"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/seek-to/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / seekTo seekTo \u00b6 fun seekTo(positionMs: Long ): Unit","title":"Seek to"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/seek-to/#seekto","text":"fun seekTo(positionMs: Long ): Unit","title":"seekTo"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/volume-info/","text":"kohii-androidx / kohii.v1.x / VideoViewBridge / volumeInfo volumeInfo \u00b6 var volumeInfo: VolumeInfo","title":"Volume info"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-bridge/volume-info/#volumeinfo","text":"var volumeInfo: VolumeInfo","title":"volumeInfo"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/","text":"kohii-androidx / kohii.v1.x / VideoViewPlayableCreator VideoViewPlayableCreator \u00b6 class VideoViewPlayableCreator : PlayableCreator < VideoView > Default implementation of PlayableCreator that supports VideoView Constructors \u00b6 Name Summary <init> VideoViewPlayableCreator(master: Master , playerPool: PlayerPool < MediaPlayer > = MediaPlayerPool(master.app)) Default implementation of PlayableCreator that supports VideoView Functions \u00b6 Name Summary cleanUp fun cleanUp(): Unit createPlayable fun createPlayable(config: Config , media: Media ): Playable","title":"Index"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/#videoviewplayablecreator","text":"class VideoViewPlayableCreator : PlayableCreator < VideoView > Default implementation of PlayableCreator that supports VideoView","title":"VideoViewPlayableCreator"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/#constructors","text":"Name Summary <init> VideoViewPlayableCreator(master: Master , playerPool: PlayerPool < MediaPlayer > = MediaPlayerPool(master.app)) Default implementation of PlayableCreator that supports VideoView","title":"Constructors"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/#functions","text":"Name Summary cleanUp fun cleanUp(): Unit createPlayable fun createPlayable(config: Config , media: Media ): Playable","title":"Functions"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/-init-/","text":"kohii-androidx / kohii.v1.x / VideoViewPlayableCreator / <init> <init> \u00b6 VideoViewPlayableCreator(master: Master , playerPool: PlayerPool < MediaPlayer > = MediaPlayerPool(master.app)) Default implementation of PlayableCreator that supports VideoView","title":" init "},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/-init-/#init","text":"VideoViewPlayableCreator(master: Master , playerPool: PlayerPool < MediaPlayer > = MediaPlayerPool(master.app)) Default implementation of PlayableCreator that supports VideoView","title":"&lt;init&gt;"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/clean-up/","text":"kohii-androidx / kohii.v1.x / VideoViewPlayableCreator / cleanUp cleanUp \u00b6 fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/clean-up/#cleanup","text":"fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/create-playable/","text":"kohii-androidx / kohii.v1.x / VideoViewPlayableCreator / createPlayable createPlayable \u00b6 fun createPlayable(config: Config , media: Media ): Playable","title":"Create playable"},{"location":"api/kohii-androidx/kohii.v1.x/-video-view-playable-creator/create-playable/#createplayable","text":"fun createPlayable(config: Config , media: Media ): Playable","title":"createPlayable"},{"location":"api/kohii-core/","text":"kohii-core Packages \u00b6 Name Summary kohii.v1 kohii.v1.core kohii.v1.media kohii.v1.utils Index \u00b6 All Types","title":"kohii-core"},{"location":"api/kohii-core/#packages","text":"Name Summary kohii.v1 kohii.v1.core kohii.v1.media kohii.v1.utils","title":"Packages"},{"location":"api/kohii-core/#index","text":"All Types","title":"Index"},{"location":"api/kohii-core/alltypes/","text":"All Types \u00b6 Name Summary kohii.v1.core.AbstractBridge kohii.v1.core.AbstractPlayable kohii.v1.Beta kohii.v1.core.Binder kohii.v1.core.Bridge kohii.v1.core.BridgeCreator kohii.v1.core.Bucket kohii.v1.utils.Capsule Singleton Holder kohii.v1.core.Common kohii.v1.core.DefaultTrackSelectorHolder kohii.v1.Draft kohii.v1.core.Engine kohii.v1.core.ErrorListener kohii.v1.core.ErrorListeners kohii.v1.Experiment kohii.v1.core.Group kohii.v1.core.Manager Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. kohii.v1.core.Master kohii.v1.media.Media kohii.v1.media.MediaDrm Note: implementation of this interface must comparable using all 4 values, no more, no less. kohii.v1.media.MediaItem kohii.v1.core.MemoryMode kohii.v1.core.NetworkType Refer to values of com.google.android.exoplayer2.C.NetworkType kohii.v1.core.Playable A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . kohii.v1.core.PlayableContainer kohii.v1.core.PlayableCreator kohii.v1.core.PlayableManager kohii.v1.core.PlayableObserver An observer to allow client to know when the Playable (defined by its tag)'s Playback is changed. Client can use the Manager.observe method to register an observer. kohii.v1.core.Playback Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. kohii.v1.media.PlaybackInfo kohii.v1.core.PlayerEventListener kohii.v1.core.PlayerEventListeners kohii.v1.core.PlayerParameters kohii.v1.core.PlayerPool Definition of a pool to provide PLAYER instance for the consumer. androidx.core.util.Pools.Pool (extensions in package kohii.v1) kohii.v1.core.Prioritized kohii.v1.core.Rebinder kohii.v1.core.RecycledRendererProvider kohii.v1.core.RendererProvider A pool to cache the renderer for the Playback. kohii.v1.core.RendererProviderFactory kohii.v1.core.Scope kohii.v1.core.Selector kohii.v1.Stable kohii.v1.core.Strategy kotlin.String (extensions in package kohii.v1) android.view.View (extensions in package kohii.v1) kohii.v1.core.ViewRendererProvider kohii.v1.core.VolumeChangedListener kohii.v1.core.VolumeChangedListeners kohii.v1.media.VolumeInfo kohii.v1.core.VolumeInfoController","title":"Index"},{"location":"api/kohii-core/alltypes/#all-types","text":"Name Summary kohii.v1.core.AbstractBridge kohii.v1.core.AbstractPlayable kohii.v1.Beta kohii.v1.core.Binder kohii.v1.core.Bridge kohii.v1.core.BridgeCreator kohii.v1.core.Bucket kohii.v1.utils.Capsule Singleton Holder kohii.v1.core.Common kohii.v1.core.DefaultTrackSelectorHolder kohii.v1.Draft kohii.v1.core.Engine kohii.v1.core.ErrorListener kohii.v1.core.ErrorListeners kohii.v1.Experiment kohii.v1.core.Group kohii.v1.core.Manager Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. kohii.v1.core.Master kohii.v1.media.Media kohii.v1.media.MediaDrm Note: implementation of this interface must comparable using all 4 values, no more, no less. kohii.v1.media.MediaItem kohii.v1.core.MemoryMode kohii.v1.core.NetworkType Refer to values of com.google.android.exoplayer2.C.NetworkType kohii.v1.core.Playable A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . kohii.v1.core.PlayableContainer kohii.v1.core.PlayableCreator kohii.v1.core.PlayableManager kohii.v1.core.PlayableObserver An observer to allow client to know when the Playable (defined by its tag)'s Playback is changed. Client can use the Manager.observe method to register an observer. kohii.v1.core.Playback Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. kohii.v1.media.PlaybackInfo kohii.v1.core.PlayerEventListener kohii.v1.core.PlayerEventListeners kohii.v1.core.PlayerParameters kohii.v1.core.PlayerPool Definition of a pool to provide PLAYER instance for the consumer. androidx.core.util.Pools.Pool (extensions in package kohii.v1) kohii.v1.core.Prioritized kohii.v1.core.Rebinder kohii.v1.core.RecycledRendererProvider kohii.v1.core.RendererProvider A pool to cache the renderer for the Playback. kohii.v1.core.RendererProviderFactory kohii.v1.core.Scope kohii.v1.core.Selector kohii.v1.Stable kohii.v1.core.Strategy kotlin.String (extensions in package kohii.v1) android.view.View (extensions in package kohii.v1) kohii.v1.core.ViewRendererProvider kohii.v1.core.VolumeChangedListener kohii.v1.core.VolumeChangedListeners kohii.v1.media.VolumeInfo kohii.v1.core.VolumeInfoController","title":"All Types"},{"location":"api/kohii-core/kohii.v1/","text":"kohii-core / kohii.v1 Package kohii.v1 \u00b6 Annotations \u00b6 Name Summary Beta annotation class Beta Draft annotation class Draft Experiment annotation class Experiment Stable annotation class Stable Extensions for External Classes \u00b6 Name Summary android.view.View androidx.core.util.Pools.Pool kotlin.String","title":"Index"},{"location":"api/kohii-core/kohii.v1/#package-kohiiv1","text":"","title":"Package kohii.v1"},{"location":"api/kohii-core/kohii.v1/#annotations","text":"Name Summary Beta annotation class Beta Draft annotation class Draft Experiment annotation class Experiment Stable annotation class Stable","title":"Annotations"},{"location":"api/kohii-core/kohii.v1/#extensions-for-external-classes","text":"Name Summary android.view.View androidx.core.util.Pools.Pool kotlin.String","title":"Extensions for External Classes"},{"location":"api/kohii-core/kohii.v1/-beta/","text":"kohii-core / kohii.v1 / Beta Beta \u00b6 annotation class Beta Constructors \u00b6 Name Summary <init> Beta(message: String = \"\") Properties \u00b6 Name Summary message val message: String","title":"Index"},{"location":"api/kohii-core/kohii.v1/-beta/#beta","text":"annotation class Beta","title":"Beta"},{"location":"api/kohii-core/kohii.v1/-beta/#constructors","text":"Name Summary <init> Beta(message: String = \"\")","title":"Constructors"},{"location":"api/kohii-core/kohii.v1/-beta/#properties","text":"Name Summary message val message: String","title":"Properties"},{"location":"api/kohii-core/kohii.v1/-beta/-init-/","text":"kohii-core / kohii.v1 / Beta / <init> <init> \u00b6 Beta(message: String = \"\")","title":" init "},{"location":"api/kohii-core/kohii.v1/-beta/-init-/#init","text":"Beta(message: String = \"\")","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1/-beta/message/","text":"kohii-core / kohii.v1 / Beta / message message \u00b6 val message: String","title":"Message"},{"location":"api/kohii-core/kohii.v1/-beta/message/#message","text":"val message: String","title":"message"},{"location":"api/kohii-core/kohii.v1/-draft/","text":"kohii-core / kohii.v1 / Draft Draft \u00b6 annotation class Draft Author eneim (2018/07/30). Constructors \u00b6 Name Summary <init> Draft(message: String = \"\") Properties \u00b6 Name Summary message val message: String","title":"Index"},{"location":"api/kohii-core/kohii.v1/-draft/#draft","text":"annotation class Draft Author eneim (2018/07/30).","title":"Draft"},{"location":"api/kohii-core/kohii.v1/-draft/#constructors","text":"Name Summary <init> Draft(message: String = \"\")","title":"Constructors"},{"location":"api/kohii-core/kohii.v1/-draft/#properties","text":"Name Summary message val message: String","title":"Properties"},{"location":"api/kohii-core/kohii.v1/-draft/-init-/","text":"kohii-core / kohii.v1 / Draft / <init> <init> \u00b6 Draft(message: String = \"\") Author eneim (2018/07/30).","title":" init "},{"location":"api/kohii-core/kohii.v1/-draft/-init-/#init","text":"Draft(message: String = \"\") Author eneim (2018/07/30).","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1/-draft/message/","text":"kohii-core / kohii.v1 / Draft / message message \u00b6 val message: String","title":"Message"},{"location":"api/kohii-core/kohii.v1/-draft/message/#message","text":"val message: String","title":"message"},{"location":"api/kohii-core/kohii.v1/-experiment/","text":"kohii-core / kohii.v1 / Experiment Experiment \u00b6 annotation class Experiment Constructors \u00b6 Name Summary <init> Experiment()","title":"Index"},{"location":"api/kohii-core/kohii.v1/-experiment/#experiment","text":"annotation class Experiment","title":"Experiment"},{"location":"api/kohii-core/kohii.v1/-experiment/#constructors","text":"Name Summary <init> Experiment()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1/-experiment/-init-/","text":"kohii-core / kohii.v1 / Experiment / <init> <init> \u00b6 Experiment()","title":" init "},{"location":"api/kohii-core/kohii.v1/-experiment/-init-/#init","text":"Experiment()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1/-stable/","text":"kohii-core / kohii.v1 / Stable Stable \u00b6 annotation class Stable Constructors \u00b6 Name Summary <init> Stable()","title":"Index"},{"location":"api/kohii-core/kohii.v1/-stable/#stable","text":"annotation class Stable","title":"Stable"},{"location":"api/kohii-core/kohii.v1/-stable/#constructors","text":"Name Summary <init> Stable()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1/-stable/-init-/","text":"kohii-core / kohii.v1 / Stable / <init> <init> \u00b6 Stable()","title":" init "},{"location":"api/kohii-core/kohii.v1/-stable/-init-/#init","text":"Stable()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1/android.view.-view/","text":"kohii-core / kohii.v1 / android.view.View Extensions for android.view.View \u00b6 Name Summary viewBehavior fun View .viewBehavior(): Behavior <*>? Utility to help client to quickly fetch the original Behavior of a View if available","title":"Index"},{"location":"api/kohii-core/kohii.v1/android.view.-view/#extensions-for-androidviewview","text":"Name Summary viewBehavior fun View .viewBehavior(): Behavior <*>? Utility to help client to quickly fetch the original Behavior of a View if available","title":"Extensions for android.view.View"},{"location":"api/kohii-core/kohii.v1/android.view.-view/view-behavior/","text":"kohii-core / kohii.v1 / android.view.View / viewBehavior viewBehavior \u00b6 fun View .viewBehavior(): Behavior <*>? Utility to help client to quickly fetch the original Behavior of a View if available","title":"View behavior"},{"location":"api/kohii-core/kohii.v1/android.view.-view/view-behavior/#viewbehavior","text":"fun View .viewBehavior(): Behavior <*>? Utility to help client to quickly fetch the original Behavior of a View if available","title":"viewBehavior"},{"location":"api/kohii-core/kohii.v1/androidx.core.util.-pools.-pool/","text":"kohii-core / kohii.v1 / androidx.core.util.Pools.Pool Extensions for androidx.core.util.Pools.Pool \u00b6 Name Summary onEachAcquired fun <T> Pool < T >.onEachAcquired(action: ( T ) -> Unit ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1/androidx.core.util.-pools.-pool/#extensions-for-androidxcoreutilpoolspool","text":"Name Summary onEachAcquired fun <T> Pool < T >.onEachAcquired(action: ( T ) -> Unit ): Unit","title":"Extensions for androidx.core.util.Pools.Pool"},{"location":"api/kohii-core/kohii.v1/androidx.core.util.-pools.-pool/on-each-acquired/","text":"kohii-core / kohii.v1 / androidx.core.util.Pools.Pool / onEachAcquired onEachAcquired \u00b6 inline fun <T> Pool < T >.onEachAcquired(action: ( T ) -> Unit ): Unit Author eneim (2018/10/27).","title":"On each acquired"},{"location":"api/kohii-core/kohii.v1/androidx.core.util.-pools.-pool/on-each-acquired/#oneachacquired","text":"inline fun <T> Pool < T >.onEachAcquired(action: ( T ) -> Unit ): Unit Author eneim (2018/10/27).","title":"onEachAcquired"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/","text":"kohii-core / kohii.v1 / kotlin.String Extensions for kotlin.String \u00b6 Name Summary logDebug fun String .logDebug(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit logError fun String .logError(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit logInfo fun String .logInfo(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit logWarn fun String .logWarn(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary logDebug fun String .logDebug(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit logError fun String .logError(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit logInfo fun String .logInfo(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit logWarn fun String .logWarn(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"Extensions for kotlin.String"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-debug/","text":"kohii-core / kohii.v1 / kotlin.String / logDebug logDebug \u00b6 fun String .logDebug(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"Log debug"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-debug/#logdebug","text":"fun String .logDebug(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"logDebug"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-error/","text":"kohii-core / kohii.v1 / kotlin.String / logError logError \u00b6 fun String .logError(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"Log error"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-error/#logerror","text":"fun String .logError(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"logError"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-info/","text":"kohii-core / kohii.v1 / kotlin.String / logInfo logInfo \u00b6 fun String .logInfo(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"Log info"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-info/#loginfo","text":"fun String .logInfo(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"logInfo"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-warn/","text":"kohii-core / kohii.v1 / kotlin.String / logWarn logWarn \u00b6 fun String .logWarn(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"Log warn"},{"location":"api/kohii-core/kohii.v1/kotlin.-string/log-warn/#logwarn","text":"fun String .logWarn(tag: String = \"${BuildConfig.LIBRARY_PACKAGE_NAME}.log\"): Unit","title":"logWarn"},{"location":"api/kohii-core/kohii.v1.core/","text":"kohii-core / kohii.v1.core Package kohii.v1.core \u00b6 Types \u00b6 Name Summary AbstractBridge abstract class AbstractBridge<RENDERER : Any > : Bridge < RENDERER > AbstractPlayable abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener Binder class Binder Bridge interface Bridge<RENDERER : Any > BridgeCreator interface BridgeCreator<RENDERER : Any > Bucket abstract class Bucket : OnLayoutChangeListener Common object Common DefaultTrackSelectorHolder interface DefaultTrackSelectorHolder Engine abstract class Engine<RENDERER : Any > ErrorListener interface ErrorListener ErrorListeners class ErrorListeners : CopyOnWriteArraySet < ErrorListener >, ErrorListener Group class Group : DefaultLifecycleObserver , LifecycleEventObserver , Callback Manager class Manager : PlayableManager , DefaultLifecycleObserver , LifecycleEventObserver , Comparable < Manager > Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. Master class Master : PlayableManager MemoryMode enum class MemoryMode Playable abstract class Playable A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . PlayableContainer interface PlayableContainer PlayableCreator abstract class PlayableCreator<RENDERER : Any > PlayableManager interface PlayableManager Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. PlayerEventListener interface PlayerEventListener : EventListener, VideoListener, AudioListener, TextOutput, MetadataOutput PlayerEventListeners class PlayerEventListeners : CopyOnWriteArraySet < PlayerEventListener >, PlayerEventListener PlayerParameters data class PlayerParameters PlayerPool abstract class PlayerPool<PLAYER> Definition of a pool to provide PLAYER instance for the consumer. Prioritized interface Prioritized : Comparable < Prioritized > Rebinder data class Rebinder : Parcelable RecycledRendererProvider abstract class RecycledRendererProvider : RendererProvider RendererProvider interface RendererProvider : DefaultLifecycleObserver A pool to cache the renderer for the Playback. Scope enum class Scope Strategy sealed class Strategy : Selector ViewRendererProvider abstract class ViewRendererProvider : RecycledRendererProvider VolumeChangedListener interface VolumeChangedListener VolumeChangedListeners class VolumeChangedListeners : CopyOnWriteArraySet < VolumeChangedListener >, VolumeChangedListener VolumeInfoController interface VolumeInfoController Type Aliases \u00b6 Name Summary NetworkType typealias NetworkType = Int Refer to values of com.google.android.exoplayer2.C.NetworkType PlayableObserver typealias PlayableObserver = ( Any , Playback ?, Playback ?) -> Unit An observer to allow client to know when the Playable (defined by its tag)'s Playback is changed. Client can use the Manager.observe method to register an observer. RendererProviderFactory typealias RendererProviderFactory = () -> RendererProvider Selector typealias Selector = ( Collection < Playback >) -> Collection < Playback > Functions \u00b6 Name Summary controller fun controller(kohiiCanStart: Boolean = true, kohiiCanPause: Boolean = true, setupRenderer: (playback: Playback , renderer: Any ?) -> Unit ): Playback.Controller Quickly setup the Controller that only needs to setup the renderer.","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/#package-kohiiv1core","text":"","title":"Package kohii.v1.core"},{"location":"api/kohii-core/kohii.v1.core/#types","text":"Name Summary AbstractBridge abstract class AbstractBridge<RENDERER : Any > : Bridge < RENDERER > AbstractPlayable abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener Binder class Binder Bridge interface Bridge<RENDERER : Any > BridgeCreator interface BridgeCreator<RENDERER : Any > Bucket abstract class Bucket : OnLayoutChangeListener Common object Common DefaultTrackSelectorHolder interface DefaultTrackSelectorHolder Engine abstract class Engine<RENDERER : Any > ErrorListener interface ErrorListener ErrorListeners class ErrorListeners : CopyOnWriteArraySet < ErrorListener >, ErrorListener Group class Group : DefaultLifecycleObserver , LifecycleEventObserver , Callback Manager class Manager : PlayableManager , DefaultLifecycleObserver , LifecycleEventObserver , Comparable < Manager > Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. Master class Master : PlayableManager MemoryMode enum class MemoryMode Playable abstract class Playable A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . PlayableContainer interface PlayableContainer PlayableCreator abstract class PlayableCreator<RENDERER : Any > PlayableManager interface PlayableManager Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. PlayerEventListener interface PlayerEventListener : EventListener, VideoListener, AudioListener, TextOutput, MetadataOutput PlayerEventListeners class PlayerEventListeners : CopyOnWriteArraySet < PlayerEventListener >, PlayerEventListener PlayerParameters data class PlayerParameters PlayerPool abstract class PlayerPool<PLAYER> Definition of a pool to provide PLAYER instance for the consumer. Prioritized interface Prioritized : Comparable < Prioritized > Rebinder data class Rebinder : Parcelable RecycledRendererProvider abstract class RecycledRendererProvider : RendererProvider RendererProvider interface RendererProvider : DefaultLifecycleObserver A pool to cache the renderer for the Playback. Scope enum class Scope Strategy sealed class Strategy : Selector ViewRendererProvider abstract class ViewRendererProvider : RecycledRendererProvider VolumeChangedListener interface VolumeChangedListener VolumeChangedListeners class VolumeChangedListeners : CopyOnWriteArraySet < VolumeChangedListener >, VolumeChangedListener VolumeInfoController interface VolumeInfoController","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/#type-aliases","text":"Name Summary NetworkType typealias NetworkType = Int Refer to values of com.google.android.exoplayer2.C.NetworkType PlayableObserver typealias PlayableObserver = ( Any , Playback ?, Playback ?) -> Unit An observer to allow client to know when the Playable (defined by its tag)'s Playback is changed. Client can use the Manager.observe method to register an observer. RendererProviderFactory typealias RendererProviderFactory = () -> RendererProvider Selector typealias Selector = ( Collection < Playback >) -> Collection < Playback >","title":"Type Aliases"},{"location":"api/kohii-core/kohii.v1.core/#functions","text":"Name Summary controller fun controller(kohiiCanStart: Boolean = true, kohiiCanPause: Boolean = true, setupRenderer: (playback: Playback , renderer: Any ?) -> Unit ): Playback.Controller Quickly setup the Controller that only needs to setup the renderer.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-network-type/","text":"kohii-core / kohii.v1.core / NetworkType NetworkType \u00b6 typealias NetworkType = Int Refer to values of com.google.android.exoplayer2.C.NetworkType","title":" network type"},{"location":"api/kohii-core/kohii.v1.core/-network-type/#networktype","text":"typealias NetworkType = Int Refer to values of com.google.android.exoplayer2.C.NetworkType","title":"NetworkType"},{"location":"api/kohii-core/kohii.v1.core/-playable-container/","text":"kohii-core / kohii.v1.core / PlayableContainer PlayableContainer \u00b6 interface PlayableContainer Inheritors \u00b6 Name Summary Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed.","title":" playable container"},{"location":"api/kohii-core/kohii.v1.core/-playable-container/#playablecontainer","text":"interface PlayableContainer","title":"PlayableContainer"},{"location":"api/kohii-core/kohii.v1.core/-playable-container/#inheritors","text":"Name Summary Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed.","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-playable-manager/","text":"kohii-core / kohii.v1.core / PlayableManager PlayableManager \u00b6 interface PlayableManager Inheritors \u00b6 Name Summary Manager class Manager : PlayableManager , DefaultLifecycleObserver , LifecycleEventObserver , Comparable < Manager > Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. Master class Master : PlayableManager","title":" playable manager"},{"location":"api/kohii-core/kohii.v1.core/-playable-manager/#playablemanager","text":"interface PlayableManager","title":"PlayableManager"},{"location":"api/kohii-core/kohii.v1.core/-playable-manager/#inheritors","text":"Name Summary Manager class Manager : PlayableManager , DefaultLifecycleObserver , LifecycleEventObserver , Comparable < Manager > Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. Master class Master : PlayableManager","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-playable-observer/","text":"kohii-core / kohii.v1.core / PlayableObserver PlayableObserver \u00b6 typealias PlayableObserver = ( Any , Playback ?, Playback ?) -> Unit An observer to allow client to know when the Playable (defined by its tag)'s Playback is changed. Client can use the Manager.observe method to register an observer.","title":" playable observer"},{"location":"api/kohii-core/kohii.v1.core/-playable-observer/#playableobserver","text":"typealias PlayableObserver = ( Any , Playback ?, Playback ?) -> Unit An observer to allow client to know when the Playable (defined by its tag)'s Playback is changed. Client can use the Manager.observe method to register an observer.","title":"PlayableObserver"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider-factory/","text":"kohii-core / kohii.v1.core / RendererProviderFactory RendererProviderFactory \u00b6 typealias RendererProviderFactory = () -> RendererProvider","title":" renderer provider factory"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider-factory/#rendererproviderfactory","text":"typealias RendererProviderFactory = () -> RendererProvider","title":"RendererProviderFactory"},{"location":"api/kohii-core/kohii.v1.core/-selector/","text":"kohii-core / kohii.v1.core / Selector Selector \u00b6 typealias Selector = ( Collection < Playback >) -> Collection < Playback > Inheritors \u00b6 Name Summary Strategy sealed class Strategy : Selector","title":" selector"},{"location":"api/kohii-core/kohii.v1.core/-selector/#selector","text":"typealias Selector = ( Collection < Playback >) -> Collection < Playback >","title":"Selector"},{"location":"api/kohii-core/kohii.v1.core/-selector/#inheritors","text":"Name Summary Strategy sealed class Strategy : Selector","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/controller/","text":"kohii-core / kohii.v1.core / controller controller \u00b6 inline fun controller(kohiiCanStart: Boolean = true, kohiiCanPause: Boolean = true, crossinline setupRenderer: (playback: Playback , renderer: Any ?) -> Unit ): Playback.Controller Quickly setup the Controller that only needs to setup the renderer. Parameters \u00b6 kohiiCanStart - same as Controller.kohiiCanStart kohiiCanPause - same as Controller.kohiiCanPause setupRenderer - same as Controller.setupRenderer","title":"Controller"},{"location":"api/kohii-core/kohii.v1.core/controller/#controller","text":"inline fun controller(kohiiCanStart: Boolean = true, kohiiCanPause: Boolean = true, crossinline setupRenderer: (playback: Playback , renderer: Any ?) -> Unit ): Playback.Controller Quickly setup the Controller that only needs to setup the renderer.","title":"controller"},{"location":"api/kohii-core/kohii.v1.core/controller/#parameters","text":"kohiiCanStart - same as Controller.kohiiCanStart kohiiCanPause - same as Controller.kohiiCanPause setupRenderer - same as Controller.setupRenderer","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/","text":"kohii-core / kohii.v1.core / AbstractBridge AbstractBridge \u00b6 abstract class AbstractBridge<RENDERER : Any > : Bridge < RENDERER > Constructors \u00b6 Name Summary <init> AbstractBridge() Properties \u00b6 Name Summary errorListeners val errorListeners: ErrorListeners eventListeners val eventListeners: PlayerEventListeners playerParameters open var playerParameters: PlayerParameters videoSize open var videoSize: VideoSize volumeListeners val volumeListeners: VolumeChangedListeners Inherited Properties \u00b6 Name Summary playbackInfo abstract var playbackInfo: PlaybackInfo playerState abstract val playerState: Int renderer abstract var renderer: RENDERER ? repeatMode abstract var repeatMode: Int volumeInfo abstract var volumeInfo: VolumeInfo Functions \u00b6 Name Summary addErrorListener open fun addErrorListener(errorListener: ErrorListener ): Unit addEventListener open fun addEventListener(listener: PlayerEventListener ): Unit Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all. addVolumeChangeListener open fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit pause open fun pause(): Unit play open fun play(): Unit removeErrorListener open fun removeErrorListener(errorListener: ErrorListener ?): Unit removeEventListener open fun removeEventListener(listener: PlayerEventListener ?): Unit Remove a PlayerEventListener from this Playable. removeVolumeChangeListener open fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit Inherited Functions \u00b6 Name Summary isPlaying abstract fun isPlaying(): Boolean prepare abstract fun prepare(loadSource: Boolean ): Unit Prepare the resource for a media. This method should: ready abstract fun ready(): Unit release abstract fun release(): Unit Release all resource. After this, the Player instance is released to the Player pool and the Bridge must call prepare to request for a Player it again. reset abstract fun reset(resetPlayer: Boolean = true): Unit Reset all resource, so that the playback can start all over again. This is to cleanup the playback for reuse. The ExoPlayer instance must be still usable without calling prepare . seekTo abstract fun seekTo(positionMs: Long ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/#abstractbridge","text":"abstract class AbstractBridge<RENDERER : Any > : Bridge < RENDERER >","title":"AbstractBridge"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/#constructors","text":"Name Summary <init> AbstractBridge()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/#properties","text":"Name Summary errorListeners val errorListeners: ErrorListeners eventListeners val eventListeners: PlayerEventListeners playerParameters open var playerParameters: PlayerParameters videoSize open var videoSize: VideoSize volumeListeners val volumeListeners: VolumeChangedListeners","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/#inherited-properties","text":"Name Summary playbackInfo abstract var playbackInfo: PlaybackInfo playerState abstract val playerState: Int renderer abstract var renderer: RENDERER ? repeatMode abstract var repeatMode: Int volumeInfo abstract var volumeInfo: VolumeInfo","title":"Inherited Properties"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/#functions","text":"Name Summary addErrorListener open fun addErrorListener(errorListener: ErrorListener ): Unit addEventListener open fun addEventListener(listener: PlayerEventListener ): Unit Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all. addVolumeChangeListener open fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit pause open fun pause(): Unit play open fun play(): Unit removeErrorListener open fun removeErrorListener(errorListener: ErrorListener ?): Unit removeEventListener open fun removeEventListener(listener: PlayerEventListener ?): Unit Remove a PlayerEventListener from this Playable. removeVolumeChangeListener open fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/#inherited-functions","text":"Name Summary isPlaying abstract fun isPlaying(): Boolean prepare abstract fun prepare(loadSource: Boolean ): Unit Prepare the resource for a media. This method should: ready abstract fun ready(): Unit release abstract fun release(): Unit Release all resource. After this, the Player instance is released to the Player pool and the Bridge must call prepare to request for a Player it again. reset abstract fun reset(resetPlayer: Boolean = true): Unit Reset all resource, so that the playback can start all over again. This is to cleanup the playback for reuse. The ExoPlayer instance must be still usable without calling prepare . seekTo abstract fun seekTo(positionMs: Long ): Unit","title":"Inherited Functions"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/-init-/","text":"kohii-core / kohii.v1.core / AbstractBridge / <init> <init> \u00b6 AbstractBridge()","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/-init-/#init","text":"AbstractBridge()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-error-listener/","text":"kohii-core / kohii.v1.core / AbstractBridge / addErrorListener addErrorListener \u00b6 open fun addErrorListener(errorListener: ErrorListener ): Unit Overrides Bridge.addErrorListener","title":"Add error listener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-error-listener/#adderrorlistener","text":"open fun addErrorListener(errorListener: ErrorListener ): Unit Overrides Bridge.addErrorListener","title":"addErrorListener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-event-listener/","text":"kohii-core / kohii.v1.core / AbstractBridge / addEventListener addEventListener \u00b6 open fun addEventListener(listener: PlayerEventListener ): Unit Overrides Bridge.addEventListener Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all. Parameters \u00b6 listener - the EventListener to add, must be not null .","title":"Add event listener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-event-listener/#addeventlistener","text":"open fun addEventListener(listener: PlayerEventListener ): Unit Overrides Bridge.addEventListener Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all.","title":"addEventListener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-event-listener/#parameters","text":"listener - the EventListener to add, must be not null .","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-volume-change-listener/","text":"kohii-core / kohii.v1.core / AbstractBridge / addVolumeChangeListener addVolumeChangeListener \u00b6 open fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit Overrides Bridge.addVolumeChangeListener","title":"Add volume change listener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/add-volume-change-listener/#addvolumechangelistener","text":"open fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit Overrides Bridge.addVolumeChangeListener","title":"addVolumeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/error-listeners/","text":"kohii-core / kohii.v1.core / AbstractBridge / errorListeners errorListeners \u00b6 protected val errorListeners: ErrorListeners","title":"Error listeners"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/error-listeners/#errorlisteners","text":"protected val errorListeners: ErrorListeners","title":"errorListeners"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/event-listeners/","text":"kohii-core / kohii.v1.core / AbstractBridge / eventListeners eventListeners \u00b6 protected val eventListeners: PlayerEventListeners","title":"Event listeners"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/event-listeners/#eventlisteners","text":"protected val eventListeners: PlayerEventListeners","title":"eventListeners"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/pause/","text":"kohii-core / kohii.v1.core / AbstractBridge / pause pause \u00b6 @CallSuper open fun pause(): Unit Overrides Bridge.pause","title":"Pause"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/pause/#pause","text":"@CallSuper open fun pause(): Unit Overrides Bridge.pause","title":"pause"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/play/","text":"kohii-core / kohii.v1.core / AbstractBridge / play play \u00b6 @CallSuper open fun play(): Unit Overrides Bridge.play","title":"Play"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/play/#play","text":"@CallSuper open fun play(): Unit Overrides Bridge.play","title":"play"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/player-parameters/","text":"kohii-core / kohii.v1.core / AbstractBridge / playerParameters playerParameters \u00b6 open var playerParameters: PlayerParameters Overrides Bridge.playerParameters","title":"Player parameters"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/player-parameters/#playerparameters","text":"open var playerParameters: PlayerParameters Overrides Bridge.playerParameters","title":"playerParameters"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-error-listener/","text":"kohii-core / kohii.v1.core / AbstractBridge / removeErrorListener removeErrorListener \u00b6 open fun removeErrorListener(errorListener: ErrorListener ?): Unit Overrides Bridge.removeErrorListener","title":"Remove error listener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-error-listener/#removeerrorlistener","text":"open fun removeErrorListener(errorListener: ErrorListener ?): Unit Overrides Bridge.removeErrorListener","title":"removeErrorListener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-event-listener/","text":"kohii-core / kohii.v1.core / AbstractBridge / removeEventListener removeEventListener \u00b6 open fun removeEventListener(listener: PlayerEventListener ?): Unit Overrides Bridge.removeEventListener Remove a PlayerEventListener from this Playable. Parameters \u00b6 listener - the EventListener to be removed. If null, nothing happens.","title":"Remove event listener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-event-listener/#removeeventlistener","text":"open fun removeEventListener(listener: PlayerEventListener ?): Unit Overrides Bridge.removeEventListener Remove a PlayerEventListener from this Playable.","title":"removeEventListener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-event-listener/#parameters","text":"listener - the EventListener to be removed. If null, nothing happens.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-volume-change-listener/","text":"kohii-core / kohii.v1.core / AbstractBridge / removeVolumeChangeListener removeVolumeChangeListener \u00b6 open fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit Overrides Bridge.removeVolumeChangeListener","title":"Remove volume change listener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/remove-volume-change-listener/#removevolumechangelistener","text":"open fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit Overrides Bridge.removeVolumeChangeListener","title":"removeVolumeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/video-size/","text":"kohii-core / kohii.v1.core / AbstractBridge / videoSize videoSize \u00b6 open var videoSize: VideoSize","title":"Video size"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/video-size/#videosize","text":"open var videoSize: VideoSize","title":"videoSize"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/volume-listeners/","text":"kohii-core / kohii.v1.core / AbstractBridge / volumeListeners volumeListeners \u00b6 protected val volumeListeners: VolumeChangedListeners","title":"Volume listeners"},{"location":"api/kohii-core/kohii.v1.core/-abstract-bridge/volume-listeners/#volumelisteners","text":"protected val volumeListeners: VolumeChangedListeners","title":"volumeListeners"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/","text":"kohii-core / kohii.v1.core / AbstractPlayable AbstractPlayable \u00b6 abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener Constructors \u00b6 Name Summary <init> AbstractPlayable(master: Master , media: Media , config: Playable.Config , bridge: Bridge < RENDERER >) Properties \u00b6 Name Summary bridge val bridge: Bridge < RENDERER > master val master: Master tag open val tag: Any Inherited Properties \u00b6 Name Summary media val media: Media renderer abstract var renderer: Any ? Functions \u00b6 Name Summary isPlaying open fun isPlaying(): Boolean onActive open fun onActive(playback: Playback ): Unit onAdded open fun onAdded(playback: Playback ): Unit onConfigChange open fun onConfigChange(): Boolean Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly. onDetached open fun onDetached(playback: Playback ): Unit onInActive open fun onInActive(playback: Playback ): Unit onPause open fun onPause(): Unit onPlay open fun onPlay(): Unit onPlayerParametersChanged open fun onPlayerParametersChanged(parameters: PlayerParameters ): Unit onPrepare open fun onPrepare(loadSource: Boolean ): Unit onReady open fun onReady(): Unit onRelease open fun onRelease(): Unit onRemoved open fun onRemoved(playback: Playback ): Unit onRendererAttached open fun onRendererAttached(playback: Playback , renderer: Any ?): Unit onRendererDetached open fun onRendererDetached(playback: Playback , renderer: Any ?): Unit onReset open fun onReset(): Unit onUnbind open fun onUnbind(playback: Playback ): Unit setupRenderer open fun setupRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: teardownRenderer open fun teardownRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: toString open fun toString(): String Inherited Functions \u00b6 Name Summary onAttached open fun onAttached(playback: Playback ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/#abstractplayable","text":"abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener","title":"AbstractPlayable"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/#constructors","text":"Name Summary <init> AbstractPlayable(master: Master , media: Media , config: Playable.Config , bridge: Bridge < RENDERER >)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/#properties","text":"Name Summary bridge val bridge: Bridge < RENDERER > master val master: Master tag open val tag: Any","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/#inherited-properties","text":"Name Summary media val media: Media renderer abstract var renderer: Any ?","title":"Inherited Properties"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/#functions","text":"Name Summary isPlaying open fun isPlaying(): Boolean onActive open fun onActive(playback: Playback ): Unit onAdded open fun onAdded(playback: Playback ): Unit onConfigChange open fun onConfigChange(): Boolean Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly. onDetached open fun onDetached(playback: Playback ): Unit onInActive open fun onInActive(playback: Playback ): Unit onPause open fun onPause(): Unit onPlay open fun onPlay(): Unit onPlayerParametersChanged open fun onPlayerParametersChanged(parameters: PlayerParameters ): Unit onPrepare open fun onPrepare(loadSource: Boolean ): Unit onReady open fun onReady(): Unit onRelease open fun onRelease(): Unit onRemoved open fun onRemoved(playback: Playback ): Unit onRendererAttached open fun onRendererAttached(playback: Playback , renderer: Any ?): Unit onRendererDetached open fun onRendererDetached(playback: Playback , renderer: Any ?): Unit onReset open fun onReset(): Unit onUnbind open fun onUnbind(playback: Playback ): Unit setupRenderer open fun setupRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: teardownRenderer open fun teardownRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: toString open fun toString(): String","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/#inherited-functions","text":"Name Summary onAttached open fun onAttached(playback: Playback ): Unit","title":"Inherited Functions"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/-init-/","text":"kohii-core / kohii.v1.core / AbstractPlayable / <init> <init> \u00b6 AbstractPlayable(master: Master , media: Media , config: Playable.Config , bridge: Bridge < RENDERER >)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/-init-/#init","text":"AbstractPlayable(master: Master , media: Media , config: Playable.Config , bridge: Bridge < RENDERER >)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/bridge/","text":"kohii-core / kohii.v1.core / AbstractPlayable / bridge bridge \u00b6 protected val bridge: Bridge < RENDERER >","title":"Bridge"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/bridge/#bridge","text":"protected val bridge: Bridge < RENDERER >","title":"bridge"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/is-playing/","text":"kohii-core / kohii.v1.core / AbstractPlayable / isPlaying isPlaying \u00b6 open fun isPlaying(): Boolean Overrides Playable.isPlaying","title":"Is playing"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/is-playing/#isplaying","text":"open fun isPlaying(): Boolean Overrides Playable.isPlaying","title":"isPlaying"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/master/","text":"kohii-core / kohii.v1.core / AbstractPlayable / master master \u00b6 protected val master: Master","title":"Master"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/master/#master","text":"protected val master: Master","title":"master"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-active/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onActive onActive \u00b6 open fun onActive(playback: Playback ): Unit Overrides Callback.onActive","title":"On active"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-active/#onactive","text":"open fun onActive(playback: Playback ): Unit Overrides Callback.onActive","title":"onActive"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-added/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onAdded onAdded \u00b6 open fun onAdded(playback: Playback ): Unit Overrides Callback.onAdded","title":"On added"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-added/#onadded","text":"open fun onAdded(playback: Playback ): Unit Overrides Callback.onAdded","title":"onAdded"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-config-change/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onConfigChange onConfigChange \u00b6 open fun onConfigChange(): Boolean Overrides Playable.onConfigChange Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly.","title":"On config change"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-config-change/#onconfigchange","text":"open fun onConfigChange(): Boolean Overrides Playable.onConfigChange Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly.","title":"onConfigChange"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-detached/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onDetached onDetached \u00b6 open fun onDetached(playback: Playback ): Unit Overrides Callback.onDetached","title":"On detached"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-detached/#ondetached","text":"open fun onDetached(playback: Playback ): Unit Overrides Callback.onDetached","title":"onDetached"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-in-active/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onInActive onInActive \u00b6 open fun onInActive(playback: Playback ): Unit Overrides Callback.onInActive","title":"On in active"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-in-active/#oninactive","text":"open fun onInActive(playback: Playback ): Unit Overrides Callback.onInActive","title":"onInActive"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-pause/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onPause onPause \u00b6 open fun onPause(): Unit Overrides Playable.onPause","title":"On pause"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-pause/#onpause","text":"open fun onPause(): Unit Overrides Playable.onPause","title":"onPause"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-play/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onPlay onPlay \u00b6 open fun onPlay(): Unit Overrides Playable.onPlay","title":"On play"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-play/#onplay","text":"open fun onPlay(): Unit Overrides Playable.onPlay","title":"onPlay"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-player-parameters-changed/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onPlayerParametersChanged onPlayerParametersChanged \u00b6 open fun onPlayerParametersChanged(parameters: PlayerParameters ): Unit","title":"On player parameters changed"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-player-parameters-changed/#onplayerparameterschanged","text":"open fun onPlayerParametersChanged(parameters: PlayerParameters ): Unit","title":"onPlayerParametersChanged"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-prepare/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onPrepare onPrepare \u00b6 open fun onPrepare(loadSource: Boolean ): Unit Overrides Playable.onPrepare","title":"On prepare"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-prepare/#onprepare","text":"open fun onPrepare(loadSource: Boolean ): Unit Overrides Playable.onPrepare","title":"onPrepare"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-ready/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onReady onReady \u00b6 open fun onReady(): Unit Overrides Playable.onReady","title":"On ready"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-ready/#onready","text":"open fun onReady(): Unit Overrides Playable.onReady","title":"onReady"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-release/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onRelease onRelease \u00b6 open fun onRelease(): Unit Overrides Playable.onRelease","title":"On release"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-release/#onrelease","text":"open fun onRelease(): Unit Overrides Playable.onRelease","title":"onRelease"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-removed/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onRemoved onRemoved \u00b6 open fun onRemoved(playback: Playback ): Unit Overrides Callback.onRemoved","title":"On removed"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-removed/#onremoved","text":"open fun onRemoved(playback: Playback ): Unit Overrides Callback.onRemoved","title":"onRemoved"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-renderer-attached/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onRendererAttached onRendererAttached \u00b6 protected open fun onRendererAttached(playback: Playback , renderer: Any ?): Unit","title":"On renderer attached"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-renderer-attached/#onrendererattached","text":"protected open fun onRendererAttached(playback: Playback , renderer: Any ?): Unit","title":"onRendererAttached"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-renderer-detached/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onRendererDetached onRendererDetached \u00b6 protected open fun onRendererDetached(playback: Playback , renderer: Any ?): Unit","title":"On renderer detached"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-renderer-detached/#onrendererdetached","text":"protected open fun onRendererDetached(playback: Playback , renderer: Any ?): Unit","title":"onRendererDetached"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-reset/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onReset onReset \u00b6 open fun onReset(): Unit Overrides Playable.onReset","title":"On reset"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-reset/#onreset","text":"open fun onReset(): Unit Overrides Playable.onReset","title":"onReset"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-unbind/","text":"kohii-core / kohii.v1.core / AbstractPlayable / onUnbind onUnbind \u00b6 open fun onUnbind(playback: Playback ): Unit Overrides Playable.onUnbind","title":"On unbind"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/on-unbind/#onunbind","text":"open fun onUnbind(playback: Playback ): Unit Overrides Playable.onUnbind","title":"onUnbind"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/setup-renderer/","text":"kohii-core / kohii.v1.core / AbstractPlayable / setupRenderer setupRenderer \u00b6 open fun setupRenderer(playback: Playback ): Unit Overrides Playable.setupRenderer Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"Setup renderer"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/setup-renderer/#setuprenderer","text":"open fun setupRenderer(playback: Playback ): Unit Overrides Playable.setupRenderer Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"setupRenderer"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/tag/","text":"kohii-core / kohii.v1.core / AbstractPlayable / tag tag \u00b6 open val tag: Any Overrides Playable.tag","title":"Tag"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/tag/#tag","text":"open val tag: Any Overrides Playable.tag","title":"tag"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/teardown-renderer/","text":"kohii-core / kohii.v1.core / AbstractPlayable / teardownRenderer teardownRenderer \u00b6 open fun teardownRenderer(playback: Playback ): Unit Overrides Playable.teardownRenderer Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"Teardown renderer"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/teardown-renderer/#teardownrenderer","text":"open fun teardownRenderer(playback: Playback ): Unit Overrides Playable.teardownRenderer Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"teardownRenderer"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/to-string/","text":"kohii-core / kohii.v1.core / AbstractPlayable / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"api/kohii-core/kohii.v1.core/-abstract-playable/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/kohii-core/kohii.v1.core/-binder/","text":"kohii-core / kohii.v1.core / Binder Binder \u00b6 class Binder Types \u00b6 Name Summary Options class Options Constructors \u00b6 Name Summary <init> Binder(engine: Engine <*>, media: Media ) Functions \u00b6 Name Summary bind fun bind(container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Rebinder ?","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-binder/#binder","text":"class Binder","title":"Binder"},{"location":"api/kohii-core/kohii.v1.core/-binder/#types","text":"Name Summary Options class Options","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/-binder/#constructors","text":"Name Summary <init> Binder(engine: Engine <*>, media: Media )","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-binder/#functions","text":"Name Summary bind fun bind(container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Rebinder ?","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-binder/-init-/","text":"kohii-core / kohii.v1.core / Binder / <init> <init> \u00b6 Binder(engine: Engine <*>, media: Media )","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-binder/-init-/#init","text":"Binder(engine: Engine <*>, media: Media )","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-binder/bind/","text":"kohii-core / kohii.v1.core / Binder / bind bind \u00b6 @JvmOverloads fun bind(container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Rebinder ?","title":"Bind"},{"location":"api/kohii-core/kohii.v1.core/-binder/bind/#bind","text":"@JvmOverloads fun bind(container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Rebinder ?","title":"bind"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/","text":"kohii-core / kohii.v1.core / Binder / Options Options \u00b6 class Options Constructors \u00b6 Name Summary <init> Options() Properties \u00b6 Name Summary artworkHintListener var artworkHintListener: Playback.ArtworkHintListener ? callbacks val callbacks: MutableSet < Playback.Callback > controller var controller: Playback.Controller ? delay var delay: Int initialPlaybackInfo var initialPlaybackInfo: PlaybackInfo ? expected initial PlaybackInfo for a Playable to start when a new Playback is bound to it. If null, it will follow the default behavior: an existing Playable will keep its current state, a newly created Playable receives a new PlaybackInfo . This property is not available in the Rebinder . networkTypeChangeListener var networkTypeChangeListener: Playback.NetworkTypeChangeListener ? preload var preload: Boolean repeatMode var repeatMode: Int tag var tag: Any threshold var threshold: Float tokenUpdateListener var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/#options","text":"class Options","title":"Options"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/#constructors","text":"Name Summary <init> Options()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/#properties","text":"Name Summary artworkHintListener var artworkHintListener: Playback.ArtworkHintListener ? callbacks val callbacks: MutableSet < Playback.Callback > controller var controller: Playback.Controller ? delay var delay: Int initialPlaybackInfo var initialPlaybackInfo: PlaybackInfo ? expected initial PlaybackInfo for a Playable to start when a new Playback is bound to it. If null, it will follow the default behavior: an existing Playable will keep its current state, a newly created Playable receives a new PlaybackInfo . This property is not available in the Rebinder . networkTypeChangeListener var networkTypeChangeListener: Playback.NetworkTypeChangeListener ? preload var preload: Boolean repeatMode var repeatMode: Int tag var tag: Any threshold var threshold: Float tokenUpdateListener var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/-init-/","text":"kohii-core / kohii.v1.core / Binder / Options / <init> <init> \u00b6 Options()","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/-init-/#init","text":"Options()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/artwork-hint-listener/","text":"kohii-core / kohii.v1.core / Binder / Options / artworkHintListener artworkHintListener \u00b6 var artworkHintListener: Playback.ArtworkHintListener ?","title":"Artwork hint listener"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/artwork-hint-listener/#artworkhintlistener","text":"var artworkHintListener: Playback.ArtworkHintListener ?","title":"artworkHintListener"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/callbacks/","text":"kohii-core / kohii.v1.core / Binder / Options / callbacks callbacks \u00b6 val callbacks: MutableSet < Playback.Callback >","title":"Callbacks"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/callbacks/#callbacks","text":"val callbacks: MutableSet < Playback.Callback >","title":"callbacks"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/controller/","text":"kohii-core / kohii.v1.core / Binder / Options / controller controller \u00b6 var controller: Playback.Controller ?","title":"Controller"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/controller/#controller","text":"var controller: Playback.Controller ?","title":"controller"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/delay/","text":"kohii-core / kohii.v1.core / Binder / Options / delay delay \u00b6 var delay: Int","title":"Delay"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/delay/#delay","text":"var delay: Int","title":"delay"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/initial-playback-info/","text":"kohii-core / kohii.v1.core / Binder / Options / initialPlaybackInfo initialPlaybackInfo \u00b6 var initialPlaybackInfo: PlaybackInfo ? expected initial PlaybackInfo for a Playable to start when a new Playback is bound to it. If null, it will follow the default behavior: an existing Playable will keep its current state, a newly created Playable receives a new PlaybackInfo . This property is not available in the Rebinder . Property \u00b6 initialPlaybackInfo - expected initial PlaybackInfo for a Playable to start when a new Playback is bound to it. If null, it will follow the default behavior: an existing Playable will keep its current state, a newly created Playable receives a new PlaybackInfo . This property is not available in the Rebinder .","title":"Initial playback info"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/initial-playback-info/#initialplaybackinfo","text":"var initialPlaybackInfo: PlaybackInfo ? expected initial PlaybackInfo for a Playable to start when a new Playback is bound to it. If null, it will follow the default behavior: an existing Playable will keep its current state, a newly created Playable receives a new PlaybackInfo . This property is not available in the Rebinder .","title":"initialPlaybackInfo"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/initial-playback-info/#property","text":"initialPlaybackInfo - expected initial PlaybackInfo for a Playable to start when a new Playback is bound to it. If null, it will follow the default behavior: an existing Playable will keep its current state, a newly created Playable receives a new PlaybackInfo . This property is not available in the Rebinder .","title":"Property"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/network-type-change-listener/","text":"kohii-core / kohii.v1.core / Binder / Options / networkTypeChangeListener networkTypeChangeListener \u00b6 var networkTypeChangeListener: Playback.NetworkTypeChangeListener ?","title":"Network type change listener"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/network-type-change-listener/#networktypechangelistener","text":"var networkTypeChangeListener: Playback.NetworkTypeChangeListener ?","title":"networkTypeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/preload/","text":"kohii-core / kohii.v1.core / Binder / Options / preload preload \u00b6 var preload: Boolean","title":"Preload"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/preload/#preload","text":"var preload: Boolean","title":"preload"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/repeat-mode/","text":"kohii-core / kohii.v1.core / Binder / Options / repeatMode repeatMode \u00b6 var repeatMode: Int","title":"Repeat mode"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/repeat-mode/#repeatmode","text":"var repeatMode: Int","title":"repeatMode"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/tag/","text":"kohii-core / kohii.v1.core / Binder / Options / tag tag \u00b6 var tag: Any","title":"Tag"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/tag/#tag","text":"var tag: Any","title":"tag"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/threshold/","text":"kohii-core / kohii.v1.core / Binder / Options / threshold threshold \u00b6 var threshold: Float","title":"Threshold"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/threshold/#threshold","text":"var threshold: Float","title":"threshold"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/token-update-listener/","text":"kohii-core / kohii.v1.core / Binder / Options / tokenUpdateListener tokenUpdateListener \u00b6 var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Token update listener"},{"location":"api/kohii-core/kohii.v1.core/-binder/-options/token-update-listener/#tokenupdatelistener","text":"var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"tokenUpdateListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/","text":"kohii-core / kohii.v1.core / Bridge Bridge \u00b6 interface Bridge<RENDERER : Any > Properties \u00b6 Name Summary playbackInfo abstract var playbackInfo: PlaybackInfo playerParameters abstract var playerParameters: PlayerParameters playerState abstract val playerState: Int renderer abstract var renderer: RENDERER ? repeatMode abstract var repeatMode: Int volumeInfo abstract var volumeInfo: VolumeInfo Functions \u00b6 Name Summary addErrorListener abstract fun addErrorListener(errorListener: ErrorListener ): Unit addEventListener abstract fun addEventListener(listener: PlayerEventListener ): Unit Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all. addVolumeChangeListener abstract fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit isPlaying abstract fun isPlaying(): Boolean pause abstract fun pause(): Unit play abstract fun play(): Unit prepare abstract fun prepare(loadSource: Boolean ): Unit Prepare the resource for a media. This method should: ready abstract fun ready(): Unit release abstract fun release(): Unit Release all resource. After this, the Player instance is released to the Player pool and the Bridge must call prepare to request for a Player it again. removeErrorListener abstract fun removeErrorListener(errorListener: ErrorListener ?): Unit removeEventListener abstract fun removeEventListener(listener: PlayerEventListener ?): Unit Remove a PlayerEventListener from this Playable. removeVolumeChangeListener abstract fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit reset abstract fun reset(resetPlayer: Boolean = true): Unit Reset all resource, so that the playback can start all over again. This is to cleanup the playback for reuse. The ExoPlayer instance must be still usable without calling prepare . seekTo abstract fun seekTo(positionMs: Long ): Unit Inheritors \u00b6 Name Summary AbstractBridge abstract class AbstractBridge<RENDERER : Any > : Bridge < RENDERER >","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-bridge/#bridge","text":"interface Bridge<RENDERER : Any >","title":"Bridge"},{"location":"api/kohii-core/kohii.v1.core/-bridge/#properties","text":"Name Summary playbackInfo abstract var playbackInfo: PlaybackInfo playerParameters abstract var playerParameters: PlayerParameters playerState abstract val playerState: Int renderer abstract var renderer: RENDERER ? repeatMode abstract var repeatMode: Int volumeInfo abstract var volumeInfo: VolumeInfo","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-bridge/#functions","text":"Name Summary addErrorListener abstract fun addErrorListener(errorListener: ErrorListener ): Unit addEventListener abstract fun addEventListener(listener: PlayerEventListener ): Unit Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all. addVolumeChangeListener abstract fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit isPlaying abstract fun isPlaying(): Boolean pause abstract fun pause(): Unit play abstract fun play(): Unit prepare abstract fun prepare(loadSource: Boolean ): Unit Prepare the resource for a media. This method should: ready abstract fun ready(): Unit release abstract fun release(): Unit Release all resource. After this, the Player instance is released to the Player pool and the Bridge must call prepare to request for a Player it again. removeErrorListener abstract fun removeErrorListener(errorListener: ErrorListener ?): Unit removeEventListener abstract fun removeEventListener(listener: PlayerEventListener ?): Unit Remove a PlayerEventListener from this Playable. removeVolumeChangeListener abstract fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit reset abstract fun reset(resetPlayer: Boolean = true): Unit Reset all resource, so that the playback can start all over again. This is to cleanup the playback for reuse. The ExoPlayer instance must be still usable without calling prepare . seekTo abstract fun seekTo(positionMs: Long ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-bridge/#inheritors","text":"Name Summary AbstractBridge abstract class AbstractBridge<RENDERER : Any > : Bridge < RENDERER >","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-error-listener/","text":"kohii-core / kohii.v1.core / Bridge / addErrorListener addErrorListener \u00b6 abstract fun addErrorListener(errorListener: ErrorListener ): Unit","title":"Add error listener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-error-listener/#adderrorlistener","text":"abstract fun addErrorListener(errorListener: ErrorListener ): Unit","title":"addErrorListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-event-listener/","text":"kohii-core / kohii.v1.core / Bridge / addEventListener addEventListener \u00b6 abstract fun addEventListener(listener: PlayerEventListener ): Unit Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all. Parameters \u00b6 listener - the EventListener to add, must be not null .","title":"Add event listener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-event-listener/#addeventlistener","text":"abstract fun addEventListener(listener: PlayerEventListener ): Unit Add a new PlayerEventListener to this Playable. As calling prepare also triggers some internal events, this method should be called before prepare so that Client could received them all.","title":"addEventListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-event-listener/#parameters","text":"listener - the EventListener to add, must be not null .","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-volume-change-listener/","text":"kohii-core / kohii.v1.core / Bridge / addVolumeChangeListener addVolumeChangeListener \u00b6 abstract fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit","title":"Add volume change listener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/add-volume-change-listener/#addvolumechangelistener","text":"abstract fun addVolumeChangeListener(listener: VolumeChangedListener ): Unit","title":"addVolumeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/is-playing/","text":"kohii-core / kohii.v1.core / Bridge / isPlaying isPlaying \u00b6 abstract fun isPlaying(): Boolean","title":"Is playing"},{"location":"api/kohii-core/kohii.v1.core/-bridge/is-playing/#isplaying","text":"abstract fun isPlaying(): Boolean","title":"isPlaying"},{"location":"api/kohii-core/kohii.v1.core/-bridge/pause/","text":"kohii-core / kohii.v1.core / Bridge / pause pause \u00b6 abstract fun pause(): Unit","title":"Pause"},{"location":"api/kohii-core/kohii.v1.core/-bridge/pause/#pause","text":"abstract fun pause(): Unit","title":"pause"},{"location":"api/kohii-core/kohii.v1.core/-bridge/play/","text":"kohii-core / kohii.v1.core / Bridge / play play \u00b6 abstract fun play(): Unit","title":"Play"},{"location":"api/kohii-core/kohii.v1.core/-bridge/play/#play","text":"abstract fun play(): Unit","title":"play"},{"location":"api/kohii-core/kohii.v1.core/-bridge/playback-info/","text":"kohii-core / kohii.v1.core / Bridge / playbackInfo playbackInfo \u00b6 abstract var playbackInfo: PlaybackInfo","title":"Playback info"},{"location":"api/kohii-core/kohii.v1.core/-bridge/playback-info/#playbackinfo","text":"abstract var playbackInfo: PlaybackInfo","title":"playbackInfo"},{"location":"api/kohii-core/kohii.v1.core/-bridge/player-parameters/","text":"kohii-core / kohii.v1.core / Bridge / playerParameters playerParameters \u00b6 abstract var playerParameters: PlayerParameters","title":"Player parameters"},{"location":"api/kohii-core/kohii.v1.core/-bridge/player-parameters/#playerparameters","text":"abstract var playerParameters: PlayerParameters","title":"playerParameters"},{"location":"api/kohii-core/kohii.v1.core/-bridge/player-state/","text":"kohii-core / kohii.v1.core / Bridge / playerState playerState \u00b6 abstract val playerState: Int","title":"Player state"},{"location":"api/kohii-core/kohii.v1.core/-bridge/player-state/#playerstate","text":"abstract val playerState: Int","title":"playerState"},{"location":"api/kohii-core/kohii.v1.core/-bridge/prepare/","text":"kohii-core / kohii.v1.core / Bridge / prepare prepare \u00b6 abstract fun prepare(loadSource: Boolean ): Unit Prepare the resource for a media. This method should: Request for new Player instance if there is not a usable one. Configure callbacks for the player implementation. If there is non-trivial PlaybackInfo, update it to the SimpleExoPlayer. If client request to prepare MediaSource, then prepare it. This method must be called before .setPlayerView . Parameters \u00b6 loadSource - if true , also prepare the MediaSource when preparing the Player, if false just do nothing for the MediaSource.","title":"Prepare"},{"location":"api/kohii-core/kohii.v1.core/-bridge/prepare/#prepare","text":"abstract fun prepare(loadSource: Boolean ): Unit Prepare the resource for a media. This method should: Request for new Player instance if there is not a usable one. Configure callbacks for the player implementation. If there is non-trivial PlaybackInfo, update it to the SimpleExoPlayer. If client request to prepare MediaSource, then prepare it. This method must be called before .setPlayerView .","title":"prepare"},{"location":"api/kohii-core/kohii.v1.core/-bridge/prepare/#parameters","text":"loadSource - if true , also prepare the MediaSource when preparing the Player, if false just do nothing for the MediaSource.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-bridge/ready/","text":"kohii-core / kohii.v1.core / Bridge / ready ready \u00b6 abstract fun ready(): Unit","title":"Ready"},{"location":"api/kohii-core/kohii.v1.core/-bridge/ready/#ready","text":"abstract fun ready(): Unit","title":"ready"},{"location":"api/kohii-core/kohii.v1.core/-bridge/release/","text":"kohii-core / kohii.v1.core / Bridge / release release \u00b6 abstract fun release(): Unit Release all resource. After this, the Player instance is released to the Player pool and the Bridge must call prepare to request for a Player it again.","title":"Release"},{"location":"api/kohii-core/kohii.v1.core/-bridge/release/#release","text":"abstract fun release(): Unit Release all resource. After this, the Player instance is released to the Player pool and the Bridge must call prepare to request for a Player it again.","title":"release"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-error-listener/","text":"kohii-core / kohii.v1.core / Bridge / removeErrorListener removeErrorListener \u00b6 abstract fun removeErrorListener(errorListener: ErrorListener ?): Unit","title":"Remove error listener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-error-listener/#removeerrorlistener","text":"abstract fun removeErrorListener(errorListener: ErrorListener ?): Unit","title":"removeErrorListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-event-listener/","text":"kohii-core / kohii.v1.core / Bridge / removeEventListener removeEventListener \u00b6 abstract fun removeEventListener(listener: PlayerEventListener ?): Unit Remove a PlayerEventListener from this Playable. Parameters \u00b6 listener - the EventListener to be removed. If null, nothing happens.","title":"Remove event listener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-event-listener/#removeeventlistener","text":"abstract fun removeEventListener(listener: PlayerEventListener ?): Unit Remove a PlayerEventListener from this Playable.","title":"removeEventListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-event-listener/#parameters","text":"listener - the EventListener to be removed. If null, nothing happens.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-volume-change-listener/","text":"kohii-core / kohii.v1.core / Bridge / removeVolumeChangeListener removeVolumeChangeListener \u00b6 abstract fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit","title":"Remove volume change listener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/remove-volume-change-listener/#removevolumechangelistener","text":"abstract fun removeVolumeChangeListener(listener: VolumeChangedListener ?): Unit","title":"removeVolumeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-bridge/renderer/","text":"kohii-core / kohii.v1.core / Bridge / renderer renderer \u00b6 abstract var renderer: RENDERER ?","title":"Renderer"},{"location":"api/kohii-core/kohii.v1.core/-bridge/renderer/#renderer","text":"abstract var renderer: RENDERER ?","title":"renderer"},{"location":"api/kohii-core/kohii.v1.core/-bridge/repeat-mode/","text":"kohii-core / kohii.v1.core / Bridge / repeatMode repeatMode \u00b6 abstract var repeatMode: Int","title":"Repeat mode"},{"location":"api/kohii-core/kohii.v1.core/-bridge/repeat-mode/#repeatmode","text":"abstract var repeatMode: Int","title":"repeatMode"},{"location":"api/kohii-core/kohii.v1.core/-bridge/reset/","text":"kohii-core / kohii.v1.core / Bridge / reset reset \u00b6 abstract fun reset(resetPlayer: Boolean = true): Unit Reset all resource, so that the playback can start all over again. This is to cleanup the playback for reuse. The ExoPlayer instance must be still usable without calling prepare .","title":"Reset"},{"location":"api/kohii-core/kohii.v1.core/-bridge/reset/#reset","text":"abstract fun reset(resetPlayer: Boolean = true): Unit Reset all resource, so that the playback can start all over again. This is to cleanup the playback for reuse. The ExoPlayer instance must be still usable without calling prepare .","title":"reset"},{"location":"api/kohii-core/kohii.v1.core/-bridge/seek-to/","text":"kohii-core / kohii.v1.core / Bridge / seekTo seekTo \u00b6 abstract fun seekTo(positionMs: Long ): Unit","title":"Seek to"},{"location":"api/kohii-core/kohii.v1.core/-bridge/seek-to/#seekto","text":"abstract fun seekTo(positionMs: Long ): Unit","title":"seekTo"},{"location":"api/kohii-core/kohii.v1.core/-bridge/volume-info/","text":"kohii-core / kohii.v1.core / Bridge / volumeInfo volumeInfo \u00b6 abstract var volumeInfo: VolumeInfo","title":"Volume info"},{"location":"api/kohii-core/kohii.v1.core/-bridge/volume-info/#volumeinfo","text":"abstract var volumeInfo: VolumeInfo","title":"volumeInfo"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/","text":"kohii-core / kohii.v1.core / BridgeCreator BridgeCreator \u00b6 interface BridgeCreator<RENDERER : Any > Functions \u00b6 Name Summary cleanUp abstract fun cleanUp(): Unit createBridge abstract fun createBridge(context: Context , media: Media ): Bridge < RENDERER >","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/#bridgecreator","text":"interface BridgeCreator<RENDERER : Any >","title":"BridgeCreator"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/#functions","text":"Name Summary cleanUp abstract fun cleanUp(): Unit createBridge abstract fun createBridge(context: Context , media: Media ): Bridge < RENDERER >","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/clean-up/","text":"kohii-core / kohii.v1.core / BridgeCreator / cleanUp cleanUp \u00b6 abstract fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/clean-up/#cleanup","text":"abstract fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/create-bridge/","text":"kohii-core / kohii.v1.core / BridgeCreator / createBridge createBridge \u00b6 abstract fun createBridge(context: Context , media: Media ): Bridge < RENDERER >","title":"Create bridge"},{"location":"api/kohii-core/kohii.v1.core/-bridge-creator/create-bridge/#createbridge","text":"abstract fun createBridge(context: Context , media: Media ): Bridge < RENDERER >","title":"createBridge"},{"location":"api/kohii-core/kohii.v1.core/-bucket/","text":"kohii-core / kohii.v1.core / Bucket Bucket \u00b6 abstract class Bucket : OnLayoutChangeListener Constructors \u00b6 Name Summary <init> Bucket(manager: Manager , root: View , strategy: Strategy , selector: Selector ) Properties \u00b6 Name Summary manager val manager: Manager root open val root: View Functions \u00b6 Name Summary accepts abstract fun accepts(container: ViewGroup ): Boolean addContainer open fun addContainer(container: ViewGroup ): Unit allowToPlay open fun allowToPlay(playback: Playback ): Boolean equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int onAdded open fun onAdded(): Unit onAttached open fun onAttached(): Unit onDetached open fun onDetached(): Unit onLayoutChange open fun onLayoutChange(v: View ?, left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int ): Unit onRemoved open fun onRemoved(): Unit removeContainer open fun removeContainer(container: ViewGroup ): Unit selectByOrientation fun selectByOrientation(candidates: Collection < Playback >, orientation: Int ): Collection < Playback > selectToPlay abstract fun selectToPlay(candidates: Collection < Playback >): Collection < Playback > Companion Object Properties \u00b6 Name Summary BOTH_AXIS const val BOTH_AXIS: Int HORIZONTAL const val HORIZONTAL: Int NONE_AXIS const val NONE_AXIS: Int VERTICAL const val VERTICAL: Int","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-bucket/#bucket","text":"abstract class Bucket : OnLayoutChangeListener","title":"Bucket"},{"location":"api/kohii-core/kohii.v1.core/-bucket/#constructors","text":"Name Summary <init> Bucket(manager: Manager , root: View , strategy: Strategy , selector: Selector )","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-bucket/#properties","text":"Name Summary manager val manager: Manager root open val root: View","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-bucket/#functions","text":"Name Summary accepts abstract fun accepts(container: ViewGroup ): Boolean addContainer open fun addContainer(container: ViewGroup ): Unit allowToPlay open fun allowToPlay(playback: Playback ): Boolean equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int onAdded open fun onAdded(): Unit onAttached open fun onAttached(): Unit onDetached open fun onDetached(): Unit onLayoutChange open fun onLayoutChange(v: View ?, left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int ): Unit onRemoved open fun onRemoved(): Unit removeContainer open fun removeContainer(container: ViewGroup ): Unit selectByOrientation fun selectByOrientation(candidates: Collection < Playback >, orientation: Int ): Collection < Playback > selectToPlay abstract fun selectToPlay(candidates: Collection < Playback >): Collection < Playback >","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-bucket/#companion-object-properties","text":"Name Summary BOTH_AXIS const val BOTH_AXIS: Int HORIZONTAL const val HORIZONTAL: Int NONE_AXIS const val NONE_AXIS: Int VERTICAL const val VERTICAL: Int","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-b-o-t-h_-a-x-i-s/","text":"kohii-core / kohii.v1.core / Bucket / BOTH_AXIS BOTH_AXIS \u00b6 const val BOTH_AXIS: Int","title":" b o t h  a x i s"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-b-o-t-h_-a-x-i-s/#both_axis","text":"const val BOTH_AXIS: Int","title":"BOTH_AXIS"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-h-o-r-i-z-o-n-t-a-l/","text":"kohii-core / kohii.v1.core / Bucket / HORIZONTAL HORIZONTAL \u00b6 const val HORIZONTAL: Int","title":" h o r i z o n t a l"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-h-o-r-i-z-o-n-t-a-l/#horizontal","text":"const val HORIZONTAL: Int","title":"HORIZONTAL"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-init-/","text":"kohii-core / kohii.v1.core / Bucket / <init> <init> \u00b6 Bucket(manager: Manager , root: View , strategy: Strategy , selector: Selector )","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-bucket/-init-/#init","text":"Bucket(manager: Manager , root: View , strategy: Strategy , selector: Selector )","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-n-o-n-e_-a-x-i-s/","text":"kohii-core / kohii.v1.core / Bucket / NONE_AXIS NONE_AXIS \u00b6 const val NONE_AXIS: Int","title":" n o n e  a x i s"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-n-o-n-e_-a-x-i-s/#none_axis","text":"const val NONE_AXIS: Int","title":"NONE_AXIS"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-v-e-r-t-i-c-a-l/","text":"kohii-core / kohii.v1.core / Bucket / VERTICAL VERTICAL \u00b6 const val VERTICAL: Int","title":" v e r t i c a l"},{"location":"api/kohii-core/kohii.v1.core/-bucket/-v-e-r-t-i-c-a-l/#vertical","text":"const val VERTICAL: Int","title":"VERTICAL"},{"location":"api/kohii-core/kohii.v1.core/-bucket/accepts/","text":"kohii-core / kohii.v1.core / Bucket / accepts accepts \u00b6 abstract fun accepts(container: ViewGroup ): Boolean","title":"Accepts"},{"location":"api/kohii-core/kohii.v1.core/-bucket/accepts/#accepts","text":"abstract fun accepts(container: ViewGroup ): Boolean","title":"accepts"},{"location":"api/kohii-core/kohii.v1.core/-bucket/add-container/","text":"kohii-core / kohii.v1.core / Bucket / addContainer addContainer \u00b6 @CallSuper open fun addContainer(container: ViewGroup ): Unit","title":"Add container"},{"location":"api/kohii-core/kohii.v1.core/-bucket/add-container/#addcontainer","text":"@CallSuper open fun addContainer(container: ViewGroup ): Unit","title":"addContainer"},{"location":"api/kohii-core/kohii.v1.core/-bucket/allow-to-play/","text":"kohii-core / kohii.v1.core / Bucket / allowToPlay allowToPlay \u00b6 open fun allowToPlay(playback: Playback ): Boolean","title":"Allow to play"},{"location":"api/kohii-core/kohii.v1.core/-bucket/allow-to-play/#allowtoplay","text":"open fun allowToPlay(playback: Playback ): Boolean","title":"allowToPlay"},{"location":"api/kohii-core/kohii.v1.core/-bucket/equals/","text":"kohii-core / kohii.v1.core / Bucket / equals equals \u00b6 open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/kohii-core/kohii.v1.core/-bucket/equals/#equals","text":"open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/kohii-core/kohii.v1.core/-bucket/hash-code/","text":"kohii-core / kohii.v1.core / Bucket / hashCode hashCode \u00b6 open fun hashCode(): Int","title":"Hash code"},{"location":"api/kohii-core/kohii.v1.core/-bucket/hash-code/#hashcode","text":"open fun hashCode(): Int","title":"hashCode"},{"location":"api/kohii-core/kohii.v1.core/-bucket/manager/","text":"kohii-core / kohii.v1.core / Bucket / manager manager \u00b6 val manager: Manager","title":"Manager"},{"location":"api/kohii-core/kohii.v1.core/-bucket/manager/#manager","text":"val manager: Manager","title":"manager"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-added/","text":"kohii-core / kohii.v1.core / Bucket / onAdded onAdded \u00b6 @CallSuper open fun onAdded(): Unit","title":"On added"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-added/#onadded","text":"@CallSuper open fun onAdded(): Unit","title":"onAdded"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-attached/","text":"kohii-core / kohii.v1.core / Bucket / onAttached onAttached \u00b6 @CallSuper open fun onAttached(): Unit","title":"On attached"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-attached/#onattached","text":"@CallSuper open fun onAttached(): Unit","title":"onAttached"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-detached/","text":"kohii-core / kohii.v1.core / Bucket / onDetached onDetached \u00b6 @CallSuper open fun onDetached(): Unit","title":"On detached"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-detached/#ondetached","text":"@CallSuper open fun onDetached(): Unit","title":"onDetached"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-layout-change/","text":"kohii-core / kohii.v1.core / Bucket / onLayoutChange onLayoutChange \u00b6 @CallSuper open fun onLayoutChange(v: View ?, left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int ): Unit","title":"On layout change"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-layout-change/#onlayoutchange","text":"@CallSuper open fun onLayoutChange(v: View ?, left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int ): Unit","title":"onLayoutChange"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-removed/","text":"kohii-core / kohii.v1.core / Bucket / onRemoved onRemoved \u00b6 @CallSuper open fun onRemoved(): Unit","title":"On removed"},{"location":"api/kohii-core/kohii.v1.core/-bucket/on-removed/#onremoved","text":"@CallSuper open fun onRemoved(): Unit","title":"onRemoved"},{"location":"api/kohii-core/kohii.v1.core/-bucket/remove-container/","text":"kohii-core / kohii.v1.core / Bucket / removeContainer removeContainer \u00b6 @CallSuper open fun removeContainer(container: ViewGroup ): Unit","title":"Remove container"},{"location":"api/kohii-core/kohii.v1.core/-bucket/remove-container/#removecontainer","text":"@CallSuper open fun removeContainer(container: ViewGroup ): Unit","title":"removeContainer"},{"location":"api/kohii-core/kohii.v1.core/-bucket/root/","text":"kohii-core / kohii.v1.core / Bucket / root root \u00b6 open val root: View","title":"Root"},{"location":"api/kohii-core/kohii.v1.core/-bucket/root/#root","text":"open val root: View","title":"root"},{"location":"api/kohii-core/kohii.v1.core/-bucket/select-by-orientation/","text":"kohii-core / kohii.v1.core / Bucket / selectByOrientation selectByOrientation \u00b6 protected fun selectByOrientation(candidates: Collection < Playback >, orientation: Int ): Collection < Playback >","title":"Select by orientation"},{"location":"api/kohii-core/kohii.v1.core/-bucket/select-by-orientation/#selectbyorientation","text":"protected fun selectByOrientation(candidates: Collection < Playback >, orientation: Int ): Collection < Playback >","title":"selectByOrientation"},{"location":"api/kohii-core/kohii.v1.core/-bucket/select-to-play/","text":"kohii-core / kohii.v1.core / Bucket / selectToPlay selectToPlay \u00b6 abstract fun selectToPlay(candidates: Collection < Playback >): Collection < Playback >","title":"Select to play"},{"location":"api/kohii-core/kohii.v1.core/-bucket/select-to-play/#selecttoplay","text":"abstract fun selectToPlay(candidates: Collection < Playback >): Collection < Playback >","title":"selectToPlay"},{"location":"api/kohii-core/kohii.v1.core/-common/","text":"kohii-core / kohii.v1.core / Common Common \u00b6 object Common Properties \u00b6 Name Summary REPEAT_MODE_ALL const val REPEAT_MODE_ALL: Int REPEAT_MODE_GROUP const val REPEAT_MODE_GROUP: Int REPEAT_MODE_OFF const val REPEAT_MODE_OFF: Int REPEAT_MODE_ONE const val REPEAT_MODE_ONE: Int STATE_BUFFERING const val STATE_BUFFERING: Int STATE_ENDED const val STATE_ENDED: Int STATE_IDLE const val STATE_IDLE: Int STATE_READY const val STATE_READY: Int Functions \u00b6 Name Summary getUserAgent fun getUserAgent(context: Context , appName: String ): String","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-common/#common","text":"object Common","title":"Common"},{"location":"api/kohii-core/kohii.v1.core/-common/#properties","text":"Name Summary REPEAT_MODE_ALL const val REPEAT_MODE_ALL: Int REPEAT_MODE_GROUP const val REPEAT_MODE_GROUP: Int REPEAT_MODE_OFF const val REPEAT_MODE_OFF: Int REPEAT_MODE_ONE const val REPEAT_MODE_ONE: Int STATE_BUFFERING const val STATE_BUFFERING: Int STATE_ENDED const val STATE_ENDED: Int STATE_IDLE const val STATE_IDLE: Int STATE_READY const val STATE_READY: Int","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-common/#functions","text":"Name Summary getUserAgent fun getUserAgent(context: Context , appName: String ): String","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-a-l-l/","text":"kohii-core / kohii.v1.core / Common / REPEAT_MODE_ALL REPEAT_MODE_ALL \u00b6 const val REPEAT_MODE_ALL: Int","title":" r e p e a t  m o d e  a l l"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-a-l-l/#repeat_mode_all","text":"const val REPEAT_MODE_ALL: Int","title":"REPEAT_MODE_ALL"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-g-r-o-u-p/","text":"kohii-core / kohii.v1.core / Common / REPEAT_MODE_GROUP REPEAT_MODE_GROUP \u00b6 const val REPEAT_MODE_GROUP: Int","title":" r e p e a t  m o d e  g r o u p"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-g-r-o-u-p/#repeat_mode_group","text":"const val REPEAT_MODE_GROUP: Int","title":"REPEAT_MODE_GROUP"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-o-f-f/","text":"kohii-core / kohii.v1.core / Common / REPEAT_MODE_OFF REPEAT_MODE_OFF \u00b6 const val REPEAT_MODE_OFF: Int","title":" r e p e a t  m o d e  o f f"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-o-f-f/#repeat_mode_off","text":"const val REPEAT_MODE_OFF: Int","title":"REPEAT_MODE_OFF"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-o-n-e/","text":"kohii-core / kohii.v1.core / Common / REPEAT_MODE_ONE REPEAT_MODE_ONE \u00b6 const val REPEAT_MODE_ONE: Int","title":" r e p e a t  m o d e  o n e"},{"location":"api/kohii-core/kohii.v1.core/-common/-r-e-p-e-a-t_-m-o-d-e_-o-n-e/#repeat_mode_one","text":"const val REPEAT_MODE_ONE: Int","title":"REPEAT_MODE_ONE"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-b-u-f-f-e-r-i-n-g/","text":"kohii-core / kohii.v1.core / Common / STATE_BUFFERING STATE_BUFFERING \u00b6 const val STATE_BUFFERING: Int","title":" s t a t e  b u f f e r i n g"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-b-u-f-f-e-r-i-n-g/#state_buffering","text":"const val STATE_BUFFERING: Int","title":"STATE_BUFFERING"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-e-n-d-e-d/","text":"kohii-core / kohii.v1.core / Common / STATE_ENDED STATE_ENDED \u00b6 const val STATE_ENDED: Int","title":" s t a t e  e n d e d"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-e-n-d-e-d/#state_ended","text":"const val STATE_ENDED: Int","title":"STATE_ENDED"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-i-d-l-e/","text":"kohii-core / kohii.v1.core / Common / STATE_IDLE STATE_IDLE \u00b6 const val STATE_IDLE: Int","title":" s t a t e  i d l e"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-i-d-l-e/#state_idle","text":"const val STATE_IDLE: Int","title":"STATE_IDLE"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-r-e-a-d-y/","text":"kohii-core / kohii.v1.core / Common / STATE_READY STATE_READY \u00b6 const val STATE_READY: Int","title":" s t a t e  r e a d y"},{"location":"api/kohii-core/kohii.v1.core/-common/-s-t-a-t-e_-r-e-a-d-y/#state_ready","text":"const val STATE_READY: Int","title":"STATE_READY"},{"location":"api/kohii-core/kohii.v1.core/-common/get-user-agent/","text":"kohii-core / kohii.v1.core / Common / getUserAgent getUserAgent \u00b6 fun getUserAgent(context: Context , appName: String ): String","title":"Get user agent"},{"location":"api/kohii-core/kohii.v1.core/-common/get-user-agent/#getuseragent","text":"fun getUserAgent(context: Context , appName: String ): String","title":"getUserAgent"},{"location":"api/kohii-core/kohii.v1.core/-default-track-selector-holder/","text":"kohii-core / kohii.v1.core / DefaultTrackSelectorHolder DefaultTrackSelectorHolder \u00b6 interface DefaultTrackSelectorHolder Properties \u00b6 Name Summary trackSelector abstract val trackSelector: DefaultTrackSelector","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-default-track-selector-holder/#defaulttrackselectorholder","text":"interface DefaultTrackSelectorHolder","title":"DefaultTrackSelectorHolder"},{"location":"api/kohii-core/kohii.v1.core/-default-track-selector-holder/#properties","text":"Name Summary trackSelector abstract val trackSelector: DefaultTrackSelector","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-default-track-selector-holder/track-selector/","text":"kohii-core / kohii.v1.core / DefaultTrackSelectorHolder / trackSelector trackSelector \u00b6 abstract val trackSelector: DefaultTrackSelector","title":"Track selector"},{"location":"api/kohii-core/kohii.v1.core/-default-track-selector-holder/track-selector/#trackselector","text":"abstract val trackSelector: DefaultTrackSelector","title":"trackSelector"},{"location":"api/kohii-core/kohii.v1.core/-engine/","text":"kohii-core / kohii.v1.core / Engine Engine \u00b6 abstract class Engine<RENDERER : Any > Constructors \u00b6 Name Summary <init> Engine(context: Context , playableCreator: PlayableCreator < RENDERER >) Engine(master: Master , playableCreator: PlayableCreator < RENDERER >) Properties \u00b6 Name Summary master val master: Master playableCreator val playableCreator: PlayableCreator < RENDERER > Functions \u00b6 Name Summary applyVolumeInfo fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit cancel fun cancel(tag: Any ): Unit fun cancel(container: ViewGroup ): Unit cleanUp open fun cleanUp(): Unit lockActivity fun lockActivity(activity: FragmentActivity ): Unit Locks all the Playbacks of a FragmentActivity . The locking Scope is equal to Scope.GROUP . Any call to unlock of smaller Scope (like Scope.MANAGER ) will not unlock the Playbacks. lockBucket fun lockBucket(view: View ): Unit Locks all the Playbacks of a Bucket whose Bucket.root is view . The locking Scope is equal to Scope.BUCKET . Any call to unlock of smaller Scope (like Scope.PLAYBACK ) will not unlock the Playbacks. lockManager fun lockManager(manager: Manager ): Unit Locks all the Playbacks of a Manager . The locking Scope is equal to Scope.MANAGER . Any call to unlock of smaller Scope (like Scope.BUCKET ) will not unlock the Playbacks. lockPlayback fun lockPlayback(playback: Playback ): Unit Locks all the Playbacks of a Playback . The locking Scope is equal to Scope.PLAYBACK . prepare abstract fun prepare(manager: Manager ): Unit register fun register(fragment: Fragment , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager fun register(activity: FragmentActivity , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager setUp fun setUp(media: Media , options: Binder.Options .() -> Unit = {}): Binder fun setUp(uri: Uri , options: Binder.Options .() -> Unit = {}): Binder fun setUp(url: String , options: Binder.Options .() -> Unit = {}): Binder stick fun stick(playback: Playback ): Unit fun stick(lifecycleOwner: LifecycleOwner ): Unit unlockActivity fun unlockActivity(activity: FragmentActivity ): Unit Unlock all the Playbacks of an FragmentActivity . The effective scope is Scope.GROUP . If it was locked by a call to higher Scope like Scope.GLOBAL , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.GROUP : Playback , Bucket , Manager . unlockBucket fun unlockBucket(view: View ): Unit Unlock all the Playbacks of a Bucket whose Bucket.root is view . The effective scope is Scope.BUCKET . If it was locked by a call to higher Scope like Scope.MANAGER , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.BUCKET : Playback . unlockManager fun unlockManager(manager: Manager ): Unit Unlock all the Playbacks of a Manager . The effective scope is Scope.MANAGER . If it was locked by a call to higher Scope like Scope.GROUP , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.MANAGER : Playback , Bucket . unlockPlayback fun unlockPlayback(playback: Playback ): Unit Unlock all the Playbacks of a Playback . The effective scope is Scope.PLAYBACK . If it was locked by a call to higher Scope like Scope.BUCKET , this method does nothing. unstick fun unstick(playback: Playback ): Unit fun unstick(lifecycleOwner: LifecycleOwner ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-engine/#engine","text":"abstract class Engine<RENDERER : Any >","title":"Engine"},{"location":"api/kohii-core/kohii.v1.core/-engine/#constructors","text":"Name Summary <init> Engine(context: Context , playableCreator: PlayableCreator < RENDERER >) Engine(master: Master , playableCreator: PlayableCreator < RENDERER >)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-engine/#properties","text":"Name Summary master val master: Master playableCreator val playableCreator: PlayableCreator < RENDERER >","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-engine/#functions","text":"Name Summary applyVolumeInfo fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit cancel fun cancel(tag: Any ): Unit fun cancel(container: ViewGroup ): Unit cleanUp open fun cleanUp(): Unit lockActivity fun lockActivity(activity: FragmentActivity ): Unit Locks all the Playbacks of a FragmentActivity . The locking Scope is equal to Scope.GROUP . Any call to unlock of smaller Scope (like Scope.MANAGER ) will not unlock the Playbacks. lockBucket fun lockBucket(view: View ): Unit Locks all the Playbacks of a Bucket whose Bucket.root is view . The locking Scope is equal to Scope.BUCKET . Any call to unlock of smaller Scope (like Scope.PLAYBACK ) will not unlock the Playbacks. lockManager fun lockManager(manager: Manager ): Unit Locks all the Playbacks of a Manager . The locking Scope is equal to Scope.MANAGER . Any call to unlock of smaller Scope (like Scope.BUCKET ) will not unlock the Playbacks. lockPlayback fun lockPlayback(playback: Playback ): Unit Locks all the Playbacks of a Playback . The locking Scope is equal to Scope.PLAYBACK . prepare abstract fun prepare(manager: Manager ): Unit register fun register(fragment: Fragment , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager fun register(activity: FragmentActivity , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager setUp fun setUp(media: Media , options: Binder.Options .() -> Unit = {}): Binder fun setUp(uri: Uri , options: Binder.Options .() -> Unit = {}): Binder fun setUp(url: String , options: Binder.Options .() -> Unit = {}): Binder stick fun stick(playback: Playback ): Unit fun stick(lifecycleOwner: LifecycleOwner ): Unit unlockActivity fun unlockActivity(activity: FragmentActivity ): Unit Unlock all the Playbacks of an FragmentActivity . The effective scope is Scope.GROUP . If it was locked by a call to higher Scope like Scope.GLOBAL , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.GROUP : Playback , Bucket , Manager . unlockBucket fun unlockBucket(view: View ): Unit Unlock all the Playbacks of a Bucket whose Bucket.root is view . The effective scope is Scope.BUCKET . If it was locked by a call to higher Scope like Scope.MANAGER , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.BUCKET : Playback . unlockManager fun unlockManager(manager: Manager ): Unit Unlock all the Playbacks of a Manager . The effective scope is Scope.MANAGER . If it was locked by a call to higher Scope like Scope.GROUP , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.MANAGER : Playback , Bucket . unlockPlayback fun unlockPlayback(playback: Playback ): Unit Unlock all the Playbacks of a Playback . The effective scope is Scope.PLAYBACK . If it was locked by a call to higher Scope like Scope.BUCKET , this method does nothing. unstick fun unstick(playback: Playback ): Unit fun unstick(lifecycleOwner: LifecycleOwner ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-engine/-init-/","text":"kohii-core / kohii.v1.core / Engine / <init> <init> \u00b6 Engine(context: Context , playableCreator: PlayableCreator < RENDERER >) Engine(master: Master , playableCreator: PlayableCreator < RENDERER >)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-engine/-init-/#init","text":"Engine(context: Context , playableCreator: PlayableCreator < RENDERER >) Engine(master: Master , playableCreator: PlayableCreator < RENDERER >)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-engine/apply-volume-info/","text":"kohii-core / kohii.v1.core / Engine / applyVolumeInfo applyVolumeInfo \u00b6 fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit See Also Manager.applyVolumeInfo","title":"Apply volume info"},{"location":"api/kohii-core/kohii.v1.core/-engine/apply-volume-info/#applyvolumeinfo","text":"fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit See Also Manager.applyVolumeInfo","title":"applyVolumeInfo"},{"location":"api/kohii-core/kohii.v1.core/-engine/cancel/","text":"kohii-core / kohii.v1.core / Engine / cancel cancel \u00b6 fun cancel(tag: Any ): Unit fun cancel(container: ViewGroup ): Unit","title":"Cancel"},{"location":"api/kohii-core/kohii.v1.core/-engine/cancel/#cancel","text":"fun cancel(tag: Any ): Unit fun cancel(container: ViewGroup ): Unit","title":"cancel"},{"location":"api/kohii-core/kohii.v1.core/-engine/clean-up/","text":"kohii-core / kohii.v1.core / Engine / cleanUp cleanUp \u00b6 @CallSuper open fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-core/kohii.v1.core/-engine/clean-up/#cleanup","text":"@CallSuper open fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-activity/","text":"kohii-core / kohii.v1.core / Engine / lockActivity lockActivity \u00b6 fun lockActivity(activity: FragmentActivity ): Unit Locks all the Playbacks of a FragmentActivity . The locking Scope is equal to Scope.GROUP . Any call to unlock of smaller Scope (like Scope.MANAGER ) will not unlock the Playbacks. See Also Master.lock","title":"Lock activity"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-activity/#lockactivity","text":"fun lockActivity(activity: FragmentActivity ): Unit Locks all the Playbacks of a FragmentActivity . The locking Scope is equal to Scope.GROUP . Any call to unlock of smaller Scope (like Scope.MANAGER ) will not unlock the Playbacks. See Also Master.lock","title":"lockActivity"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-bucket/","text":"kohii-core / kohii.v1.core / Engine / lockBucket lockBucket \u00b6 fun lockBucket(view: View ): Unit Locks all the Playbacks of a Bucket whose Bucket.root is view . The locking Scope is equal to Scope.BUCKET . Any call to unlock of smaller Scope (like Scope.PLAYBACK ) will not unlock the Playbacks. See Also Master.lock","title":"Lock bucket"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-bucket/#lockbucket","text":"fun lockBucket(view: View ): Unit Locks all the Playbacks of a Bucket whose Bucket.root is view . The locking Scope is equal to Scope.BUCKET . Any call to unlock of smaller Scope (like Scope.PLAYBACK ) will not unlock the Playbacks. See Also Master.lock","title":"lockBucket"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-manager/","text":"kohii-core / kohii.v1.core / Engine / lockManager lockManager \u00b6 fun lockManager(manager: Manager ): Unit Locks all the Playbacks of a Manager . The locking Scope is equal to Scope.MANAGER . Any call to unlock of smaller Scope (like Scope.BUCKET ) will not unlock the Playbacks. See Also Master.lock","title":"Lock manager"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-manager/#lockmanager","text":"fun lockManager(manager: Manager ): Unit Locks all the Playbacks of a Manager . The locking Scope is equal to Scope.MANAGER . Any call to unlock of smaller Scope (like Scope.BUCKET ) will not unlock the Playbacks. See Also Master.lock","title":"lockManager"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-playback/","text":"kohii-core / kohii.v1.core / Engine / lockPlayback lockPlayback \u00b6 fun lockPlayback(playback: Playback ): Unit Locks all the Playbacks of a Playback . The locking Scope is equal to Scope.PLAYBACK .","title":"Lock playback"},{"location":"api/kohii-core/kohii.v1.core/-engine/lock-playback/#lockplayback","text":"fun lockPlayback(playback: Playback ): Unit Locks all the Playbacks of a Playback . The locking Scope is equal to Scope.PLAYBACK .","title":"lockPlayback"},{"location":"api/kohii-core/kohii.v1.core/-engine/master/","text":"kohii-core / kohii.v1.core / Engine / master master \u00b6 val master: Master","title":"Master"},{"location":"api/kohii-core/kohii.v1.core/-engine/master/#master","text":"val master: Master","title":"master"},{"location":"api/kohii-core/kohii.v1.core/-engine/playable-creator/","text":"kohii-core / kohii.v1.core / Engine / playableCreator playableCreator \u00b6 val playableCreator: PlayableCreator < RENDERER >","title":"Playable creator"},{"location":"api/kohii-core/kohii.v1.core/-engine/playable-creator/#playablecreator","text":"val playableCreator: PlayableCreator < RENDERER >","title":"playableCreator"},{"location":"api/kohii-core/kohii.v1.core/-engine/prepare/","text":"kohii-core / kohii.v1.core / Engine / prepare prepare \u00b6 abstract fun prepare(manager: Manager ): Unit","title":"Prepare"},{"location":"api/kohii-core/kohii.v1.core/-engine/prepare/#prepare","text":"abstract fun prepare(manager: Manager ): Unit","title":"prepare"},{"location":"api/kohii-core/kohii.v1.core/-engine/register/","text":"kohii-core / kohii.v1.core / Engine / register register \u00b6 @JvmOverloads fun register(fragment: Fragment , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager @JvmOverloads fun register(activity: FragmentActivity , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager","title":"Register"},{"location":"api/kohii-core/kohii.v1.core/-engine/register/#register","text":"@JvmOverloads fun register(fragment: Fragment , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager @JvmOverloads fun register(activity: FragmentActivity , memoryMode: MemoryMode = LOW, activeLifecycleState: State = STARTED): Manager","title":"register"},{"location":"api/kohii-core/kohii.v1.core/-engine/set-up/","text":"kohii-core / kohii.v1.core / Engine / setUp setUp \u00b6 @JvmOverloads inline fun setUp(media: Media , crossinline options: Binder.Options .() -> Unit = {}): Binder @JvmOverloads inline fun setUp(uri: Uri , crossinline options: Binder.Options .() -> Unit = {}): Binder @JvmOverloads inline fun setUp(url: String , crossinline options: Binder.Options .() -> Unit = {}): Binder","title":"Set up"},{"location":"api/kohii-core/kohii.v1.core/-engine/set-up/#setup","text":"@JvmOverloads inline fun setUp(media: Media , crossinline options: Binder.Options .() -> Unit = {}): Binder @JvmOverloads inline fun setUp(uri: Uri , crossinline options: Binder.Options .() -> Unit = {}): Binder @JvmOverloads inline fun setUp(url: String , crossinline options: Binder.Options .() -> Unit = {}): Binder","title":"setUp"},{"location":"api/kohii-core/kohii.v1.core/-engine/stick/","text":"kohii-core / kohii.v1.core / Engine / stick stick \u00b6 fun stick(playback: Playback ): Unit fun stick(lifecycleOwner: LifecycleOwner ): Unit","title":"Stick"},{"location":"api/kohii-core/kohii.v1.core/-engine/stick/#stick","text":"fun stick(playback: Playback ): Unit fun stick(lifecycleOwner: LifecycleOwner ): Unit","title":"stick"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-activity/","text":"kohii-core / kohii.v1.core / Engine / unlockActivity unlockActivity \u00b6 fun unlockActivity(activity: FragmentActivity ): Unit Unlock all the Playbacks of an FragmentActivity . The effective scope is Scope.GROUP . If it was locked by a call to higher Scope like Scope.GLOBAL , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.GROUP : Playback , Bucket , Manager .","title":"Unlock activity"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-activity/#unlockactivity","text":"fun unlockActivity(activity: FragmentActivity ): Unit Unlock all the Playbacks of an FragmentActivity . The effective scope is Scope.GROUP . If it was locked by a call to higher Scope like Scope.GLOBAL , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.GROUP : Playback , Bucket , Manager .","title":"unlockActivity"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-bucket/","text":"kohii-core / kohii.v1.core / Engine / unlockBucket unlockBucket \u00b6 fun unlockBucket(view: View ): Unit Unlock all the Playbacks of a Bucket whose Bucket.root is view . The effective scope is Scope.BUCKET . If it was locked by a call to higher Scope like Scope.MANAGER , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.BUCKET : Playback .","title":"Unlock bucket"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-bucket/#unlockbucket","text":"fun unlockBucket(view: View ): Unit Unlock all the Playbacks of a Bucket whose Bucket.root is view . The effective scope is Scope.BUCKET . If it was locked by a call to higher Scope like Scope.MANAGER , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.BUCKET : Playback .","title":"unlockBucket"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-manager/","text":"kohii-core / kohii.v1.core / Engine / unlockManager unlockManager \u00b6 fun unlockManager(manager: Manager ): Unit Unlock all the Playbacks of a Manager . The effective scope is Scope.MANAGER . If it was locked by a call to higher Scope like Scope.GROUP , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.MANAGER : Playback , Bucket .","title":"Unlock manager"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-manager/#unlockmanager","text":"fun unlockManager(manager: Manager ): Unit Unlock all the Playbacks of a Manager . The effective scope is Scope.MANAGER . If it was locked by a call to higher Scope like Scope.GROUP , this method does nothing. Once unlocked, it will unlock all locked objects within Scope.MANAGER : Playback , Bucket .","title":"unlockManager"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-playback/","text":"kohii-core / kohii.v1.core / Engine / unlockPlayback unlockPlayback \u00b6 fun unlockPlayback(playback: Playback ): Unit Unlock all the Playbacks of a Playback . The effective scope is Scope.PLAYBACK . If it was locked by a call to higher Scope like Scope.BUCKET , this method does nothing.","title":"Unlock playback"},{"location":"api/kohii-core/kohii.v1.core/-engine/unlock-playback/#unlockplayback","text":"fun unlockPlayback(playback: Playback ): Unit Unlock all the Playbacks of a Playback . The effective scope is Scope.PLAYBACK . If it was locked by a call to higher Scope like Scope.BUCKET , this method does nothing.","title":"unlockPlayback"},{"location":"api/kohii-core/kohii.v1.core/-engine/unstick/","text":"kohii-core / kohii.v1.core / Engine / unstick unstick \u00b6 fun unstick(playback: Playback ): Unit fun unstick(lifecycleOwner: LifecycleOwner ): Unit","title":"Unstick"},{"location":"api/kohii-core/kohii.v1.core/-engine/unstick/#unstick","text":"fun unstick(playback: Playback ): Unit fun unstick(lifecycleOwner: LifecycleOwner ): Unit","title":"unstick"},{"location":"api/kohii-core/kohii.v1.core/-error-listener/","text":"kohii-core / kohii.v1.core / ErrorListener ErrorListener \u00b6 interface ErrorListener Functions \u00b6 Name Summary onError abstract fun onError(error: Exception ): Unit Inheritors \u00b6 Name Summary ErrorListeners class ErrorListeners : CopyOnWriteArraySet < ErrorListener >, ErrorListener Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed.","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-error-listener/#errorlistener","text":"interface ErrorListener","title":"ErrorListener"},{"location":"api/kohii-core/kohii.v1.core/-error-listener/#functions","text":"Name Summary onError abstract fun onError(error: Exception ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-error-listener/#inheritors","text":"Name Summary ErrorListeners class ErrorListeners : CopyOnWriteArraySet < ErrorListener >, ErrorListener Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed.","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-error-listener/on-error/","text":"kohii-core / kohii.v1.core / ErrorListener / onError onError \u00b6 abstract fun onError(error: Exception ): Unit","title":"On error"},{"location":"api/kohii-core/kohii.v1.core/-error-listener/on-error/#onerror","text":"abstract fun onError(error: Exception ): Unit","title":"onError"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/","text":"kohii-core / kohii.v1.core / ErrorListeners ErrorListeners \u00b6 class ErrorListeners : CopyOnWriteArraySet < ErrorListener >, ErrorListener Constructors \u00b6 Name Summary <init> ErrorListeners() Functions \u00b6 Name Summary onError fun onError(error: Exception ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/#errorlisteners","text":"class ErrorListeners : CopyOnWriteArraySet < ErrorListener >, ErrorListener","title":"ErrorListeners"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/#constructors","text":"Name Summary <init> ErrorListeners()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/#functions","text":"Name Summary onError fun onError(error: Exception ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/-init-/","text":"kohii-core / kohii.v1.core / ErrorListeners / <init> <init> \u00b6 ErrorListeners()","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/-init-/#init","text":"ErrorListeners()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/on-error/","text":"kohii-core / kohii.v1.core / ErrorListeners / onError onError \u00b6 fun onError(error: Exception ): Unit Overrides ErrorListener.onError","title":"On error"},{"location":"api/kohii-core/kohii.v1.core/-error-listeners/on-error/#onerror","text":"fun onError(error: Exception ): Unit Overrides ErrorListener.onError","title":"onError"},{"location":"api/kohii-core/kohii.v1.core/-group/","text":"kohii-core / kohii.v1.core / Group Group \u00b6 class Group : DefaultLifecycleObserver , LifecycleEventObserver , Callback Constructors \u00b6 Name Summary <init> Group(master: Master , activity: FragmentActivity ) Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean handleMessage fun handleMessage(msg: Message ): Boolean hashCode fun hashCode(): Int onCreate fun onCreate(owner: LifecycleOwner ): Unit onDestroy fun onDestroy(owner: LifecycleOwner ): Unit onStart fun onStart(owner: LifecycleOwner ): Unit onStateChanged fun onStateChanged(source: LifecycleOwner , event: Event ): Unit onStop fun onStop(owner: LifecycleOwner ): Unit Companion Object Properties \u00b6 Name Summary DELAY const val DELAY: Long MSG_REFRESH const val MSG_REFRESH: Int","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-group/#group","text":"class Group : DefaultLifecycleObserver , LifecycleEventObserver , Callback","title":"Group"},{"location":"api/kohii-core/kohii.v1.core/-group/#constructors","text":"Name Summary <init> Group(master: Master , activity: FragmentActivity )","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-group/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean handleMessage fun handleMessage(msg: Message ): Boolean hashCode fun hashCode(): Int onCreate fun onCreate(owner: LifecycleOwner ): Unit onDestroy fun onDestroy(owner: LifecycleOwner ): Unit onStart fun onStart(owner: LifecycleOwner ): Unit onStateChanged fun onStateChanged(source: LifecycleOwner , event: Event ): Unit onStop fun onStop(owner: LifecycleOwner ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-group/#companion-object-properties","text":"Name Summary DELAY const val DELAY: Long MSG_REFRESH const val MSG_REFRESH: Int","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.core/-group/-d-e-l-a-y/","text":"kohii-core / kohii.v1.core / Group / DELAY DELAY \u00b6 const val DELAY: Long","title":" d e l a y"},{"location":"api/kohii-core/kohii.v1.core/-group/-d-e-l-a-y/#delay","text":"const val DELAY: Long","title":"DELAY"},{"location":"api/kohii-core/kohii.v1.core/-group/-init-/","text":"kohii-core / kohii.v1.core / Group / <init> <init> \u00b6 Group(master: Master , activity: FragmentActivity )","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-group/-init-/#init","text":"Group(master: Master , activity: FragmentActivity )","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-group/-m-s-g_-r-e-f-r-e-s-h/","text":"kohii-core / kohii.v1.core / Group / MSG_REFRESH MSG_REFRESH \u00b6 const val MSG_REFRESH: Int","title":" m s g  r e f r e s h"},{"location":"api/kohii-core/kohii.v1.core/-group/-m-s-g_-r-e-f-r-e-s-h/#msg_refresh","text":"const val MSG_REFRESH: Int","title":"MSG_REFRESH"},{"location":"api/kohii-core/kohii.v1.core/-group/equals/","text":"kohii-core / kohii.v1.core / Group / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/kohii-core/kohii.v1.core/-group/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/kohii-core/kohii.v1.core/-group/handle-message/","text":"kohii-core / kohii.v1.core / Group / handleMessage handleMessage \u00b6 fun handleMessage(msg: Message ): Boolean","title":"Handle message"},{"location":"api/kohii-core/kohii.v1.core/-group/handle-message/#handlemessage","text":"fun handleMessage(msg: Message ): Boolean","title":"handleMessage"},{"location":"api/kohii-core/kohii.v1.core/-group/hash-code/","text":"kohii-core / kohii.v1.core / Group / hashCode hashCode \u00b6 fun hashCode(): Int","title":"Hash code"},{"location":"api/kohii-core/kohii.v1.core/-group/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/kohii-core/kohii.v1.core/-group/on-create/","text":"kohii-core / kohii.v1.core / Group / onCreate onCreate \u00b6 fun onCreate(owner: LifecycleOwner ): Unit","title":"On create"},{"location":"api/kohii-core/kohii.v1.core/-group/on-create/#oncreate","text":"fun onCreate(owner: LifecycleOwner ): Unit","title":"onCreate"},{"location":"api/kohii-core/kohii.v1.core/-group/on-destroy/","text":"kohii-core / kohii.v1.core / Group / onDestroy onDestroy \u00b6 fun onDestroy(owner: LifecycleOwner ): Unit","title":"On destroy"},{"location":"api/kohii-core/kohii.v1.core/-group/on-destroy/#ondestroy","text":"fun onDestroy(owner: LifecycleOwner ): Unit","title":"onDestroy"},{"location":"api/kohii-core/kohii.v1.core/-group/on-start/","text":"kohii-core / kohii.v1.core / Group / onStart onStart \u00b6 fun onStart(owner: LifecycleOwner ): Unit","title":"On start"},{"location":"api/kohii-core/kohii.v1.core/-group/on-start/#onstart","text":"fun onStart(owner: LifecycleOwner ): Unit","title":"onStart"},{"location":"api/kohii-core/kohii.v1.core/-group/on-state-changed/","text":"kohii-core / kohii.v1.core / Group / onStateChanged onStateChanged \u00b6 fun onStateChanged(source: LifecycleOwner , event: Event ): Unit","title":"On state changed"},{"location":"api/kohii-core/kohii.v1.core/-group/on-state-changed/#onstatechanged","text":"fun onStateChanged(source: LifecycleOwner , event: Event ): Unit","title":"onStateChanged"},{"location":"api/kohii-core/kohii.v1.core/-group/on-stop/","text":"kohii-core / kohii.v1.core / Group / onStop onStop \u00b6 fun onStop(owner: LifecycleOwner ): Unit","title":"On stop"},{"location":"api/kohii-core/kohii.v1.core/-group/on-stop/#onstop","text":"fun onStop(owner: LifecycleOwner ): Unit","title":"onStop"},{"location":"api/kohii-core/kohii.v1.core/-manager/","text":"kohii-core / kohii.v1.core / Manager Manager \u00b6 class Manager : PlayableManager , DefaultLifecycleObserver , LifecycleEventObserver , Comparable < Manager > Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. Creating a Manager can be done as below: // Currently we are in the scope of a Fragment's onViewCreated. val engine = // Get an Engine instance. val manager = engine . register ( this ) Parameters \u00b6 memoryMode - The MemoryMode used in this Manager. activeLifecycleState - the minimum Lifecycle.State where the Playback can be playing. Types \u00b6 Name Summary OnSelectionListener interface OnSelectionListener Properties \u00b6 Name Summary host val host: Any Functions \u00b6 Name Summary addBucket fun addBucket(view: View , strategy: Strategy = SINGLE_PLAYER, selector: Selector = SINGLE_PLAYER): Manager applyVolumeInfo fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit Apply a specific VolumeInfo to all Playbacks in a Scope . compareTo fun compareTo(other: Manager ): Int observe fun observe(mediaTag: Any , observer: PlayableObserver ): Boolean Observe to the changes of Playable 's Playback by its tag. onDestroy fun onDestroy(owner: LifecycleOwner ): Unit onStart fun onStart(owner: LifecycleOwner ): Unit onStateChanged fun onStateChanged(source: LifecycleOwner , event: Event ): Unit onStop fun onStop(owner: LifecycleOwner ): Unit pause fun pause(playable: Playable ): Unit play fun play(playable: Playable ): Unit registerRendererProvider fun registerRendererProvider(type: Class <*>, provider: RendererProvider ): Unit removeBucket fun removeBucket(vararg views: View ): Manager","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-manager/#manager","text":"class Manager : PlayableManager , DefaultLifecycleObserver , LifecycleEventObserver , Comparable < Manager > Manager is a component designed to manage a Fragment or an Activity which contains *bigView*s like RecyclerView or ViewPager. Manager creates and manages Buckets for Views on demand. You only need to create Bucket for the View whose manages Videos. For example, your app has 2 RecyclerViews A and B, but only B contains Videos. You can ask the Manager to create and manage a Bucket for the RecyclerView B only. That way, the library doesn't need to observe and handle the changes of the RecyclerView A. Creating a Manager can be done as below: // Currently we are in the scope of a Fragment's onViewCreated. val engine = // Get an Engine instance. val manager = engine . register ( this )","title":"Manager"},{"location":"api/kohii-core/kohii.v1.core/-manager/#parameters","text":"memoryMode - The MemoryMode used in this Manager. activeLifecycleState - the minimum Lifecycle.State where the Playback can be playing.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-manager/#types","text":"Name Summary OnSelectionListener interface OnSelectionListener","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/-manager/#properties","text":"Name Summary host val host: Any","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-manager/#functions","text":"Name Summary addBucket fun addBucket(view: View , strategy: Strategy = SINGLE_PLAYER, selector: Selector = SINGLE_PLAYER): Manager applyVolumeInfo fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit Apply a specific VolumeInfo to all Playbacks in a Scope . compareTo fun compareTo(other: Manager ): Int observe fun observe(mediaTag: Any , observer: PlayableObserver ): Boolean Observe to the changes of Playable 's Playback by its tag. onDestroy fun onDestroy(owner: LifecycleOwner ): Unit onStart fun onStart(owner: LifecycleOwner ): Unit onStateChanged fun onStateChanged(source: LifecycleOwner , event: Event ): Unit onStop fun onStop(owner: LifecycleOwner ): Unit pause fun pause(playable: Playable ): Unit play fun play(playable: Playable ): Unit registerRendererProvider fun registerRendererProvider(type: Class <*>, provider: RendererProvider ): Unit removeBucket fun removeBucket(vararg views: View ): Manager","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-manager/add-bucket/","text":"kohii-core / kohii.v1.core / Manager / addBucket addBucket \u00b6 @JvmOverloads fun addBucket(view: View , strategy: Strategy = SINGLE_PLAYER, selector: Selector = SINGLE_PLAYER): Manager","title":"Add bucket"},{"location":"api/kohii-core/kohii.v1.core/-manager/add-bucket/#addbucket","text":"@JvmOverloads fun addBucket(view: View , strategy: Strategy = SINGLE_PLAYER, selector: Selector = SINGLE_PLAYER): Manager","title":"addBucket"},{"location":"api/kohii-core/kohii.v1.core/-manager/apply-volume-info/","text":"kohii-core / kohii.v1.core / Manager / applyVolumeInfo applyVolumeInfo \u00b6 fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit Apply a specific VolumeInfo to all Playbacks in a Scope . The smaller a scope's priority is, the wider applicable range it will be. Applying new VolumeInfo to smaller Scope will change VolumeInfo of Playbacks in that Scope . If the Scope is from Scope.BUCKET , any new Playback added to that Bucket will be configured with the updated VolumeInfo . Parameters \u00b6 target - is the container to apply new VolumeInfo to. This must be set together with the Scope . For example, if client wants to apply the VolumeInfo to Scope.PLAYBACK , the receiver must be the Playback to apply to. If client wants to apply to Scope.BUCKET , the receiver must be either the Playback inside that Bucket , or the root object of a Bucket .","title":"Apply volume info"},{"location":"api/kohii-core/kohii.v1.core/-manager/apply-volume-info/#applyvolumeinfo","text":"fun applyVolumeInfo(volumeInfo: VolumeInfo , target: Any , scope: Scope ): Unit Apply a specific VolumeInfo to all Playbacks in a Scope . The smaller a scope's priority is, the wider applicable range it will be. Applying new VolumeInfo to smaller Scope will change VolumeInfo of Playbacks in that Scope . If the Scope is from Scope.BUCKET , any new Playback added to that Bucket will be configured with the updated VolumeInfo .","title":"applyVolumeInfo"},{"location":"api/kohii-core/kohii.v1.core/-manager/apply-volume-info/#parameters","text":"target - is the container to apply new VolumeInfo to. This must be set together with the Scope . For example, if client wants to apply the VolumeInfo to Scope.PLAYBACK , the receiver must be the Playback to apply to. If client wants to apply to Scope.BUCKET , the receiver must be either the Playback inside that Bucket , or the root object of a Bucket .","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-manager/compare-to/","text":"kohii-core / kohii.v1.core / Manager / compareTo compareTo \u00b6 fun compareTo(other: Manager ): Int","title":"Compare to"},{"location":"api/kohii-core/kohii.v1.core/-manager/compare-to/#compareto","text":"fun compareTo(other: Manager ): Int","title":"compareTo"},{"location":"api/kohii-core/kohii.v1.core/-manager/host/","text":"kohii-core / kohii.v1.core / Manager / host host \u00b6 val host: Any","title":"Host"},{"location":"api/kohii-core/kohii.v1.core/-manager/host/#host","text":"val host: Any","title":"host"},{"location":"api/kohii-core/kohii.v1.core/-manager/observe/","text":"kohii-core / kohii.v1.core / Manager / observe observe \u00b6 fun observe(mediaTag: Any , observer: PlayableObserver ): Boolean Observe to the changes of Playable 's Playback by its tag. Parameters \u00b6 mediaTag - tag of the Playable to observe, must not be Master.NO_TAG . observer - the PlayableObserver to be notified about the change. Return true if the observer is registered, false otherwise.","title":"Observe"},{"location":"api/kohii-core/kohii.v1.core/-manager/observe/#observe","text":"fun observe(mediaTag: Any , observer: PlayableObserver ): Boolean Observe to the changes of Playable 's Playback by its tag.","title":"observe"},{"location":"api/kohii-core/kohii.v1.core/-manager/observe/#parameters","text":"mediaTag - tag of the Playable to observe, must not be Master.NO_TAG . observer - the PlayableObserver to be notified about the change. Return true if the observer is registered, false otherwise.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-destroy/","text":"kohii-core / kohii.v1.core / Manager / onDestroy onDestroy \u00b6 fun onDestroy(owner: LifecycleOwner ): Unit","title":"On destroy"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-destroy/#ondestroy","text":"fun onDestroy(owner: LifecycleOwner ): Unit","title":"onDestroy"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-start/","text":"kohii-core / kohii.v1.core / Manager / onStart onStart \u00b6 fun onStart(owner: LifecycleOwner ): Unit","title":"On start"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-start/#onstart","text":"fun onStart(owner: LifecycleOwner ): Unit","title":"onStart"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-state-changed/","text":"kohii-core / kohii.v1.core / Manager / onStateChanged onStateChanged \u00b6 fun onStateChanged(source: LifecycleOwner , event: Event ): Unit","title":"On state changed"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-state-changed/#onstatechanged","text":"fun onStateChanged(source: LifecycleOwner , event: Event ): Unit","title":"onStateChanged"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-stop/","text":"kohii-core / kohii.v1.core / Manager / onStop onStop \u00b6 fun onStop(owner: LifecycleOwner ): Unit","title":"On stop"},{"location":"api/kohii-core/kohii.v1.core/-manager/on-stop/#onstop","text":"fun onStop(owner: LifecycleOwner ): Unit","title":"onStop"},{"location":"api/kohii-core/kohii.v1.core/-manager/pause/","text":"kohii-core / kohii.v1.core / Manager / pause pause \u00b6 fun pause(playable: Playable ): Unit","title":"Pause"},{"location":"api/kohii-core/kohii.v1.core/-manager/pause/#pause","text":"fun pause(playable: Playable ): Unit","title":"pause"},{"location":"api/kohii-core/kohii.v1.core/-manager/play/","text":"kohii-core / kohii.v1.core / Manager / play play \u00b6 fun play(playable: Playable ): Unit","title":"Play"},{"location":"api/kohii-core/kohii.v1.core/-manager/play/#play","text":"fun play(playable: Playable ): Unit","title":"play"},{"location":"api/kohii-core/kohii.v1.core/-manager/register-renderer-provider/","text":"kohii-core / kohii.v1.core / Manager / registerRendererProvider registerRendererProvider \u00b6 fun registerRendererProvider(type: Class <*>, provider: RendererProvider ): Unit","title":"Register renderer provider"},{"location":"api/kohii-core/kohii.v1.core/-manager/register-renderer-provider/#registerrendererprovider","text":"fun registerRendererProvider(type: Class <*>, provider: RendererProvider ): Unit","title":"registerRendererProvider"},{"location":"api/kohii-core/kohii.v1.core/-manager/remove-bucket/","text":"kohii-core / kohii.v1.core / Manager / removeBucket removeBucket \u00b6 fun removeBucket(vararg views: View ): Manager","title":"Remove bucket"},{"location":"api/kohii-core/kohii.v1.core/-manager/remove-bucket/#removebucket","text":"fun removeBucket(vararg views: View ): Manager","title":"removeBucket"},{"location":"api/kohii-core/kohii.v1.core/-manager/-on-selection-listener/","text":"kohii-core / kohii.v1.core / Manager / OnSelectionListener OnSelectionListener \u00b6 interface OnSelectionListener Functions \u00b6 Name Summary onSelection abstract fun onSelection(selection: Collection < Playback >): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-manager/-on-selection-listener/#onselectionlistener","text":"interface OnSelectionListener","title":"OnSelectionListener"},{"location":"api/kohii-core/kohii.v1.core/-manager/-on-selection-listener/#functions","text":"Name Summary onSelection abstract fun onSelection(selection: Collection < Playback >): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-manager/-on-selection-listener/on-selection/","text":"kohii-core / kohii.v1.core / Manager / OnSelectionListener / onSelection onSelection \u00b6 abstract fun onSelection(selection: Collection < Playback >): Unit","title":"On selection"},{"location":"api/kohii-core/kohii.v1.core/-manager/-on-selection-listener/on-selection/#onselection","text":"abstract fun onSelection(selection: Collection < Playback >): Unit","title":"onSelection"},{"location":"api/kohii-core/kohii.v1.core/-master/","text":"kohii-core / kohii.v1.core / Master Master \u00b6 class Master : PlayableManager Properties \u00b6 Name Summary app val app: Application Functions \u00b6 Name Summary lock fun lock(): Unit Globally lock the behavior. registerEngine fun registerEngine(engine: Engine <*>): Unit unlock fun unlock(): Unit Globally unlock the behavior. Companion Object Functions \u00b6 Name Summary get operator fun get(context: Context ): Master","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-master/#master","text":"class Master : PlayableManager","title":"Master"},{"location":"api/kohii-core/kohii.v1.core/-master/#properties","text":"Name Summary app val app: Application","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-master/#functions","text":"Name Summary lock fun lock(): Unit Globally lock the behavior. registerEngine fun registerEngine(engine: Engine <*>): Unit unlock fun unlock(): Unit Globally unlock the behavior.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-master/#companion-object-functions","text":"Name Summary get operator fun get(context: Context ): Master","title":"Companion Object Functions"},{"location":"api/kohii-core/kohii.v1.core/-master/app/","text":"kohii-core / kohii.v1.core / Master / app app \u00b6 val app: Application","title":"App"},{"location":"api/kohii-core/kohii.v1.core/-master/app/#app","text":"val app: Application","title":"app"},{"location":"api/kohii-core/kohii.v1.core/-master/get/","text":"kohii-core / kohii.v1.core / Master / get get \u00b6 @JvmStatic operator fun get(context: Context ): Master","title":"Get"},{"location":"api/kohii-core/kohii.v1.core/-master/get/#get","text":"@JvmStatic operator fun get(context: Context ): Master","title":"get"},{"location":"api/kohii-core/kohii.v1.core/-master/lock/","text":"kohii-core / kohii.v1.core / Master / lock lock \u00b6 fun lock(): Unit Globally lock the behavior.","title":"Lock"},{"location":"api/kohii-core/kohii.v1.core/-master/lock/#lock","text":"fun lock(): Unit Globally lock the behavior.","title":"lock"},{"location":"api/kohii-core/kohii.v1.core/-master/register-engine/","text":"kohii-core / kohii.v1.core / Master / registerEngine registerEngine \u00b6 fun registerEngine(engine: Engine <*>): Unit","title":"Register engine"},{"location":"api/kohii-core/kohii.v1.core/-master/register-engine/#registerengine","text":"fun registerEngine(engine: Engine <*>): Unit","title":"registerEngine"},{"location":"api/kohii-core/kohii.v1.core/-master/unlock/","text":"kohii-core / kohii.v1.core / Master / unlock unlock \u00b6 fun unlock(): Unit Globally unlock the behavior.","title":"Unlock"},{"location":"api/kohii-core/kohii.v1.core/-master/unlock/#unlock","text":"fun unlock(): Unit Globally unlock the behavior.","title":"unlock"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/","text":"kohii-core / kohii.v1.core / MemoryMode MemoryMode \u00b6 enum class MemoryMode Enum Values \u00b6 Name Summary AUTO In AUTO mode, Kohii will judge the preferred memory situation using Master.preferredMemoryMode method. LOW In LOW mode, Kohii will always release resource of unselected Playables/Playbacks (whose priority are >= 1). NORMAL In NORMAL mode, Kohii will only reset the Playables/Playbacks whose distance to selected ones are 1 (so 'next to' selected ones). Others will be released. BALANCED In BALANCED mode, the release behavior is the same with 'NORMAL' mode, but unselected Playables/Playbacks will not be reset. HIGH HIGH mode must be specified by client. INFINITE \"For the bravest only\"","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/#memorymode","text":"enum class MemoryMode","title":"MemoryMode"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/#enum-values","text":"Name Summary AUTO In AUTO mode, Kohii will judge the preferred memory situation using Master.preferredMemoryMode method. LOW In LOW mode, Kohii will always release resource of unselected Playables/Playbacks (whose priority are >= 1). NORMAL In NORMAL mode, Kohii will only reset the Playables/Playbacks whose distance to selected ones are 1 (so 'next to' selected ones). Others will be released. BALANCED In BALANCED mode, the release behavior is the same with 'NORMAL' mode, but unselected Playables/Playbacks will not be reset. HIGH HIGH mode must be specified by client. INFINITE \"For the bravest only\"","title":"Enum Values"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-a-u-t-o/","text":"kohii-core / kohii.v1.core / MemoryMode / AUTO AUTO \u00b6 AUTO In AUTO mode, Kohii will judge the preferred memory situation using Master.preferredMemoryMode method.","title":" a u t o"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-a-u-t-o/#auto","text":"AUTO In AUTO mode, Kohii will judge the preferred memory situation using Master.preferredMemoryMode method.","title":"AUTO"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-b-a-l-a-n-c-e-d/","text":"kohii-core / kohii.v1.core / MemoryMode / BALANCED BALANCED \u00b6 BALANCED In BALANCED mode, the release behavior is the same with 'NORMAL' mode, but unselected Playables/Playbacks will not be reset.","title":" b a l a n c e d"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-b-a-l-a-n-c-e-d/#balanced","text":"BALANCED In BALANCED mode, the release behavior is the same with 'NORMAL' mode, but unselected Playables/Playbacks will not be reset.","title":"BALANCED"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-h-i-g-h/","text":"kohii-core / kohii.v1.core / MemoryMode / HIGH HIGH \u00b6 HIGH HIGH mode must be specified by client. In HIGH mode, any unselected Playables/Playbacks whose priorities are less than 8 will be reset. Others will be released. This mode is memory-intensive and can be used in many-videos-yet-low-memory-usage scenario like simple/short Videos.","title":" h i g h"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-h-i-g-h/#high","text":"HIGH HIGH mode must be specified by client. In HIGH mode, any unselected Playables/Playbacks whose priorities are less than 8 will be reset. Others will be released. This mode is memory-intensive and can be used in many-videos-yet-low-memory-usage scenario like simple/short Videos.","title":"HIGH"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-i-n-f-i-n-i-t-e/","text":"kohii-core / kohii.v1.core / MemoryMode / INFINITE INFINITE \u00b6 INFINITE \"For the bravest only\" INFINITE mode must be specified by client. In INFINITE mode, no unselected Playables/Playbacks will ever be released due to priority change (though Kohii will release the resource once they are inactive).","title":" i n f i n i t e"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-i-n-f-i-n-i-t-e/#infinite","text":"INFINITE \"For the bravest only\" INFINITE mode must be specified by client. In INFINITE mode, no unselected Playables/Playbacks will ever be released due to priority change (though Kohii will release the resource once they are inactive).","title":"INFINITE"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-l-o-w/","text":"kohii-core / kohii.v1.core / MemoryMode / LOW LOW \u00b6 LOW In LOW mode, Kohii will always release resource of unselected Playables/Playbacks (whose priority are >= 1).","title":" l o w"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-l-o-w/#low","text":"LOW In LOW mode, Kohii will always release resource of unselected Playables/Playbacks (whose priority are >= 1).","title":"LOW"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-n-o-r-m-a-l/","text":"kohii-core / kohii.v1.core / MemoryMode / NORMAL NORMAL \u00b6 NORMAL In NORMAL mode, Kohii will only reset the Playables/Playbacks whose distance to selected ones are 1 (so 'next to' selected ones). Others will be released.","title":" n o r m a l"},{"location":"api/kohii-core/kohii.v1.core/-memory-mode/-n-o-r-m-a-l/#normal","text":"NORMAL In NORMAL mode, Kohii will only reset the Playables/Playbacks whose distance to selected ones are 1 (so 'next to' selected ones). Others will be released.","title":"NORMAL"},{"location":"api/kohii-core/kohii.v1.core/-playable/","text":"kohii-core / kohii.v1.core / Playable Playable \u00b6 abstract class Playable A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . An implementation of Playable must take into account about the following points: A Playable is managed at application scope. So it must not retain any reference to narrower scope like androidx.fragment.app.Fragment or android.app.Activity . A Playable must acknowledge about configuration changes. It must return a correct value from onConfigChange so that the system can provide proper resource management. For example if any of its resource needs to be reset at configuration change, its onConfigChange method must return false . AbstractPlayable is a base implementation that leverage actual playback logic to a Bridge . See Also AbstractPlayable AbstractBridge PlayableCreator Engine Types \u00b6 Name Summary Config data class Config Constructors \u00b6 Name Summary <init> Playable(media: Media , config: Playable.Config ) A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . Properties \u00b6 Name Summary media val media: Media renderer abstract var renderer: Any ? tag abstract val tag: Any Functions \u00b6 Name Summary isPlaying abstract fun isPlaying(): Boolean onConfigChange abstract fun onConfigChange(): Boolean Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly. onPause abstract fun onPause(): Unit onPlay abstract fun onPlay(): Unit onPrepare abstract fun onPrepare(loadSource: Boolean ): Unit onReady abstract fun onReady(): Unit onRelease abstract fun onRelease(): Unit onReset abstract fun onReset(): Unit onUnbind abstract fun onUnbind(playback: Playback ): Unit setupRenderer abstract fun setupRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: teardownRenderer abstract fun teardownRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: Inheritors \u00b6 Name Summary AbstractPlayable abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playable/#playable","text":"abstract class Playable A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . An implementation of Playable must take into account about the following points: A Playable is managed at application scope. So it must not retain any reference to narrower scope like androidx.fragment.app.Fragment or android.app.Activity . A Playable must acknowledge about configuration changes. It must return a correct value from onConfigChange so that the system can provide proper resource management. For example if any of its resource needs to be reset at configuration change, its onConfigChange method must return false . AbstractPlayable is a base implementation that leverage actual playback logic to a Bridge . See Also AbstractPlayable AbstractBridge PlayableCreator Engine","title":"Playable"},{"location":"api/kohii-core/kohii.v1.core/-playable/#types","text":"Name Summary Config data class Config","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/-playable/#constructors","text":"Name Summary <init> Playable(media: Media , config: Playable.Config ) A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator .","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-playable/#properties","text":"Name Summary media val media: Media renderer abstract var renderer: Any ? tag abstract val tag: Any","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-playable/#functions","text":"Name Summary isPlaying abstract fun isPlaying(): Boolean onConfigChange abstract fun onConfigChange(): Boolean Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly. onPause abstract fun onPause(): Unit onPlay abstract fun onPlay(): Unit onPrepare abstract fun onPrepare(loadSource: Boolean ): Unit onReady abstract fun onReady(): Unit onRelease abstract fun onRelease(): Unit onReset abstract fun onReset(): Unit onUnbind abstract fun onUnbind(playback: Playback ): Unit setupRenderer abstract fun setupRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: teardownRenderer abstract fun teardownRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases:","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playable/#inheritors","text":"Name Summary AbstractPlayable abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-playable/-init-/","text":"kohii-core / kohii.v1.core / Playable / <init> <init> \u00b6 Playable(media: Media , config: Playable.Config ) A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . An implementation of Playable must take into account about the following points: A Playable is managed at application scope. So it must not retain any reference to narrower scope like androidx.fragment.app.Fragment or android.app.Activity . A Playable must acknowledge about configuration changes. It must return a correct value from onConfigChange so that the system can provide proper resource management. For example if any of its resource needs to be reset at configuration change, its onConfigChange method must return false . AbstractPlayable is a base implementation that leverage actual playback logic to a Bridge . See Also AbstractPlayable AbstractBridge PlayableCreator Engine","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-playable/-init-/#init","text":"Playable(media: Media , config: Playable.Config ) A Playable contains necessary information about a Media item, and the config provided by client for it to start the media with expected result. Instance of Playable is provided by PlayableCreator . An implementation of Playable must take into account about the following points: A Playable is managed at application scope. So it must not retain any reference to narrower scope like androidx.fragment.app.Fragment or android.app.Activity . A Playable must acknowledge about configuration changes. It must return a correct value from onConfigChange so that the system can provide proper resource management. For example if any of its resource needs to be reset at configuration change, its onConfigChange method must return false . AbstractPlayable is a base implementation that leverage actual playback logic to a Bridge . See Also AbstractPlayable AbstractBridge PlayableCreator Engine","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-playable/is-playing/","text":"kohii-core / kohii.v1.core / Playable / isPlaying isPlaying \u00b6 abstract fun isPlaying(): Boolean","title":"Is playing"},{"location":"api/kohii-core/kohii.v1.core/-playable/is-playing/#isplaying","text":"abstract fun isPlaying(): Boolean","title":"isPlaying"},{"location":"api/kohii-core/kohii.v1.core/-playable/media/","text":"kohii-core / kohii.v1.core / Playable / media media \u00b6 val media: Media","title":"Media"},{"location":"api/kohii-core/kohii.v1.core/-playable/media/#media","text":"val media: Media","title":"media"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-config-change/","text":"kohii-core / kohii.v1.core / Playable / onConfigChange onConfigChange \u00b6 abstract fun onConfigChange(): Boolean Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly.","title":"On config change"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-config-change/#onconfigchange","text":"abstract fun onConfigChange(): Boolean Return true to indicate that this Playable would survive configuration changes and no playback reloading would be required. In special cases like YouTube playback, it is recommended to return false so Kohii will handle the resource recycling correctly.","title":"onConfigChange"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-pause/","text":"kohii-core / kohii.v1.core / Playable / onPause onPause \u00b6 abstract fun onPause(): Unit","title":"On pause"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-pause/#onpause","text":"abstract fun onPause(): Unit","title":"onPause"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-play/","text":"kohii-core / kohii.v1.core / Playable / onPlay onPlay \u00b6 abstract fun onPlay(): Unit","title":"On play"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-play/#onplay","text":"abstract fun onPlay(): Unit","title":"onPlay"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-prepare/","text":"kohii-core / kohii.v1.core / Playable / onPrepare onPrepare \u00b6 abstract fun onPrepare(loadSource: Boolean ): Unit","title":"On prepare"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-prepare/#onprepare","text":"abstract fun onPrepare(loadSource: Boolean ): Unit","title":"onPrepare"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-ready/","text":"kohii-core / kohii.v1.core / Playable / onReady onReady \u00b6 abstract fun onReady(): Unit","title":"On ready"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-ready/#onready","text":"abstract fun onReady(): Unit","title":"onReady"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-release/","text":"kohii-core / kohii.v1.core / Playable / onRelease onRelease \u00b6 abstract fun onRelease(): Unit","title":"On release"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-release/#onrelease","text":"abstract fun onRelease(): Unit","title":"onRelease"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-reset/","text":"kohii-core / kohii.v1.core / Playable / onReset onReset \u00b6 abstract fun onReset(): Unit","title":"On reset"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-reset/#onreset","text":"abstract fun onReset(): Unit","title":"onReset"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-unbind/","text":"kohii-core / kohii.v1.core / Playable / onUnbind onUnbind \u00b6 abstract fun onUnbind(playback: Playback ): Unit","title":"On unbind"},{"location":"api/kohii-core/kohii.v1.core/-playable/on-unbind/#onunbind","text":"abstract fun onUnbind(playback: Playback ): Unit","title":"onUnbind"},{"location":"api/kohii-core/kohii.v1.core/-playable/renderer/","text":"kohii-core / kohii.v1.core / Playable / renderer renderer \u00b6 abstract var renderer: Any ?","title":"Renderer"},{"location":"api/kohii-core/kohii.v1.core/-playable/renderer/#renderer","text":"abstract var renderer: Any ?","title":"renderer"},{"location":"api/kohii-core/kohii.v1.core/-playable/setup-renderer/","text":"kohii-core / kohii.v1.core / Playable / setupRenderer setupRenderer \u00b6 abstract fun setupRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"Setup renderer"},{"location":"api/kohii-core/kohii.v1.core/-playable/setup-renderer/#setuprenderer","text":"abstract fun setupRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"setupRenderer"},{"location":"api/kohii-core/kohii.v1.core/-playable/tag/","text":"kohii-core / kohii.v1.core / Playable / tag tag \u00b6 abstract val tag: Any","title":"Tag"},{"location":"api/kohii-core/kohii.v1.core/-playable/tag/#tag","text":"abstract val tag: Any","title":"tag"},{"location":"api/kohii-core/kohii.v1.core/-playable/teardown-renderer/","text":"kohii-core / kohii.v1.core / Playable / teardownRenderer teardownRenderer \u00b6 abstract fun teardownRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"Teardown renderer"},{"location":"api/kohii-core/kohii.v1.core/-playable/teardown-renderer/#teardownrenderer","text":"abstract fun teardownRenderer(playback: Playback ): Unit Once the Playback finds it is good time for the Playable to request/release the Renderer, it will trigger these calls to send that signal. The 'good time' can varies due to the actual use case. In Kohii, there are 2 following cases: The Playback's Container is also the renderer. In this case, the Container/Renderer will always be there. We suggest that the Playable should request for the Renderer as soon as possible, and release it as late as possible. The proper place to do that are when the Playback becomes active (onActive()) and inactive (onInActive()). See Also StaticViewRendererPlayback DynamicViewRendererPlayback DynamicFragmentRendererPlayback","title":"teardownRenderer"},{"location":"api/kohii-core/kohii.v1.core/-playable/-config/","text":"kohii-core / kohii.v1.core / Playable / Config Config \u00b6 data class Config Constructors \u00b6 Name Summary <init> Config(tag: Any = Master.NO_TAG, rendererType: Class <*>)","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playable/-config/#config","text":"data class Config","title":"Config"},{"location":"api/kohii-core/kohii.v1.core/-playable/-config/#constructors","text":"Name Summary <init> Config(tag: Any = Master.NO_TAG, rendererType: Class <*>)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-playable/-config/-init-/","text":"kohii-core / kohii.v1.core / Playable / Config / <init> <init> \u00b6 Config(tag: Any = Master.NO_TAG, rendererType: Class <*>)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-playable/-config/-init-/#init","text":"Config(tag: Any = Master.NO_TAG, rendererType: Class <*>)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/","text":"kohii-core / kohii.v1.core / PlayableCreator PlayableCreator \u00b6 abstract class PlayableCreator<RENDERER : Any > Constructors \u00b6 Name Summary <init> PlayableCreator(rendererType: Class < RENDERER >) Properties \u00b6 Name Summary rendererType val rendererType: Class < RENDERER > Functions \u00b6 Name Summary cleanUp abstract fun cleanUp(): Unit createPlayable abstract fun createPlayable(config: Playable.Config , media: Media ): Playable","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/#playablecreator","text":"abstract class PlayableCreator<RENDERER : Any >","title":"PlayableCreator"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/#constructors","text":"Name Summary <init> PlayableCreator(rendererType: Class < RENDERER >)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/#properties","text":"Name Summary rendererType val rendererType: Class < RENDERER >","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/#functions","text":"Name Summary cleanUp abstract fun cleanUp(): Unit createPlayable abstract fun createPlayable(config: Playable.Config , media: Media ): Playable","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/-init-/","text":"kohii-core / kohii.v1.core / PlayableCreator / <init> <init> \u00b6 PlayableCreator(rendererType: Class < RENDERER >)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/-init-/#init","text":"PlayableCreator(rendererType: Class < RENDERER >)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/clean-up/","text":"kohii-core / kohii.v1.core / PlayableCreator / cleanUp cleanUp \u00b6 abstract fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/clean-up/#cleanup","text":"abstract fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/create-playable/","text":"kohii-core / kohii.v1.core / PlayableCreator / createPlayable createPlayable \u00b6 abstract fun createPlayable(config: Playable.Config , media: Media ): Playable","title":"Create playable"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/create-playable/#createplayable","text":"abstract fun createPlayable(config: Playable.Config , media: Media ): Playable","title":"createPlayable"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/renderer-type/","text":"kohii-core / kohii.v1.core / PlayableCreator / rendererType rendererType \u00b6 val rendererType: Class < RENDERER >","title":"Renderer type"},{"location":"api/kohii-core/kohii.v1.core/-playable-creator/renderer-type/#renderertype","text":"val rendererType: Class < RENDERER >","title":"rendererType"},{"location":"api/kohii-core/kohii.v1.core/-playback/","text":"kohii-core / kohii.v1.core / Playback Playback \u00b6 abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. A Playback does not only store the information about the ViewGroup as container , and the Playable , but also help the Master to know if the Playable should be played or paused, by telling it to how much the container is visible and other conditions. See Also kohii.v1.internal.StaticViewRendererPlayback kohii.v1.internal.DynamicViewRendererPlayback kohii.v1.internal.DynamicFragmentRendererPlayback Types \u00b6 Name Summary ArtworkHintListener interface ArtworkHintListener Callback interface Callback Callbacks for lifecycle events of a Playback . Config data class Config Controller interface Controller Provides necessary information and callbacks to setup a manual controller for a Playback . NetworkTypeChangeListener interface NetworkTypeChangeListener StateListener interface StateListener Callbacks for events triggered by the underlying Playable . Token class Token TokenUpdateListener interface TokenUpdateListener Constructors \u00b6 Name Summary <init> Playback(manager: Manager , bucket: Bucket , container: ViewGroup , config: Playback.Config = Config()) Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. Properties \u00b6 Name Summary bucket val bucket: Bucket config val config: Playback.Config container val container: ViewGroup containerRect val containerRect: Rect lock var lock: Boolean Return true if this Playback is locked, false otherwise. manager val manager: Manager playable var playable: Playable ? playerParameters var playerParameters: PlayerParameters tag val tag: Any volumeInfo val volumeInfo: VolumeInfo Functions \u00b6 Name Summary addStateListener fun addStateListener(listener: Playback.StateListener ): Unit onAttachRenderer abstract fun onAttachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely attached to container and can be used by the Playable. onDetachRenderer abstract fun onDetachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely detached from container and Playable should not use it any longer. RendererProvider will then release the Renderer with proper mechanism (eg: put it back to Pool for reuse). onError open fun onError(error: Exception ): Unit onPlayerStateChanged open fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit onRenderedFirstFrame open fun onRenderedFirstFrame(): Unit onVideoSizeChanged open fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit removeStateListener fun removeStateListener(listener: Playback.StateListener ?): Unit rewind fun rewind(refresh: Boolean = true): Unit Resets the playable to its original state. toString open fun toString(): String unbind fun unbind(): Unit updateToken open fun updateToken(): Playback.Token Inherited Functions \u00b6 Name Summary onCues open fun onCues(cues: MutableList <Cue>): Unit onMetadata open fun onMetadata(metadata: Metadata): Unit Companion Object Properties \u00b6 Name Summary DELAY_INFINITE const val DELAY_INFINITE: Long","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/#playback","text":"abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. A Playback does not only store the information about the ViewGroup as container , and the Playable , but also help the Master to know if the Playable should be played or paused, by telling it to how much the container is visible and other conditions. See Also kohii.v1.internal.StaticViewRendererPlayback kohii.v1.internal.DynamicViewRendererPlayback kohii.v1.internal.DynamicFragmentRendererPlayback","title":"Playback"},{"location":"api/kohii-core/kohii.v1.core/-playback/#types","text":"Name Summary ArtworkHintListener interface ArtworkHintListener Callback interface Callback Callbacks for lifecycle events of a Playback . Config data class Config Controller interface Controller Provides necessary information and callbacks to setup a manual controller for a Playback . NetworkTypeChangeListener interface NetworkTypeChangeListener StateListener interface StateListener Callbacks for events triggered by the underlying Playable . Token class Token TokenUpdateListener interface TokenUpdateListener","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/-playback/#constructors","text":"Name Summary <init> Playback(manager: Manager , bucket: Bucket , container: ViewGroup , config: Playback.Config = Config()) Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed.","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-playback/#properties","text":"Name Summary bucket val bucket: Bucket config val config: Playback.Config container val container: ViewGroup containerRect val containerRect: Rect lock var lock: Boolean Return true if this Playback is locked, false otherwise. manager val manager: Manager playable var playable: Playable ? playerParameters var playerParameters: PlayerParameters tag val tag: Any volumeInfo val volumeInfo: VolumeInfo","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-playback/#functions","text":"Name Summary addStateListener fun addStateListener(listener: Playback.StateListener ): Unit onAttachRenderer abstract fun onAttachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely attached to container and can be used by the Playable. onDetachRenderer abstract fun onDetachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely detached from container and Playable should not use it any longer. RendererProvider will then release the Renderer with proper mechanism (eg: put it back to Pool for reuse). onError open fun onError(error: Exception ): Unit onPlayerStateChanged open fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit onRenderedFirstFrame open fun onRenderedFirstFrame(): Unit onVideoSizeChanged open fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit removeStateListener fun removeStateListener(listener: Playback.StateListener ?): Unit rewind fun rewind(refresh: Boolean = true): Unit Resets the playable to its original state. toString open fun toString(): String unbind fun unbind(): Unit updateToken open fun updateToken(): Playback.Token","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/#inherited-functions","text":"Name Summary onCues open fun onCues(cues: MutableList <Cue>): Unit onMetadata open fun onMetadata(metadata: Metadata): Unit","title":"Inherited Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/#companion-object-properties","text":"Name Summary DELAY_INFINITE const val DELAY_INFINITE: Long","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.core/-playback/-d-e-l-a-y_-i-n-f-i-n-i-t-e/","text":"kohii-core / kohii.v1.core / Playback / DELAY_INFINITE DELAY_INFINITE \u00b6 const val DELAY_INFINITE: Long","title":" d e l a y  i n f i n i t e"},{"location":"api/kohii-core/kohii.v1.core/-playback/-d-e-l-a-y_-i-n-f-i-n-i-t-e/#delay_infinite","text":"const val DELAY_INFINITE: Long","title":"DELAY_INFINITE"},{"location":"api/kohii-core/kohii.v1.core/-playback/-init-/","text":"kohii-core / kohii.v1.core / Playback / <init> <init> \u00b6 Playback(manager: Manager , bucket: Bucket , container: ViewGroup , config: Playback.Config = Config()) Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. A Playback does not only store the information about the ViewGroup as container , and the Playable , but also help the Master to know if the Playable should be played or paused, by telling it to how much the container is visible and other conditions. See Also kohii.v1.internal.StaticViewRendererPlayback kohii.v1.internal.DynamicViewRendererPlayback kohii.v1.internal.DynamicFragmentRendererPlayback","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-playback/-init-/#init","text":"Playback(manager: Manager , bucket: Bucket , container: ViewGroup , config: Playback.Config = Config()) Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. A Playback does not only store the information about the ViewGroup as container , and the Playable , but also help the Master to know if the Playable should be played or paused, by telling it to how much the container is visible and other conditions. See Also kohii.v1.internal.StaticViewRendererPlayback kohii.v1.internal.DynamicViewRendererPlayback kohii.v1.internal.DynamicFragmentRendererPlayback","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-playback/add-state-listener/","text":"kohii-core / kohii.v1.core / Playback / addStateListener addStateListener \u00b6 fun addStateListener(listener: Playback.StateListener ): Unit","title":"Add state listener"},{"location":"api/kohii-core/kohii.v1.core/-playback/add-state-listener/#addstatelistener","text":"fun addStateListener(listener: Playback.StateListener ): Unit","title":"addStateListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/bucket/","text":"kohii-core / kohii.v1.core / Playback / bucket bucket \u00b6 val bucket: Bucket","title":"Bucket"},{"location":"api/kohii-core/kohii.v1.core/-playback/bucket/#bucket","text":"val bucket: Bucket","title":"bucket"},{"location":"api/kohii-core/kohii.v1.core/-playback/config/","text":"kohii-core / kohii.v1.core / Playback / config config \u00b6 val config: Playback.Config","title":"Config"},{"location":"api/kohii-core/kohii.v1.core/-playback/config/#config","text":"val config: Playback.Config","title":"config"},{"location":"api/kohii-core/kohii.v1.core/-playback/container-rect/","text":"kohii-core / kohii.v1.core / Playback / containerRect containerRect \u00b6 val containerRect: Rect","title":"Container rect"},{"location":"api/kohii-core/kohii.v1.core/-playback/container-rect/#containerrect","text":"val containerRect: Rect","title":"containerRect"},{"location":"api/kohii-core/kohii.v1.core/-playback/container/","text":"kohii-core / kohii.v1.core / Playback / container container \u00b6 val container: ViewGroup","title":"Container"},{"location":"api/kohii-core/kohii.v1.core/-playback/container/#container","text":"val container: ViewGroup","title":"container"},{"location":"api/kohii-core/kohii.v1.core/-playback/lock/","text":"kohii-core / kohii.v1.core / Playback / lock lock \u00b6 var lock: Boolean Return true if this Playback is locked, false otherwise.","title":"Lock"},{"location":"api/kohii-core/kohii.v1.core/-playback/lock/#lock","text":"var lock: Boolean Return true if this Playback is locked, false otherwise.","title":"lock"},{"location":"api/kohii-core/kohii.v1.core/-playback/manager/","text":"kohii-core / kohii.v1.core / Playback / manager manager \u00b6 val manager: Manager","title":"Manager"},{"location":"api/kohii-core/kohii.v1.core/-playback/manager/#manager","text":"val manager: Manager","title":"manager"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-attach-renderer/","text":"kohii-core / kohii.v1.core / Playback / onAttachRenderer onAttachRenderer \u00b6 protected abstract fun onAttachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely attached to container and can be used by the Playable.","title":"On attach renderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-attach-renderer/#onattachrenderer","text":"protected abstract fun onAttachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely attached to container and can be used by the Playable.","title":"onAttachRenderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-detach-renderer/","text":"kohii-core / kohii.v1.core / Playback / onDetachRenderer onDetachRenderer \u00b6 protected abstract fun onDetachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely detached from container and Playable should not use it any longer. RendererProvider will then release the Renderer with proper mechanism (eg: put it back to Pool for reuse).","title":"On detach renderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-detach-renderer/#ondetachrenderer","text":"protected abstract fun onDetachRenderer(renderer: Any ?): Boolean Return true to indicate that the Renderer is safely detached from container and Playable should not use it any longer. RendererProvider will then release the Renderer with proper mechanism (eg: put it back to Pool for reuse).","title":"onDetachRenderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-error/","text":"kohii-core / kohii.v1.core / Playback / onError onError \u00b6 open fun onError(error: Exception ): Unit Overrides ErrorListener.onError","title":"On error"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-error/#onerror","text":"open fun onError(error: Exception ): Unit Overrides ErrorListener.onError","title":"onError"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-player-state-changed/","text":"kohii-core / kohii.v1.core / Playback / onPlayerStateChanged onPlayerStateChanged \u00b6 open fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit","title":"On player state changed"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-player-state-changed/#onplayerstatechanged","text":"open fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit","title":"onPlayerStateChanged"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-rendered-first-frame/","text":"kohii-core / kohii.v1.core / Playback / onRenderedFirstFrame onRenderedFirstFrame \u00b6 open fun onRenderedFirstFrame(): Unit","title":"On rendered first frame"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-rendered-first-frame/#onrenderedfirstframe","text":"open fun onRenderedFirstFrame(): Unit","title":"onRenderedFirstFrame"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-video-size-changed/","text":"kohii-core / kohii.v1.core / Playback / onVideoSizeChanged onVideoSizeChanged \u00b6 open fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"On video size changed"},{"location":"api/kohii-core/kohii.v1.core/-playback/on-video-size-changed/#onvideosizechanged","text":"open fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"onVideoSizeChanged"},{"location":"api/kohii-core/kohii.v1.core/-playback/playable/","text":"kohii-core / kohii.v1.core / Playback / playable playable \u00b6 var playable: Playable ?","title":"Playable"},{"location":"api/kohii-core/kohii.v1.core/-playback/playable/#playable","text":"var playable: Playable ?","title":"playable"},{"location":"api/kohii-core/kohii.v1.core/-playback/player-parameters/","text":"kohii-core / kohii.v1.core / Playback / playerParameters playerParameters \u00b6 var playerParameters: PlayerParameters","title":"Player parameters"},{"location":"api/kohii-core/kohii.v1.core/-playback/player-parameters/#playerparameters","text":"var playerParameters: PlayerParameters","title":"playerParameters"},{"location":"api/kohii-core/kohii.v1.core/-playback/remove-state-listener/","text":"kohii-core / kohii.v1.core / Playback / removeStateListener removeStateListener \u00b6 fun removeStateListener(listener: Playback.StateListener ?): Unit","title":"Remove state listener"},{"location":"api/kohii-core/kohii.v1.core/-playback/remove-state-listener/#removestatelistener","text":"fun removeStateListener(listener: Playback.StateListener ?): Unit","title":"removeStateListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/rewind/","text":"kohii-core / kohii.v1.core / Playback / rewind rewind \u00b6 @JvmOverloads fun rewind(refresh: Boolean = true): Unit Resets the playable to its original state. Parameters \u00b6 refresh - If true , also refresh everything.","title":"Rewind"},{"location":"api/kohii-core/kohii.v1.core/-playback/rewind/#rewind","text":"@JvmOverloads fun rewind(refresh: Boolean = true): Unit Resets the playable to its original state.","title":"rewind"},{"location":"api/kohii-core/kohii.v1.core/-playback/rewind/#parameters","text":"refresh - If true , also refresh everything.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-playback/tag/","text":"kohii-core / kohii.v1.core / Playback / tag tag \u00b6 val tag: Any","title":"Tag"},{"location":"api/kohii-core/kohii.v1.core/-playback/tag/#tag","text":"val tag: Any","title":"tag"},{"location":"api/kohii-core/kohii.v1.core/-playback/to-string/","text":"kohii-core / kohii.v1.core / Playback / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"api/kohii-core/kohii.v1.core/-playback/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/kohii-core/kohii.v1.core/-playback/unbind/","text":"kohii-core / kohii.v1.core / Playback / unbind unbind \u00b6 fun unbind(): Unit","title":"Unbind"},{"location":"api/kohii-core/kohii.v1.core/-playback/unbind/#unbind","text":"fun unbind(): Unit","title":"unbind"},{"location":"api/kohii-core/kohii.v1.core/-playback/update-token/","text":"kohii-core / kohii.v1.core / Playback / updateToken updateToken \u00b6 protected open fun updateToken(): Playback.Token","title":"Update token"},{"location":"api/kohii-core/kohii.v1.core/-playback/update-token/#updatetoken","text":"protected open fun updateToken(): Playback.Token","title":"updateToken"},{"location":"api/kohii-core/kohii.v1.core/-playback/volume-info/","text":"kohii-core / kohii.v1.core / Playback / volumeInfo volumeInfo \u00b6 val volumeInfo: VolumeInfo","title":"Volume info"},{"location":"api/kohii-core/kohii.v1.core/-playback/volume-info/#volumeinfo","text":"val volumeInfo: VolumeInfo","title":"volumeInfo"},{"location":"api/kohii-core/kohii.v1.core/-playback/-artwork-hint-listener/","text":"kohii-core / kohii.v1.core / Playback / ArtworkHintListener ArtworkHintListener \u00b6 interface ArtworkHintListener Functions \u00b6 Name Summary onArtworkHint abstract fun onArtworkHint(playback: Playback , shouldShow: Boolean , position: Long , state: Int ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-artwork-hint-listener/#artworkhintlistener","text":"interface ArtworkHintListener","title":"ArtworkHintListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-artwork-hint-listener/#functions","text":"Name Summary onArtworkHint abstract fun onArtworkHint(playback: Playback , shouldShow: Boolean , position: Long , state: Int ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-artwork-hint-listener/on-artwork-hint/","text":"kohii-core / kohii.v1.core / Playback / ArtworkHintListener / onArtworkHint onArtworkHint \u00b6 abstract fun onArtworkHint(playback: Playback , shouldShow: Boolean , position: Long , state: Int ): Unit Parameters \u00b6 position - current position of the playback in milliseconds.","title":"On artwork hint"},{"location":"api/kohii-core/kohii.v1.core/-playback/-artwork-hint-listener/on-artwork-hint/#onartworkhint","text":"abstract fun onArtworkHint(playback: Playback , shouldShow: Boolean , position: Long , state: Int ): Unit","title":"onArtworkHint"},{"location":"api/kohii-core/kohii.v1.core/-playback/-artwork-hint-listener/on-artwork-hint/#parameters","text":"position - current position of the playback in milliseconds.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/","text":"kohii-core / kohii.v1.core / Playback / Callback Callback \u00b6 interface Callback Callbacks for lifecycle events of a Playback . Functions \u00b6 Name Summary onActive open fun onActive(playback: Playback ): Unit onAdded open fun onAdded(playback: Playback ): Unit onAttached open fun onAttached(playback: Playback ): Unit onDetached open fun onDetached(playback: Playback ): Unit onInActive open fun onInActive(playback: Playback ): Unit onRemoved open fun onRemoved(playback: Playback ): Unit Inheritors \u00b6 Name Summary AbstractPlayable abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/#callback","text":"interface Callback Callbacks for lifecycle events of a Playback .","title":"Callback"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/#functions","text":"Name Summary onActive open fun onActive(playback: Playback ): Unit onAdded open fun onAdded(playback: Playback ): Unit onAttached open fun onAttached(playback: Playback ): Unit onDetached open fun onDetached(playback: Playback ): Unit onInActive open fun onInActive(playback: Playback ): Unit onRemoved open fun onRemoved(playback: Playback ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/#inheritors","text":"Name Summary AbstractPlayable abstract class AbstractPlayable<RENDERER : Any > : Playable , Playback.Callback , PlayerParametersChangeListener","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-active/","text":"kohii-core / kohii.v1.core / Playback / Callback / onActive onActive \u00b6 open fun onActive(playback: Playback ): Unit","title":"On active"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-active/#onactive","text":"open fun onActive(playback: Playback ): Unit","title":"onActive"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-added/","text":"kohii-core / kohii.v1.core / Playback / Callback / onAdded onAdded \u00b6 open fun onAdded(playback: Playback ): Unit","title":"On added"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-added/#onadded","text":"open fun onAdded(playback: Playback ): Unit","title":"onAdded"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-attached/","text":"kohii-core / kohii.v1.core / Playback / Callback / onAttached onAttached \u00b6 open fun onAttached(playback: Playback ): Unit","title":"On attached"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-attached/#onattached","text":"open fun onAttached(playback: Playback ): Unit","title":"onAttached"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-detached/","text":"kohii-core / kohii.v1.core / Playback / Callback / onDetached onDetached \u00b6 open fun onDetached(playback: Playback ): Unit","title":"On detached"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-detached/#ondetached","text":"open fun onDetached(playback: Playback ): Unit","title":"onDetached"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-in-active/","text":"kohii-core / kohii.v1.core / Playback / Callback / onInActive onInActive \u00b6 open fun onInActive(playback: Playback ): Unit","title":"On in active"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-in-active/#oninactive","text":"open fun onInActive(playback: Playback ): Unit","title":"onInActive"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-removed/","text":"kohii-core / kohii.v1.core / Playback / Callback / onRemoved onRemoved \u00b6 open fun onRemoved(playback: Playback ): Unit","title":"On removed"},{"location":"api/kohii-core/kohii.v1.core/-playback/-callback/on-removed/#onremoved","text":"open fun onRemoved(playback: Playback ): Unit","title":"onRemoved"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/","text":"kohii-core / kohii.v1.core / Playback / Config Config \u00b6 data class Config Constructors \u00b6 Name Summary <init> Config(tag: Any = Master.NO_TAG, delay: Int = 0, threshold: Float = 0.65F, preload: Boolean = false, releaseOnInActive: Boolean = false, repeatMode: Int = Common.REPEAT_MODE_OFF, callbacks: Set < Playback.Callback > = emptySet(), controller: Playback.Controller ? = null, initialPlaybackInfo: PlaybackInfo ? = null, artworkHintListener: Playback.ArtworkHintListener ? = null, tokenUpdateListener: Playback.TokenUpdateListener ? = null, networkTypeChangeListener: Playback.NetworkTypeChangeListener ? = null) Properties \u00b6 Name Summary artworkHintListener val artworkHintListener: Playback.ArtworkHintListener ? callbacks val callbacks: Set < Playback.Callback > controller val controller: Playback.Controller ? delay val delay: Int initialPlaybackInfo val initialPlaybackInfo: PlaybackInfo ? networkTypeChangeListener val networkTypeChangeListener: Playback.NetworkTypeChangeListener ? preload val preload: Boolean releaseOnInActive val releaseOnInActive: Boolean repeatMode val repeatMode: Int tag val tag: Any threshold val threshold: Float tokenUpdateListener val tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/#config","text":"data class Config","title":"Config"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/#constructors","text":"Name Summary <init> Config(tag: Any = Master.NO_TAG, delay: Int = 0, threshold: Float = 0.65F, preload: Boolean = false, releaseOnInActive: Boolean = false, repeatMode: Int = Common.REPEAT_MODE_OFF, callbacks: Set < Playback.Callback > = emptySet(), controller: Playback.Controller ? = null, initialPlaybackInfo: PlaybackInfo ? = null, artworkHintListener: Playback.ArtworkHintListener ? = null, tokenUpdateListener: Playback.TokenUpdateListener ? = null, networkTypeChangeListener: Playback.NetworkTypeChangeListener ? = null)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/#properties","text":"Name Summary artworkHintListener val artworkHintListener: Playback.ArtworkHintListener ? callbacks val callbacks: Set < Playback.Callback > controller val controller: Playback.Controller ? delay val delay: Int initialPlaybackInfo val initialPlaybackInfo: PlaybackInfo ? networkTypeChangeListener val networkTypeChangeListener: Playback.NetworkTypeChangeListener ? preload val preload: Boolean releaseOnInActive val releaseOnInActive: Boolean repeatMode val repeatMode: Int tag val tag: Any threshold val threshold: Float tokenUpdateListener val tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/-init-/","text":"kohii-core / kohii.v1.core / Playback / Config / <init> <init> \u00b6 Config(tag: Any = Master.NO_TAG, delay: Int = 0, threshold: Float = 0.65F, preload: Boolean = false, releaseOnInActive: Boolean = false, repeatMode: Int = Common.REPEAT_MODE_OFF, callbacks: Set < Playback.Callback > = emptySet(), controller: Playback.Controller ? = null, initialPlaybackInfo: PlaybackInfo ? = null, artworkHintListener: Playback.ArtworkHintListener ? = null, tokenUpdateListener: Playback.TokenUpdateListener ? = null, networkTypeChangeListener: Playback.NetworkTypeChangeListener ? = null)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/-init-/#init","text":"Config(tag: Any = Master.NO_TAG, delay: Int = 0, threshold: Float = 0.65F, preload: Boolean = false, releaseOnInActive: Boolean = false, repeatMode: Int = Common.REPEAT_MODE_OFF, callbacks: Set < Playback.Callback > = emptySet(), controller: Playback.Controller ? = null, initialPlaybackInfo: PlaybackInfo ? = null, artworkHintListener: Playback.ArtworkHintListener ? = null, tokenUpdateListener: Playback.TokenUpdateListener ? = null, networkTypeChangeListener: Playback.NetworkTypeChangeListener ? = null)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/artwork-hint-listener/","text":"kohii-core / kohii.v1.core / Playback / Config / artworkHintListener artworkHintListener \u00b6 val artworkHintListener: Playback.ArtworkHintListener ?","title":"Artwork hint listener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/artwork-hint-listener/#artworkhintlistener","text":"val artworkHintListener: Playback.ArtworkHintListener ?","title":"artworkHintListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/callbacks/","text":"kohii-core / kohii.v1.core / Playback / Config / callbacks callbacks \u00b6 val callbacks: Set < Playback.Callback >","title":"Callbacks"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/callbacks/#callbacks","text":"val callbacks: Set < Playback.Callback >","title":"callbacks"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/controller/","text":"kohii-core / kohii.v1.core / Playback / Config / controller controller \u00b6 val controller: Playback.Controller ?","title":"Controller"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/controller/#controller","text":"val controller: Playback.Controller ?","title":"controller"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/delay/","text":"kohii-core / kohii.v1.core / Playback / Config / delay delay \u00b6 val delay: Int","title":"Delay"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/delay/#delay","text":"val delay: Int","title":"delay"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/initial-playback-info/","text":"kohii-core / kohii.v1.core / Playback / Config / initialPlaybackInfo initialPlaybackInfo \u00b6 val initialPlaybackInfo: PlaybackInfo ?","title":"Initial playback info"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/initial-playback-info/#initialplaybackinfo","text":"val initialPlaybackInfo: PlaybackInfo ?","title":"initialPlaybackInfo"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/network-type-change-listener/","text":"kohii-core / kohii.v1.core / Playback / Config / networkTypeChangeListener networkTypeChangeListener \u00b6 val networkTypeChangeListener: Playback.NetworkTypeChangeListener ?","title":"Network type change listener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/network-type-change-listener/#networktypechangelistener","text":"val networkTypeChangeListener: Playback.NetworkTypeChangeListener ?","title":"networkTypeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/preload/","text":"kohii-core / kohii.v1.core / Playback / Config / preload preload \u00b6 val preload: Boolean","title":"Preload"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/preload/#preload","text":"val preload: Boolean","title":"preload"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/release-on-in-active/","text":"kohii-core / kohii.v1.core / Playback / Config / releaseOnInActive releaseOnInActive \u00b6 val releaseOnInActive: Boolean","title":"Release on in active"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/release-on-in-active/#releaseoninactive","text":"val releaseOnInActive: Boolean","title":"releaseOnInActive"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/repeat-mode/","text":"kohii-core / kohii.v1.core / Playback / Config / repeatMode repeatMode \u00b6 val repeatMode: Int","title":"Repeat mode"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/repeat-mode/#repeatmode","text":"val repeatMode: Int","title":"repeatMode"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/tag/","text":"kohii-core / kohii.v1.core / Playback / Config / tag tag \u00b6 val tag: Any","title":"Tag"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/tag/#tag","text":"val tag: Any","title":"tag"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/threshold/","text":"kohii-core / kohii.v1.core / Playback / Config / threshold threshold \u00b6 val threshold: Float","title":"Threshold"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/threshold/#threshold","text":"val threshold: Float","title":"threshold"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/token-update-listener/","text":"kohii-core / kohii.v1.core / Playback / Config / tokenUpdateListener tokenUpdateListener \u00b6 val tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Token update listener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-config/token-update-listener/#tokenupdatelistener","text":"val tokenUpdateListener: Playback.TokenUpdateListener ?","title":"tokenUpdateListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/","text":"kohii-core / kohii.v1.core / Playback / Controller Controller \u00b6 interface Controller Provides necessary information and callbacks to setup a manual controller for a Playback . Functions \u00b6 Name Summary kohiiCanPause open fun kohiiCanPause(): Boolean Returns true if the library can automatically pause the Playback , false otherwise. kohiiCanStart open fun kohiiCanStart(): Boolean Returns true to tell if the library can start a Playback automatically for the first time , or false otherwise. setupRenderer open fun setupRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes available. Client should use this callback to setup the manual controller mechanism for the renderer. For example: provide a user interface for controlling the playback. teardownRenderer open fun teardownRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes unavailable to it. Client should use this callback to clean up any manual controller mechanism set before. Note that the library also does some cleanup by itself to ensure the sanity of the renderer.","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/#controller","text":"interface Controller Provides necessary information and callbacks to setup a manual controller for a Playback .","title":"Controller"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/#functions","text":"Name Summary kohiiCanPause open fun kohiiCanPause(): Boolean Returns true if the library can automatically pause the Playback , false otherwise. kohiiCanStart open fun kohiiCanStart(): Boolean Returns true to tell if the library can start a Playback automatically for the first time , or false otherwise. setupRenderer open fun setupRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes available. Client should use this callback to setup the manual controller mechanism for the renderer. For example: provide a user interface for controlling the playback. teardownRenderer open fun teardownRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes unavailable to it. Client should use this callback to clean up any manual controller mechanism set before. Note that the library also does some cleanup by itself to ensure the sanity of the renderer.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/kohii-can-pause/","text":"kohii-core / kohii.v1.core / Playback / Controller / kohiiCanPause kohiiCanPause \u00b6 open fun kohiiCanPause(): Boolean Returns true if the library can automatically pause the Playback , false otherwise. If this method returns true : Once the user starts a Playback , it will not be paused until its container is not visible enough (controlled by Playback.Config.threshold ), or user starts other Playback (priority overridden). Once the user pauses a Playback , it will not be played until the user manually resumes it. Once the user interacts so that the Playback 's container is not visible enough, the library will pause the it. Once the user interacts so that a paused Playback 's container is visible enough, the library will: play it if it was not paused by the user, or pause it if it was paused by the user before (this is equal to doing nothing). Default result is true .","title":"Kohii can pause"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/kohii-can-pause/#kohiicanpause","text":"open fun kohiiCanPause(): Boolean Returns true if the library can automatically pause the Playback , false otherwise. If this method returns true : Once the user starts a Playback , it will not be paused until its container is not visible enough (controlled by Playback.Config.threshold ), or user starts other Playback (priority overridden). Once the user pauses a Playback , it will not be played until the user manually resumes it. Once the user interacts so that the Playback 's container is not visible enough, the library will pause the it. Once the user interacts so that a paused Playback 's container is visible enough, the library will: play it if it was not paused by the user, or pause it if it was paused by the user before (this is equal to doing nothing). Default result is true .","title":"kohiiCanPause"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/kohii-can-start/","text":"kohii-core / kohii.v1.core / Playback / Controller / kohiiCanStart kohiiCanStart \u00b6 open fun kohiiCanStart(): Boolean Returns true to tell if the library can start a Playback automatically for the first time , or false otherwise. If this method returns true : the library can start a Playback automatically if it was never be started or paused by the user. Once the user pauses it manually, only user can resume it, the library should never start/resume the Playback automatically again. Default result is false .","title":"Kohii can start"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/kohii-can-start/#kohiicanstart","text":"open fun kohiiCanStart(): Boolean Returns true to tell if the library can start a Playback automatically for the first time , or false otherwise. If this method returns true : the library can start a Playback automatically if it was never be started or paused by the user. Once the user pauses it manually, only user can resume it, the library should never start/resume the Playback automatically again. Default result is false .","title":"kohiiCanStart"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/setup-renderer/","text":"kohii-core / kohii.v1.core / Playback / Controller / setupRenderer setupRenderer \u00b6 open fun setupRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes available. Client should use this callback to setup the manual controller mechanism for the renderer. For example: provide a user interface for controlling the playback. See Also Playback.onRendererAttached","title":"Setup renderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/setup-renderer/#setuprenderer","text":"open fun setupRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes available. Client should use this callback to setup the manual controller mechanism for the renderer. For example: provide a user interface for controlling the playback. See Also Playback.onRendererAttached","title":"setupRenderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/teardown-renderer/","text":"kohii-core / kohii.v1.core / Playback / Controller / teardownRenderer teardownRenderer \u00b6 open fun teardownRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes unavailable to it. Client should use this callback to clean up any manual controller mechanism set before. Note that the library also does some cleanup by itself to ensure the sanity of the renderer. See Also Playback.onRendererDetached","title":"Teardown renderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/-controller/teardown-renderer/#teardownrenderer","text":"open fun teardownRenderer(playback: Playback , renderer: Any ?): Unit This method is called once the renderer of the Playback becomes unavailable to it. Client should use this callback to clean up any manual controller mechanism set before. Note that the library also does some cleanup by itself to ensure the sanity of the renderer. See Also Playback.onRendererDetached","title":"teardownRenderer"},{"location":"api/kohii-core/kohii.v1.core/-playback/-network-type-change-listener/","text":"kohii-core / kohii.v1.core / Playback / NetworkTypeChangeListener NetworkTypeChangeListener \u00b6 interface NetworkTypeChangeListener Functions \u00b6 Name Summary onNetworkTypeChanged abstract fun onNetworkTypeChanged(networkType: NetworkType ): PlayerParameters","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-network-type-change-listener/#networktypechangelistener","text":"interface NetworkTypeChangeListener","title":"NetworkTypeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-network-type-change-listener/#functions","text":"Name Summary onNetworkTypeChanged abstract fun onNetworkTypeChanged(networkType: NetworkType ): PlayerParameters","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-network-type-change-listener/on-network-type-changed/","text":"kohii-core / kohii.v1.core / Playback / NetworkTypeChangeListener / onNetworkTypeChanged onNetworkTypeChanged \u00b6 abstract fun onNetworkTypeChanged(networkType: NetworkType ): PlayerParameters","title":"On network type changed"},{"location":"api/kohii-core/kohii.v1.core/-playback/-network-type-change-listener/on-network-type-changed/#onnetworktypechanged","text":"abstract fun onNetworkTypeChanged(networkType: NetworkType ): PlayerParameters","title":"onNetworkTypeChanged"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/","text":"kohii-core / kohii.v1.core / Playback / StateListener StateListener \u00b6 interface StateListener Callbacks for events triggered by the underlying Playable . Functions \u00b6 Name Summary onBuffering open fun onBuffering(playback: Playback , playWhenReady: Boolean ): Unit Called when buffering status of the playback is changed. onEnded open fun onEnded(playback: Playback ): Unit Called when the Video finishes its playback onError open fun onError(playback: Playback , exception: Exception ): Unit onPaused open fun onPaused(playback: Playback ): Unit Called when the Video is paused onPlaying open fun onPlaying(playback: Playback ): Unit Called when the Video starts playing onRendered open fun onRendered(playback: Playback ): Unit Called when a Video is rendered on the Surface for the first time onVideoSizeChanged open fun onVideoSizeChanged(playback: Playback , width: Int , height: Int , unAppliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/#statelistener","text":"interface StateListener Callbacks for events triggered by the underlying Playable .","title":"StateListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/#functions","text":"Name Summary onBuffering open fun onBuffering(playback: Playback , playWhenReady: Boolean ): Unit Called when buffering status of the playback is changed. onEnded open fun onEnded(playback: Playback ): Unit Called when the Video finishes its playback onError open fun onError(playback: Playback , exception: Exception ): Unit onPaused open fun onPaused(playback: Playback ): Unit Called when the Video is paused onPlaying open fun onPlaying(playback: Playback ): Unit Called when the Video starts playing onRendered open fun onRendered(playback: Playback ): Unit Called when a Video is rendered on the Surface for the first time onVideoSizeChanged open fun onVideoSizeChanged(playback: Playback , width: Int , height: Int , unAppliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-buffering/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onBuffering onBuffering \u00b6 open fun onBuffering(playback: Playback , playWhenReady: Boolean ): Unit Called when buffering status of the playback is changed. Parameters \u00b6 playWhenReady - true if the Video will start playing once buffered enough, false otherwise.","title":"On buffering"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-buffering/#onbuffering","text":"open fun onBuffering(playback: Playback , playWhenReady: Boolean ): Unit Called when buffering status of the playback is changed.","title":"onBuffering"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-buffering/#parameters","text":"playWhenReady - true if the Video will start playing once buffered enough, false otherwise.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-ended/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onEnded onEnded \u00b6 open fun onEnded(playback: Playback ): Unit Called when the Video finishes its playback","title":"On ended"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-ended/#onended","text":"open fun onEnded(playback: Playback ): Unit Called when the Video finishes its playback","title":"onEnded"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-error/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onError onError \u00b6 open fun onError(playback: Playback , exception: Exception ): Unit","title":"On error"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-error/#onerror","text":"open fun onError(playback: Playback , exception: Exception ): Unit","title":"onError"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-paused/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onPaused onPaused \u00b6 open fun onPaused(playback: Playback ): Unit Called when the Video is paused","title":"On paused"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-paused/#onpaused","text":"open fun onPaused(playback: Playback ): Unit Called when the Video is paused","title":"onPaused"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-playing/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onPlaying onPlaying \u00b6 open fun onPlaying(playback: Playback ): Unit Called when the Video starts playing","title":"On playing"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-playing/#onplaying","text":"open fun onPlaying(playback: Playback ): Unit Called when the Video starts playing","title":"onPlaying"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-rendered/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onRendered onRendered \u00b6 open fun onRendered(playback: Playback ): Unit Called when a Video is rendered on the Surface for the first time","title":"On rendered"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-rendered/#onrendered","text":"open fun onRendered(playback: Playback ): Unit Called when a Video is rendered on the Surface for the first time","title":"onRendered"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-video-size-changed/","text":"kohii-core / kohii.v1.core / Playback / StateListener / onVideoSizeChanged onVideoSizeChanged \u00b6 open fun onVideoSizeChanged(playback: Playback , width: Int , height: Int , unAppliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"On video size changed"},{"location":"api/kohii-core/kohii.v1.core/-playback/-state-listener/on-video-size-changed/#onvideosizechanged","text":"open fun onVideoSizeChanged(playback: Playback , width: Int , height: Int , unAppliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"onVideoSizeChanged"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/","text":"kohii-core / kohii.v1.core / Playback / Token Token \u00b6 class Token Constructors \u00b6 Name Summary <init> Token(threshold: Float = 0.65F, areaOffset: Float , containerRect: Rect , containerWidth: Int , containerHeight: Int ) Properties \u00b6 Name Summary areaOffset val areaOffset: Float containerHeight val containerHeight: Int containerRect val containerRect: Rect containerWidth val containerWidth: Int Functions \u00b6 Name Summary toString fun toString(): String","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/#token","text":"class Token","title":"Token"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/#constructors","text":"Name Summary <init> Token(threshold: Float = 0.65F, areaOffset: Float , containerRect: Rect , containerWidth: Int , containerHeight: Int )","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/#properties","text":"Name Summary areaOffset val areaOffset: Float containerHeight val containerHeight: Int containerRect val containerRect: Rect containerWidth val containerWidth: Int","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/-init-/","text":"kohii-core / kohii.v1.core / Playback / Token / <init> <init> \u00b6 Token(threshold: Float = 0.65F, areaOffset: Float , containerRect: Rect , containerWidth: Int , containerHeight: Int )","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/-init-/#init","text":"Token(threshold: Float = 0.65F, areaOffset: Float , containerRect: Rect , containerWidth: Int , containerHeight: Int )","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/area-offset/","text":"kohii-core / kohii.v1.core / Playback / Token / areaOffset areaOffset \u00b6 val areaOffset: Float","title":"Area offset"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/area-offset/#areaoffset","text":"val areaOffset: Float","title":"areaOffset"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/container-height/","text":"kohii-core / kohii.v1.core / Playback / Token / containerHeight containerHeight \u00b6 val containerHeight: Int","title":"Container height"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/container-height/#containerheight","text":"val containerHeight: Int","title":"containerHeight"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/container-rect/","text":"kohii-core / kohii.v1.core / Playback / Token / containerRect containerRect \u00b6 val containerRect: Rect","title":"Container rect"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/container-rect/#containerrect","text":"val containerRect: Rect","title":"containerRect"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/container-width/","text":"kohii-core / kohii.v1.core / Playback / Token / containerWidth containerWidth \u00b6 val containerWidth: Int","title":"Container width"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/container-width/#containerwidth","text":"val containerWidth: Int","title":"containerWidth"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/to-string/","text":"kohii-core / kohii.v1.core / Playback / Token / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token-update-listener/","text":"kohii-core / kohii.v1.core / Playback / TokenUpdateListener TokenUpdateListener \u00b6 interface TokenUpdateListener Functions \u00b6 Name Summary onTokenUpdate abstract fun onTokenUpdate(playback: Playback , token: Playback.Token ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token-update-listener/#tokenupdatelistener","text":"interface TokenUpdateListener","title":"TokenUpdateListener"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token-update-listener/#functions","text":"Name Summary onTokenUpdate abstract fun onTokenUpdate(playback: Playback , token: Playback.Token ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token-update-listener/on-token-update/","text":"kohii-core / kohii.v1.core / Playback / TokenUpdateListener / onTokenUpdate onTokenUpdate \u00b6 abstract fun onTokenUpdate(playback: Playback , token: Playback.Token ): Unit","title":"On token update"},{"location":"api/kohii-core/kohii.v1.core/-playback/-token-update-listener/on-token-update/#ontokenupdate","text":"abstract fun onTokenUpdate(playback: Playback , token: Playback.Token ): Unit","title":"onTokenUpdate"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/","text":"kohii-core / kohii.v1.core / PlayerEventListener PlayerEventListener \u00b6 interface PlayerEventListener : EventListener, VideoListener, AudioListener, TextOutput, MetadataOutput Functions \u00b6 Name Summary onCues open fun onCues(cues: MutableList <Cue>): Unit onMetadata open fun onMetadata(metadata: Metadata): Unit Inheritors \u00b6 Name Summary Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. PlayerEventListeners class PlayerEventListeners : CopyOnWriteArraySet < PlayerEventListener >, PlayerEventListener","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/#playereventlistener","text":"interface PlayerEventListener : EventListener, VideoListener, AudioListener, TextOutput, MetadataOutput","title":"PlayerEventListener"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/#functions","text":"Name Summary onCues open fun onCues(cues: MutableList <Cue>): Unit onMetadata open fun onMetadata(metadata: Metadata): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/#inheritors","text":"Name Summary Playback abstract class Playback : PlayableContainer , PlayerEventListener , ErrorListener Common interface of an object that defines the connection between a Playable and a ViewGroup as an container . When the Master receive a request to bind a Video to a ViewGroup , it first produce a Playable (either by acquiring from cache, or creating a new one) for the Video, and then creating a new instance of this object if needed. PlayerEventListeners class PlayerEventListeners : CopyOnWriteArraySet < PlayerEventListener >, PlayerEventListener","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/on-cues/","text":"kohii-core / kohii.v1.core / PlayerEventListener / onCues onCues \u00b6 open fun onCues(cues: MutableList <Cue>): Unit","title":"On cues"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/on-cues/#oncues","text":"open fun onCues(cues: MutableList <Cue>): Unit","title":"onCues"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/on-metadata/","text":"kohii-core / kohii.v1.core / PlayerEventListener / onMetadata onMetadata \u00b6 open fun onMetadata(metadata: Metadata): Unit","title":"On metadata"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listener/on-metadata/#onmetadata","text":"open fun onMetadata(metadata: Metadata): Unit","title":"onMetadata"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/","text":"kohii-core / kohii.v1.core / PlayerEventListeners PlayerEventListeners \u00b6 class PlayerEventListeners : CopyOnWriteArraySet < PlayerEventListener >, PlayerEventListener Constructors \u00b6 Name Summary <init> PlayerEventListeners() Functions \u00b6 Name Summary onAudioAttributesChanged fun onAudioAttributesChanged(audioAttributes: AudioAttributes): Unit onAudioSessionId fun onAudioSessionId(audioSessionId: Int ): Unit onCues fun onCues(cues: MutableList <Cue>): Unit onLoadingChanged fun onLoadingChanged(isLoading: Boolean ): Unit onMetadata fun onMetadata(metadata: Metadata): Unit onPlaybackParametersChanged fun onPlaybackParametersChanged(playbackParameters: PlaybackParameters): Unit onPlayerError fun onPlayerError(error: ExoPlaybackException): Unit onPlayerStateChanged fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit onPositionDiscontinuity fun onPositionDiscontinuity(reason: Int ): Unit onRenderedFirstFrame fun onRenderedFirstFrame(): Unit onRepeatModeChanged fun onRepeatModeChanged(repeatMode: Int ): Unit onSeekProcessed fun onSeekProcessed(): Unit onShuffleModeEnabledChanged fun onShuffleModeEnabledChanged(shuffleModeEnabled: Boolean ): Unit onTimelineChanged fun onTimelineChanged(timeline: Timeline, reason: Int ): Unit onTracksChanged fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit onVideoSizeChanged fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit onVolumeChanged fun onVolumeChanged(volume: Float ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/#playereventlisteners","text":"class PlayerEventListeners : CopyOnWriteArraySet < PlayerEventListener >, PlayerEventListener","title":"PlayerEventListeners"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/#constructors","text":"Name Summary <init> PlayerEventListeners()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/#functions","text":"Name Summary onAudioAttributesChanged fun onAudioAttributesChanged(audioAttributes: AudioAttributes): Unit onAudioSessionId fun onAudioSessionId(audioSessionId: Int ): Unit onCues fun onCues(cues: MutableList <Cue>): Unit onLoadingChanged fun onLoadingChanged(isLoading: Boolean ): Unit onMetadata fun onMetadata(metadata: Metadata): Unit onPlaybackParametersChanged fun onPlaybackParametersChanged(playbackParameters: PlaybackParameters): Unit onPlayerError fun onPlayerError(error: ExoPlaybackException): Unit onPlayerStateChanged fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit onPositionDiscontinuity fun onPositionDiscontinuity(reason: Int ): Unit onRenderedFirstFrame fun onRenderedFirstFrame(): Unit onRepeatModeChanged fun onRepeatModeChanged(repeatMode: Int ): Unit onSeekProcessed fun onSeekProcessed(): Unit onShuffleModeEnabledChanged fun onShuffleModeEnabledChanged(shuffleModeEnabled: Boolean ): Unit onTimelineChanged fun onTimelineChanged(timeline: Timeline, reason: Int ): Unit onTracksChanged fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit onVideoSizeChanged fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit onVolumeChanged fun onVolumeChanged(volume: Float ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/-init-/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / <init> <init> \u00b6 PlayerEventListeners()","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/-init-/#init","text":"PlayerEventListeners()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-audio-attributes-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onAudioAttributesChanged onAudioAttributesChanged \u00b6 fun onAudioAttributesChanged(audioAttributes: AudioAttributes): Unit","title":"On audio attributes changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-audio-attributes-changed/#onaudioattributeschanged","text":"fun onAudioAttributesChanged(audioAttributes: AudioAttributes): Unit","title":"onAudioAttributesChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-audio-session-id/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onAudioSessionId onAudioSessionId \u00b6 fun onAudioSessionId(audioSessionId: Int ): Unit","title":"On audio session id"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-audio-session-id/#onaudiosessionid","text":"fun onAudioSessionId(audioSessionId: Int ): Unit","title":"onAudioSessionId"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-cues/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onCues onCues \u00b6 fun onCues(cues: MutableList <Cue>): Unit Overrides PlayerEventListener.onCues","title":"On cues"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-cues/#oncues","text":"fun onCues(cues: MutableList <Cue>): Unit Overrides PlayerEventListener.onCues","title":"onCues"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-loading-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onLoadingChanged onLoadingChanged \u00b6 fun onLoadingChanged(isLoading: Boolean ): Unit","title":"On loading changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-loading-changed/#onloadingchanged","text":"fun onLoadingChanged(isLoading: Boolean ): Unit","title":"onLoadingChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-metadata/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onMetadata onMetadata \u00b6 fun onMetadata(metadata: Metadata): Unit Overrides PlayerEventListener.onMetadata","title":"On metadata"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-metadata/#onmetadata","text":"fun onMetadata(metadata: Metadata): Unit Overrides PlayerEventListener.onMetadata","title":"onMetadata"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-playback-parameters-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onPlaybackParametersChanged onPlaybackParametersChanged \u00b6 fun onPlaybackParametersChanged(playbackParameters: PlaybackParameters): Unit","title":"On playback parameters changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-playback-parameters-changed/#onplaybackparameterschanged","text":"fun onPlaybackParametersChanged(playbackParameters: PlaybackParameters): Unit","title":"onPlaybackParametersChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-player-error/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onPlayerError onPlayerError \u00b6 fun onPlayerError(error: ExoPlaybackException): Unit","title":"On player error"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-player-error/#onplayererror","text":"fun onPlayerError(error: ExoPlaybackException): Unit","title":"onPlayerError"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-player-state-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onPlayerStateChanged onPlayerStateChanged \u00b6 fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit","title":"On player state changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-player-state-changed/#onplayerstatechanged","text":"fun onPlayerStateChanged(playWhenReady: Boolean , playbackState: Int ): Unit","title":"onPlayerStateChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-position-discontinuity/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onPositionDiscontinuity onPositionDiscontinuity \u00b6 fun onPositionDiscontinuity(reason: Int ): Unit","title":"On position discontinuity"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-position-discontinuity/#onpositiondiscontinuity","text":"fun onPositionDiscontinuity(reason: Int ): Unit","title":"onPositionDiscontinuity"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-rendered-first-frame/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onRenderedFirstFrame onRenderedFirstFrame \u00b6 fun onRenderedFirstFrame(): Unit","title":"On rendered first frame"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-rendered-first-frame/#onrenderedfirstframe","text":"fun onRenderedFirstFrame(): Unit","title":"onRenderedFirstFrame"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-repeat-mode-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onRepeatModeChanged onRepeatModeChanged \u00b6 fun onRepeatModeChanged(repeatMode: Int ): Unit","title":"On repeat mode changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-repeat-mode-changed/#onrepeatmodechanged","text":"fun onRepeatModeChanged(repeatMode: Int ): Unit","title":"onRepeatModeChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-seek-processed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onSeekProcessed onSeekProcessed \u00b6 fun onSeekProcessed(): Unit","title":"On seek processed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-seek-processed/#onseekprocessed","text":"fun onSeekProcessed(): Unit","title":"onSeekProcessed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-shuffle-mode-enabled-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onShuffleModeEnabledChanged onShuffleModeEnabledChanged \u00b6 fun onShuffleModeEnabledChanged(shuffleModeEnabled: Boolean ): Unit","title":"On shuffle mode enabled changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-shuffle-mode-enabled-changed/#onshufflemodeenabledchanged","text":"fun onShuffleModeEnabledChanged(shuffleModeEnabled: Boolean ): Unit","title":"onShuffleModeEnabledChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-timeline-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onTimelineChanged onTimelineChanged \u00b6 fun onTimelineChanged(timeline: Timeline, reason: Int ): Unit","title":"On timeline changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-timeline-changed/#ontimelinechanged","text":"fun onTimelineChanged(timeline: Timeline, reason: Int ): Unit","title":"onTimelineChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-tracks-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onTracksChanged onTracksChanged \u00b6 fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit","title":"On tracks changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-tracks-changed/#ontrackschanged","text":"fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit","title":"onTracksChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-video-size-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onVideoSizeChanged onVideoSizeChanged \u00b6 fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"On video size changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-video-size-changed/#onvideosizechanged","text":"fun onVideoSizeChanged(width: Int , height: Int , unappliedRotationDegrees: Int , pixelWidthHeightRatio: Float ): Unit","title":"onVideoSizeChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-volume-changed/","text":"kohii-core / kohii.v1.core / PlayerEventListeners / onVolumeChanged onVolumeChanged \u00b6 fun onVolumeChanged(volume: Float ): Unit","title":"On volume changed"},{"location":"api/kohii-core/kohii.v1.core/-player-event-listeners/on-volume-changed/#onvolumechanged","text":"fun onVolumeChanged(volume: Float ): Unit","title":"onVolumeChanged"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/","text":"kohii-core / kohii.v1.core / PlayerParameters PlayerParameters \u00b6 data class PlayerParameters Constructors \u00b6 Name Summary <init> PlayerParameters(maxVideoWidth: Int = Int.MAX_VALUE, maxVideoHeight: Int = Int.MAX_VALUE, maxVideoBitrate: Int = Int.MAX_VALUE, maxAudioBitrate: Int = Int.MAX_VALUE) Properties \u00b6 Name Summary maxAudioBitrate val maxAudioBitrate: Int maxVideoBitrate val maxVideoBitrate: Int maxVideoHeight val maxVideoHeight: Int maxVideoWidth val maxVideoWidth: Int Functions \u00b6 Name Summary playerShouldStart fun playerShouldStart(): Boolean Companion Object Properties \u00b6 Name Summary DEFAULT val DEFAULT: PlayerParameters","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/#playerparameters","text":"data class PlayerParameters","title":"PlayerParameters"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/#constructors","text":"Name Summary <init> PlayerParameters(maxVideoWidth: Int = Int.MAX_VALUE, maxVideoHeight: Int = Int.MAX_VALUE, maxVideoBitrate: Int = Int.MAX_VALUE, maxAudioBitrate: Int = Int.MAX_VALUE)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/#properties","text":"Name Summary maxAudioBitrate val maxAudioBitrate: Int maxVideoBitrate val maxVideoBitrate: Int maxVideoHeight val maxVideoHeight: Int maxVideoWidth val maxVideoWidth: Int","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/#functions","text":"Name Summary playerShouldStart fun playerShouldStart(): Boolean","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/#companion-object-properties","text":"Name Summary DEFAULT val DEFAULT: PlayerParameters","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/-d-e-f-a-u-l-t/","text":"kohii-core / kohii.v1.core / PlayerParameters / DEFAULT DEFAULT \u00b6 val DEFAULT: PlayerParameters","title":" d e f a u l t"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/-d-e-f-a-u-l-t/#default","text":"val DEFAULT: PlayerParameters","title":"DEFAULT"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/-init-/","text":"kohii-core / kohii.v1.core / PlayerParameters / <init> <init> \u00b6 PlayerParameters(maxVideoWidth: Int = Int.MAX_VALUE, maxVideoHeight: Int = Int.MAX_VALUE, maxVideoBitrate: Int = Int.MAX_VALUE, maxAudioBitrate: Int = Int.MAX_VALUE)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/-init-/#init","text":"PlayerParameters(maxVideoWidth: Int = Int.MAX_VALUE, maxVideoHeight: Int = Int.MAX_VALUE, maxVideoBitrate: Int = Int.MAX_VALUE, maxAudioBitrate: Int = Int.MAX_VALUE)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-audio-bitrate/","text":"kohii-core / kohii.v1.core / PlayerParameters / maxAudioBitrate maxAudioBitrate \u00b6 val maxAudioBitrate: Int","title":"Max audio bitrate"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-audio-bitrate/#maxaudiobitrate","text":"val maxAudioBitrate: Int","title":"maxAudioBitrate"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-video-bitrate/","text":"kohii-core / kohii.v1.core / PlayerParameters / maxVideoBitrate maxVideoBitrate \u00b6 val maxVideoBitrate: Int","title":"Max video bitrate"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-video-bitrate/#maxvideobitrate","text":"val maxVideoBitrate: Int","title":"maxVideoBitrate"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-video-height/","text":"kohii-core / kohii.v1.core / PlayerParameters / maxVideoHeight maxVideoHeight \u00b6 val maxVideoHeight: Int","title":"Max video height"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-video-height/#maxvideoheight","text":"val maxVideoHeight: Int","title":"maxVideoHeight"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-video-width/","text":"kohii-core / kohii.v1.core / PlayerParameters / maxVideoWidth maxVideoWidth \u00b6 val maxVideoWidth: Int","title":"Max video width"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/max-video-width/#maxvideowidth","text":"val maxVideoWidth: Int","title":"maxVideoWidth"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/player-should-start/","text":"kohii-core / kohii.v1.core / PlayerParameters / playerShouldStart playerShouldStart \u00b6 fun playerShouldStart(): Boolean","title":"Player should start"},{"location":"api/kohii-core/kohii.v1.core/-player-parameters/player-should-start/#playershouldstart","text":"fun playerShouldStart(): Boolean","title":"playerShouldStart"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/","text":"kohii-core / kohii.v1.core / PlayerPool PlayerPool \u00b6 abstract class PlayerPool<PLAYER> Definition of a pool to provide PLAYER instance for the consumer. Constructors \u00b6 Name Summary <init> PlayerPool(poolSize: Int = DEFAULT_POOL_SIZE) Definition of a pool to provide PLAYER instance for the consumer. Functions \u00b6 Name Summary clear open fun clear(): Unit Destroy all available PLAYER instances in the pool. createPlayer abstract fun createPlayer(media: Media ): PLAYER Create a new PLAYER instance that can be used to play the media object. destroyPlayer abstract fun destroyPlayer(player: PLAYER ): Unit Destroy the PLAYER instance. After this, the player must not be reused. getPlayer fun getPlayer(media: Media ): PLAYER Acquire a PLAYER that can be used to play the media from the pool. If there is no available instance in the pool, this method will create a new one. putPlayer fun putPlayer(media: Media , player: PLAYER ): Boolean Release an unused PLAYER to the pool. If the pool is already full, this method must destroy the PLAYER instance. Return true if the instance is successfully put back to the pool, or false otherwise. recyclePlayerForMedia open fun recyclePlayerForMedia(media: Media ): Boolean Return true if a PLAYER instance can be reused to play the media , false otherwise. If this method returns false , this pool will always create new PLAYER instance and never put that instance back to pool. resetPlayer open fun resetPlayer(player: PLAYER ): Unit Reset the internal state of the player instance before putting it back to the pool. Companion Object Properties \u00b6 Name Summary DEFAULT_POOL_SIZE val DEFAULT_POOL_SIZE: Int","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/#playerpool","text":"abstract class PlayerPool<PLAYER> Definition of a pool to provide PLAYER instance for the consumer.","title":"PlayerPool"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/#constructors","text":"Name Summary <init> PlayerPool(poolSize: Int = DEFAULT_POOL_SIZE) Definition of a pool to provide PLAYER instance for the consumer.","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/#functions","text":"Name Summary clear open fun clear(): Unit Destroy all available PLAYER instances in the pool. createPlayer abstract fun createPlayer(media: Media ): PLAYER Create a new PLAYER instance that can be used to play the media object. destroyPlayer abstract fun destroyPlayer(player: PLAYER ): Unit Destroy the PLAYER instance. After this, the player must not be reused. getPlayer fun getPlayer(media: Media ): PLAYER Acquire a PLAYER that can be used to play the media from the pool. If there is no available instance in the pool, this method will create a new one. putPlayer fun putPlayer(media: Media , player: PLAYER ): Boolean Release an unused PLAYER to the pool. If the pool is already full, this method must destroy the PLAYER instance. Return true if the instance is successfully put back to the pool, or false otherwise. recyclePlayerForMedia open fun recyclePlayerForMedia(media: Media ): Boolean Return true if a PLAYER instance can be reused to play the media , false otherwise. If this method returns false , this pool will always create new PLAYER instance and never put that instance back to pool. resetPlayer open fun resetPlayer(player: PLAYER ): Unit Reset the internal state of the player instance before putting it back to the pool.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/#companion-object-properties","text":"Name Summary DEFAULT_POOL_SIZE val DEFAULT_POOL_SIZE: Int","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/-d-e-f-a-u-l-t_-p-o-o-l_-s-i-z-e/","text":"kohii-core / kohii.v1.core / PlayerPool / DEFAULT_POOL_SIZE DEFAULT_POOL_SIZE \u00b6 val DEFAULT_POOL_SIZE: Int","title":" d e f a u l t  p o o l  s i z e"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/-d-e-f-a-u-l-t_-p-o-o-l_-s-i-z-e/#default_pool_size","text":"val DEFAULT_POOL_SIZE: Int","title":"DEFAULT_POOL_SIZE"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/-init-/","text":"kohii-core / kohii.v1.core / PlayerPool / <init> <init> \u00b6 PlayerPool(poolSize: Int = DEFAULT_POOL_SIZE) Definition of a pool to provide PLAYER instance for the consumer.","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-player-pool/-init-/#init","text":"PlayerPool(poolSize: Int = DEFAULT_POOL_SIZE) Definition of a pool to provide PLAYER instance for the consumer.","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/clear/","text":"kohii-core / kohii.v1.core / PlayerPool / clear clear \u00b6 @CallSuper open fun clear(): Unit Destroy all available PLAYER instances in the pool.","title":"Clear"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/clear/#clear","text":"@CallSuper open fun clear(): Unit Destroy all available PLAYER instances in the pool.","title":"clear"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/create-player/","text":"kohii-core / kohii.v1.core / PlayerPool / createPlayer createPlayer \u00b6 abstract fun createPlayer(media: Media ): PLAYER Create a new PLAYER instance that can be used to play the media object. Parameters \u00b6 media - The Media object. Return a PLAYER instance that can be used to play the media .","title":"Create player"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/create-player/#createplayer","text":"abstract fun createPlayer(media: Media ): PLAYER Create a new PLAYER instance that can be used to play the media object.","title":"createPlayer"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/create-player/#parameters","text":"media - The Media object. Return a PLAYER instance that can be used to play the media .","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/destroy-player/","text":"kohii-core / kohii.v1.core / PlayerPool / destroyPlayer destroyPlayer \u00b6 abstract fun destroyPlayer(player: PLAYER ): Unit Destroy the PLAYER instance. After this, the player must not be reused. Parameters \u00b6 player - The PLAYER instance.","title":"Destroy player"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/destroy-player/#destroyplayer","text":"abstract fun destroyPlayer(player: PLAYER ): Unit Destroy the PLAYER instance. After this, the player must not be reused.","title":"destroyPlayer"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/destroy-player/#parameters","text":"player - The PLAYER instance.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/get-player/","text":"kohii-core / kohii.v1.core / PlayerPool / getPlayer getPlayer \u00b6 fun getPlayer(media: Media ): PLAYER Acquire a PLAYER that can be used to play the media from the pool. If there is no available instance in the pool, this method will create a new one. Parameters \u00b6 media - The Media object. Return a PLAYER instance that can be used to play the media .","title":"Get player"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/get-player/#getplayer","text":"fun getPlayer(media: Media ): PLAYER Acquire a PLAYER that can be used to play the media from the pool. If there is no available instance in the pool, this method will create a new one.","title":"getPlayer"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/get-player/#parameters","text":"media - The Media object. Return a PLAYER instance that can be used to play the media .","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/put-player/","text":"kohii-core / kohii.v1.core / PlayerPool / putPlayer putPlayer \u00b6 fun putPlayer(media: Media , player: PLAYER ): Boolean Release an unused PLAYER to the pool. If the pool is already full, this method must destroy the PLAYER instance. Return true if the instance is successfully put back to the pool, or false otherwise. Parameters \u00b6 media - The Media object. player - The PLAYER to be put back to the pool. Return true if the instance is successfully put back to the pool, or false otherwise.","title":"Put player"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/put-player/#putplayer","text":"fun putPlayer(media: Media , player: PLAYER ): Boolean Release an unused PLAYER to the pool. If the pool is already full, this method must destroy the PLAYER instance. Return true if the instance is successfully put back to the pool, or false otherwise.","title":"putPlayer"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/put-player/#parameters","text":"media - The Media object. player - The PLAYER to be put back to the pool. Return true if the instance is successfully put back to the pool, or false otherwise.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/recycle-player-for-media/","text":"kohii-core / kohii.v1.core / PlayerPool / recyclePlayerForMedia recyclePlayerForMedia \u00b6 protected open fun recyclePlayerForMedia(media: Media ): Boolean Return true if a PLAYER instance can be reused to play the media , false otherwise. If this method returns false , this pool will always create new PLAYER instance and never put that instance back to pool. Parameters \u00b6 media - The Media object.","title":"Recycle player for media"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/recycle-player-for-media/#recycleplayerformedia","text":"protected open fun recyclePlayerForMedia(media: Media ): Boolean Return true if a PLAYER instance can be reused to play the media , false otherwise. If this method returns false , this pool will always create new PLAYER instance and never put that instance back to pool.","title":"recyclePlayerForMedia"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/recycle-player-for-media/#parameters","text":"media - The Media object.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/reset-player/","text":"kohii-core / kohii.v1.core / PlayerPool / resetPlayer resetPlayer \u00b6 open fun resetPlayer(player: PLAYER ): Unit Reset the internal state of the player instance before putting it back to the pool. Parameters \u00b6 player - The PLAYER instance to reset.","title":"Reset player"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/reset-player/#resetplayer","text":"open fun resetPlayer(player: PLAYER ): Unit Reset the internal state of the player instance before putting it back to the pool.","title":"resetPlayer"},{"location":"api/kohii-core/kohii.v1.core/-player-pool/reset-player/#parameters","text":"player - The PLAYER instance to reset.","title":"Parameters"},{"location":"api/kohii-core/kohii.v1.core/-prioritized/","text":"kohii-core / kohii.v1.core / Prioritized Prioritized \u00b6 interface Prioritized : Comparable < Prioritized > Functions \u00b6 Name Summary compareTo open fun compareTo(other: Prioritized ): Int","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-prioritized/#prioritized","text":"interface Prioritized : Comparable < Prioritized >","title":"Prioritized"},{"location":"api/kohii-core/kohii.v1.core/-prioritized/#functions","text":"Name Summary compareTo open fun compareTo(other: Prioritized ): Int","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-prioritized/compare-to/","text":"kohii-core / kohii.v1.core / Prioritized / compareTo compareTo \u00b6 open fun compareTo(other: Prioritized ): Int","title":"Compare to"},{"location":"api/kohii-core/kohii.v1.core/-prioritized/compare-to/#compareto","text":"open fun compareTo(other: Prioritized ): Int","title":"compareTo"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/","text":"kohii-core / kohii.v1.core / Rebinder Rebinder \u00b6 data class Rebinder : Parcelable Types \u00b6 Name Summary Options class Options Constructors \u00b6 Name Summary <init> Rebinder(tag: Any ) Properties \u00b6 Name Summary tag val tag: Any Functions \u00b6 Name Summary bind fun bind(engine: Engine <*>, container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Unit with fun with(options: Rebinder.Options .() -> Unit ): Rebinder","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/#rebinder","text":"data class Rebinder : Parcelable","title":"Rebinder"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/#types","text":"Name Summary Options class Options","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/#constructors","text":"Name Summary <init> Rebinder(tag: Any )","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/#properties","text":"Name Summary tag val tag: Any","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/#functions","text":"Name Summary bind fun bind(engine: Engine <*>, container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Unit with fun with(options: Rebinder.Options .() -> Unit ): Rebinder","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-init-/","text":"kohii-core / kohii.v1.core / Rebinder / <init> <init> \u00b6 Rebinder(tag: Any )","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-init-/#init","text":"Rebinder(tag: Any )","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/bind/","text":"kohii-core / kohii.v1.core / Rebinder / bind bind \u00b6 fun bind(engine: Engine <*>, container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Unit","title":"Bind"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/bind/#bind","text":"fun bind(engine: Engine <*>, container: ViewGroup , callback: (( Playback ) -> Unit )? = null): Unit","title":"bind"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/tag/","text":"kohii-core / kohii.v1.core / Rebinder / tag tag \u00b6 val tag: Any","title":"Tag"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/tag/#tag","text":"val tag: Any","title":"tag"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/with/","text":"kohii-core / kohii.v1.core / Rebinder / with with \u00b6 inline fun with(options: Rebinder.Options .() -> Unit ): Rebinder","title":"With"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/with/#with","text":"inline fun with(options: Rebinder.Options .() -> Unit ): Rebinder","title":"with"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/","text":"kohii-core / kohii.v1.core / Rebinder / Options Options \u00b6 class Options Constructors \u00b6 Name Summary <init> Options() Properties \u00b6 Name Summary artworkHintListener var artworkHintListener: Playback.ArtworkHintListener ? callbacks val callbacks: MutableSet < Playback.Callback > controller var controller: Playback.Controller ? networkTypeChangeListener var networkTypeChangeListener: Playback.NetworkTypeChangeListener ? preload var preload: Boolean repeatMode var repeatMode: Int threshold var threshold: Float tokenUpdateListener var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/#options","text":"class Options","title":"Options"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/#constructors","text":"Name Summary <init> Options()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/#properties","text":"Name Summary artworkHintListener var artworkHintListener: Playback.ArtworkHintListener ? callbacks val callbacks: MutableSet < Playback.Callback > controller var controller: Playback.Controller ? networkTypeChangeListener var networkTypeChangeListener: Playback.NetworkTypeChangeListener ? preload var preload: Boolean repeatMode var repeatMode: Int threshold var threshold: Float tokenUpdateListener var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/-init-/","text":"kohii-core / kohii.v1.core / Rebinder / Options / <init> <init> \u00b6 Options()","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/-init-/#init","text":"Options()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/artwork-hint-listener/","text":"kohii-core / kohii.v1.core / Rebinder / Options / artworkHintListener artworkHintListener \u00b6 var artworkHintListener: Playback.ArtworkHintListener ?","title":"Artwork hint listener"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/artwork-hint-listener/#artworkhintlistener","text":"var artworkHintListener: Playback.ArtworkHintListener ?","title":"artworkHintListener"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/callbacks/","text":"kohii-core / kohii.v1.core / Rebinder / Options / callbacks callbacks \u00b6 val callbacks: MutableSet < Playback.Callback >","title":"Callbacks"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/callbacks/#callbacks","text":"val callbacks: MutableSet < Playback.Callback >","title":"callbacks"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/controller/","text":"kohii-core / kohii.v1.core / Rebinder / Options / controller controller \u00b6 var controller: Playback.Controller ?","title":"Controller"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/controller/#controller","text":"var controller: Playback.Controller ?","title":"controller"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/network-type-change-listener/","text":"kohii-core / kohii.v1.core / Rebinder / Options / networkTypeChangeListener networkTypeChangeListener \u00b6 var networkTypeChangeListener: Playback.NetworkTypeChangeListener ?","title":"Network type change listener"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/network-type-change-listener/#networktypechangelistener","text":"var networkTypeChangeListener: Playback.NetworkTypeChangeListener ?","title":"networkTypeChangeListener"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/preload/","text":"kohii-core / kohii.v1.core / Rebinder / Options / preload preload \u00b6 var preload: Boolean","title":"Preload"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/preload/#preload","text":"var preload: Boolean","title":"preload"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/repeat-mode/","text":"kohii-core / kohii.v1.core / Rebinder / Options / repeatMode repeatMode \u00b6 var repeatMode: Int","title":"Repeat mode"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/repeat-mode/#repeatmode","text":"var repeatMode: Int","title":"repeatMode"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/threshold/","text":"kohii-core / kohii.v1.core / Rebinder / Options / threshold threshold \u00b6 var threshold: Float","title":"Threshold"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/threshold/#threshold","text":"var threshold: Float","title":"threshold"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/token-update-listener/","text":"kohii-core / kohii.v1.core / Rebinder / Options / tokenUpdateListener tokenUpdateListener \u00b6 var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"Token update listener"},{"location":"api/kohii-core/kohii.v1.core/-rebinder/-options/token-update-listener/#tokenupdatelistener","text":"var tokenUpdateListener: Playback.TokenUpdateListener ?","title":"tokenUpdateListener"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider RecycledRendererProvider \u00b6 abstract class RecycledRendererProvider : RendererProvider Constructors \u00b6 Name Summary <init> RecycledRendererProvider(poolSize: Int = 2) Functions \u00b6 Name Summary acquireRenderer open fun acquireRenderer(playback: Playback , media: Media ): Any Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available. clear open fun clear(): Unit Cleans up this pool. createRenderer abstract fun createRenderer(playback: Playback , rendererType: Int ): Any getRendererType open fun getRendererType(container: ViewGroup , media: Media ): Int onClear open fun onClear(renderer: Any ): Unit releaseRenderer open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool. Inherited Functions \u00b6 Name Summary onDestroy open fun onDestroy(owner: LifecycleOwner ): Unit Inheritors \u00b6 Name Summary ViewRendererProvider abstract class ViewRendererProvider : RecycledRendererProvider","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/#recycledrendererprovider","text":"abstract class RecycledRendererProvider : RendererProvider","title":"RecycledRendererProvider"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/#constructors","text":"Name Summary <init> RecycledRendererProvider(poolSize: Int = 2)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/#functions","text":"Name Summary acquireRenderer open fun acquireRenderer(playback: Playback , media: Media ): Any Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available. clear open fun clear(): Unit Cleans up this pool. createRenderer abstract fun createRenderer(playback: Playback , rendererType: Int ): Any getRendererType open fun getRendererType(container: ViewGroup , media: Media ): Int onClear open fun onClear(renderer: Any ): Unit releaseRenderer open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/#inherited-functions","text":"Name Summary onDestroy open fun onDestroy(owner: LifecycleOwner ): Unit","title":"Inherited Functions"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/#inheritors","text":"Name Summary ViewRendererProvider abstract class ViewRendererProvider : RecycledRendererProvider","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/-init-/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / <init> <init> \u00b6 RecycledRendererProvider(poolSize: Int = 2)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/-init-/#init","text":"RecycledRendererProvider(poolSize: Int = 2)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/acquire-renderer/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / acquireRenderer acquireRenderer \u00b6 @CallSuper open fun acquireRenderer(playback: Playback , media: Media ): Any Overrides RendererProvider.acquireRenderer Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available.","title":"Acquire renderer"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/acquire-renderer/#acquirerenderer","text":"@CallSuper open fun acquireRenderer(playback: Playback , media: Media ): Any Overrides RendererProvider.acquireRenderer Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available.","title":"acquireRenderer"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/clear/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / clear clear \u00b6 @CallSuper open fun clear(): Unit Overrides RendererProvider.clear Cleans up this pool.","title":"Clear"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/clear/#clear","text":"@CallSuper open fun clear(): Unit Overrides RendererProvider.clear Cleans up this pool.","title":"clear"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/create-renderer/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / createRenderer createRenderer \u00b6 protected abstract fun createRenderer(playback: Playback , rendererType: Int ): Any","title":"Create renderer"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/create-renderer/#createrenderer","text":"protected abstract fun createRenderer(playback: Playback , rendererType: Int ): Any","title":"createRenderer"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/get-renderer-type/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / getRendererType getRendererType \u00b6 protected open fun getRendererType(container: ViewGroup , media: Media ): Int","title":"Get renderer type"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/get-renderer-type/#getrenderertype","text":"protected open fun getRendererType(container: ViewGroup , media: Media ): Int","title":"getRendererType"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/on-clear/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / onClear onClear \u00b6 protected open fun onClear(renderer: Any ): Unit","title":"On clear"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/on-clear/#onclear","text":"protected open fun onClear(renderer: Any ): Unit","title":"onClear"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/release-renderer/","text":"kohii-core / kohii.v1.core / RecycledRendererProvider / releaseRenderer releaseRenderer \u00b6 @CallSuper open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Overrides RendererProvider.releaseRenderer Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"Release renderer"},{"location":"api/kohii-core/kohii.v1.core/-recycled-renderer-provider/release-renderer/#releaserenderer","text":"@CallSuper open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Overrides RendererProvider.releaseRenderer Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"releaseRenderer"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/","text":"kohii-core / kohii.v1.core / RendererProvider RendererProvider \u00b6 interface RendererProvider : DefaultLifecycleObserver A pool to cache the renderer for the Playback. Functions \u00b6 Name Summary acquireRenderer open fun acquireRenderer(playback: Playback , media: Media ): Any ? Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available. clear open fun clear(): Unit Cleans up this pool. onDestroy open fun onDestroy(owner: LifecycleOwner ): Unit releaseRenderer open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool. Inheritors \u00b6 Name Summary RecycledRendererProvider abstract class RecycledRendererProvider : RendererProvider","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/#rendererprovider","text":"interface RendererProvider : DefaultLifecycleObserver A pool to cache the renderer for the Playback.","title":"RendererProvider"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/#functions","text":"Name Summary acquireRenderer open fun acquireRenderer(playback: Playback , media: Media ): Any ? Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available. clear open fun clear(): Unit Cleans up this pool. onDestroy open fun onDestroy(owner: LifecycleOwner ): Unit releaseRenderer open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/#inheritors","text":"Name Summary RecycledRendererProvider abstract class RecycledRendererProvider : RendererProvider","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/acquire-renderer/","text":"kohii-core / kohii.v1.core / RendererProvider / acquireRenderer acquireRenderer \u00b6 open fun acquireRenderer(playback: Playback , media: Media ): Any ? Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available.","title":"Acquire renderer"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/acquire-renderer/#acquirerenderer","text":"open fun acquireRenderer(playback: Playback , media: Media ): Any ? Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available.","title":"acquireRenderer"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/clear/","text":"kohii-core / kohii.v1.core / RendererProvider / clear clear \u00b6 open fun clear(): Unit Cleans up this pool.","title":"Clear"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/clear/#clear","text":"open fun clear(): Unit Cleans up this pool.","title":"clear"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/on-destroy/","text":"kohii-core / kohii.v1.core / RendererProvider / onDestroy onDestroy \u00b6 open fun onDestroy(owner: LifecycleOwner ): Unit","title":"On destroy"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/on-destroy/#ondestroy","text":"open fun onDestroy(owner: LifecycleOwner ): Unit","title":"onDestroy"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/release-renderer/","text":"kohii-core / kohii.v1.core / RendererProvider / releaseRenderer releaseRenderer \u00b6 open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"Release renderer"},{"location":"api/kohii-core/kohii.v1.core/-renderer-provider/release-renderer/#releaserenderer","text":"open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"releaseRenderer"},{"location":"api/kohii-core/kohii.v1.core/-scope/","text":"kohii-core / kohii.v1.core / Scope Scope \u00b6 enum class Scope Enum Values \u00b6 Name Summary GLOBAL GROUP MANAGER BUCKET PLAYBACK","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-scope/#scope","text":"enum class Scope","title":"Scope"},{"location":"api/kohii-core/kohii.v1.core/-scope/#enum-values","text":"Name Summary GLOBAL GROUP MANAGER BUCKET PLAYBACK","title":"Enum Values"},{"location":"api/kohii-core/kohii.v1.core/-scope/-b-u-c-k-e-t/","text":"kohii-core / kohii.v1.core / Scope / BUCKET BUCKET \u00b6 BUCKET","title":" b u c k e t"},{"location":"api/kohii-core/kohii.v1.core/-scope/-b-u-c-k-e-t/#bucket","text":"BUCKET","title":"BUCKET"},{"location":"api/kohii-core/kohii.v1.core/-scope/-g-l-o-b-a-l/","text":"kohii-core / kohii.v1.core / Scope / GLOBAL GLOBAL \u00b6 GLOBAL","title":" g l o b a l"},{"location":"api/kohii-core/kohii.v1.core/-scope/-g-l-o-b-a-l/#global","text":"GLOBAL","title":"GLOBAL"},{"location":"api/kohii-core/kohii.v1.core/-scope/-g-r-o-u-p/","text":"kohii-core / kohii.v1.core / Scope / GROUP GROUP \u00b6 GROUP","title":" g r o u p"},{"location":"api/kohii-core/kohii.v1.core/-scope/-g-r-o-u-p/#group","text":"GROUP","title":"GROUP"},{"location":"api/kohii-core/kohii.v1.core/-scope/-m-a-n-a-g-e-r/","text":"kohii-core / kohii.v1.core / Scope / MANAGER MANAGER \u00b6 MANAGER","title":" m a n a g e r"},{"location":"api/kohii-core/kohii.v1.core/-scope/-m-a-n-a-g-e-r/#manager","text":"MANAGER","title":"MANAGER"},{"location":"api/kohii-core/kohii.v1.core/-scope/-p-l-a-y-b-a-c-k/","text":"kohii-core / kohii.v1.core / Scope / PLAYBACK PLAYBACK \u00b6 PLAYBACK","title":" p l a y b a c k"},{"location":"api/kohii-core/kohii.v1.core/-scope/-p-l-a-y-b-a-c-k/#playback","text":"PLAYBACK","title":"PLAYBACK"},{"location":"api/kohii-core/kohii.v1.core/-strategy/","text":"kohii-core / kohii.v1.core / Strategy Strategy \u00b6 sealed class Strategy : Selector Types \u00b6 Name Summary MULTI_PLAYER object MULTI_PLAYER : Strategy NO_PLAYER object NO_PLAYER : Strategy SINGLE_PLAYER object SINGLE_PLAYER : Strategy Inheritors \u00b6 Name Summary MULTI_PLAYER object MULTI_PLAYER : Strategy NO_PLAYER object NO_PLAYER : Strategy SINGLE_PLAYER object SINGLE_PLAYER : Strategy","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-strategy/#strategy","text":"sealed class Strategy : Selector","title":"Strategy"},{"location":"api/kohii-core/kohii.v1.core/-strategy/#types","text":"Name Summary MULTI_PLAYER object MULTI_PLAYER : Strategy NO_PLAYER object NO_PLAYER : Strategy SINGLE_PLAYER object SINGLE_PLAYER : Strategy","title":"Types"},{"location":"api/kohii-core/kohii.v1.core/-strategy/#inheritors","text":"Name Summary MULTI_PLAYER object MULTI_PLAYER : Strategy NO_PLAYER object NO_PLAYER : Strategy SINGLE_PLAYER object SINGLE_PLAYER : Strategy","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-m-u-l-t-i_-p-l-a-y-e-r/","text":"kohii-core / kohii.v1.core / Strategy / MULTI_PLAYER MULTI_PLAYER \u00b6 object MULTI_PLAYER : Strategy Functions \u00b6 Name Summary invoke fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-m-u-l-t-i_-p-l-a-y-e-r/#multi_player","text":"object MULTI_PLAYER : Strategy","title":"MULTI_PLAYER"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-m-u-l-t-i_-p-l-a-y-e-r/#functions","text":"Name Summary invoke fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-m-u-l-t-i_-p-l-a-y-e-r/invoke/","text":"kohii-core / kohii.v1.core / Strategy / MULTI_PLAYER / invoke invoke \u00b6 fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Invoke"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-m-u-l-t-i_-p-l-a-y-e-r/invoke/#invoke","text":"fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"invoke"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-n-o_-p-l-a-y-e-r/","text":"kohii-core / kohii.v1.core / Strategy / NO_PLAYER NO_PLAYER \u00b6 object NO_PLAYER : Strategy Functions \u00b6 Name Summary invoke fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-n-o_-p-l-a-y-e-r/#no_player","text":"object NO_PLAYER : Strategy","title":"NO_PLAYER"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-n-o_-p-l-a-y-e-r/#functions","text":"Name Summary invoke fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-n-o_-p-l-a-y-e-r/invoke/","text":"kohii-core / kohii.v1.core / Strategy / NO_PLAYER / invoke invoke \u00b6 fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Invoke"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-n-o_-p-l-a-y-e-r/invoke/#invoke","text":"fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"invoke"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-s-i-n-g-l-e_-p-l-a-y-e-r/","text":"kohii-core / kohii.v1.core / Strategy / SINGLE_PLAYER SINGLE_PLAYER \u00b6 object SINGLE_PLAYER : Strategy Functions \u00b6 Name Summary invoke fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-s-i-n-g-l-e_-p-l-a-y-e-r/#single_player","text":"object SINGLE_PLAYER : Strategy","title":"SINGLE_PLAYER"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-s-i-n-g-l-e_-p-l-a-y-e-r/#functions","text":"Name Summary invoke fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-s-i-n-g-l-e_-p-l-a-y-e-r/invoke/","text":"kohii-core / kohii.v1.core / Strategy / SINGLE_PLAYER / invoke invoke \u00b6 fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"Invoke"},{"location":"api/kohii-core/kohii.v1.core/-strategy/-s-i-n-g-l-e_-p-l-a-y-e-r/invoke/#invoke","text":"fun invoke(playbacks: Collection < Playback >): Collection < Playback >","title":"invoke"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/","text":"kohii-core / kohii.v1.core / ViewRendererProvider ViewRendererProvider \u00b6 abstract class ViewRendererProvider : RecycledRendererProvider Constructors \u00b6 Name Summary <init> ViewRendererProvider(poolSize: Int = 2) Functions \u00b6 Name Summary releaseRenderer open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool. Inherited Functions \u00b6 Name Summary acquireRenderer open fun acquireRenderer(playback: Playback , media: Media ): Any Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available. clear open fun clear(): Unit Cleans up this pool. createRenderer abstract fun createRenderer(playback: Playback , rendererType: Int ): Any getRendererType open fun getRendererType(container: ViewGroup , media: Media ): Int onClear open fun onClear(renderer: Any ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/#viewrendererprovider","text":"abstract class ViewRendererProvider : RecycledRendererProvider","title":"ViewRendererProvider"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/#constructors","text":"Name Summary <init> ViewRendererProvider(poolSize: Int = 2)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/#functions","text":"Name Summary releaseRenderer open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/#inherited-functions","text":"Name Summary acquireRenderer open fun acquireRenderer(playback: Playback , media: Media ): Any Returns a renderer for the playback that can be used to render the content of media , or null if no renderer is available. clear open fun clear(): Unit Cleans up this pool. createRenderer abstract fun createRenderer(playback: Playback , rendererType: Int ): Any getRendererType open fun getRendererType(container: ViewGroup , media: Media ): Int onClear open fun onClear(renderer: Any ): Unit","title":"Inherited Functions"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/-init-/","text":"kohii-core / kohii.v1.core / ViewRendererProvider / <init> <init> \u00b6 ViewRendererProvider(poolSize: Int = 2)","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/-init-/#init","text":"ViewRendererProvider(poolSize: Int = 2)","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/release-renderer/","text":"kohii-core / kohii.v1.core / ViewRendererProvider / releaseRenderer releaseRenderer \u00b6 open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Overrides RecycledRendererProvider.releaseRenderer Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"Release renderer"},{"location":"api/kohii-core/kohii.v1.core/-view-renderer-provider/release-renderer/#releaserenderer","text":"open fun releaseRenderer(playback: Playback , media: Media , renderer: Any ?): Boolean Overrides RecycledRendererProvider.releaseRenderer Releases the renderer back to the pool. Returns true if either the renderer is null (so nothing needed to be done), or the renderer is successfully released back to the pool.","title":"releaseRenderer"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listener/","text":"kohii-core / kohii.v1.core / VolumeChangedListener VolumeChangedListener \u00b6 interface VolumeChangedListener Functions \u00b6 Name Summary onVolumeChanged abstract fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit Inheritors \u00b6 Name Summary VolumeChangedListeners class VolumeChangedListeners : CopyOnWriteArraySet < VolumeChangedListener >, VolumeChangedListener","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listener/#volumechangedlistener","text":"interface VolumeChangedListener","title":"VolumeChangedListener"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listener/#functions","text":"Name Summary onVolumeChanged abstract fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listener/#inheritors","text":"Name Summary VolumeChangedListeners class VolumeChangedListeners : CopyOnWriteArraySet < VolumeChangedListener >, VolumeChangedListener","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listener/on-volume-changed/","text":"kohii-core / kohii.v1.core / VolumeChangedListener / onVolumeChanged onVolumeChanged \u00b6 abstract fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit","title":"On volume changed"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listener/on-volume-changed/#onvolumechanged","text":"abstract fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit","title":"onVolumeChanged"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/","text":"kohii-core / kohii.v1.core / VolumeChangedListeners VolumeChangedListeners \u00b6 class VolumeChangedListeners : CopyOnWriteArraySet < VolumeChangedListener >, VolumeChangedListener Constructors \u00b6 Name Summary <init> VolumeChangedListeners() Functions \u00b6 Name Summary onVolumeChanged fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/#volumechangedlisteners","text":"class VolumeChangedListeners : CopyOnWriteArraySet < VolumeChangedListener >, VolumeChangedListener","title":"VolumeChangedListeners"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/#constructors","text":"Name Summary <init> VolumeChangedListeners()","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/#functions","text":"Name Summary onVolumeChanged fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/-init-/","text":"kohii-core / kohii.v1.core / VolumeChangedListeners / <init> <init> \u00b6 VolumeChangedListeners()","title":" init "},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/-init-/#init","text":"VolumeChangedListeners()","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/on-volume-changed/","text":"kohii-core / kohii.v1.core / VolumeChangedListeners / onVolumeChanged onVolumeChanged \u00b6 fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit Overrides VolumeChangedListener.onVolumeChanged","title":"On volume changed"},{"location":"api/kohii-core/kohii.v1.core/-volume-changed-listeners/on-volume-changed/#onvolumechanged","text":"fun onVolumeChanged(volumeInfo: VolumeInfo ): Unit Overrides VolumeChangedListener.onVolumeChanged","title":"onVolumeChanged"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/","text":"kohii-core / kohii.v1.core / VolumeInfoController VolumeInfoController \u00b6 interface VolumeInfoController Properties \u00b6 Name Summary volumeInfo abstract val volumeInfo: VolumeInfo Functions \u00b6 Name Summary addVolumeChangedListener abstract fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit removeVolumeChangedListener abstract fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit setVolumeInfo abstract fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"Index"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/#volumeinfocontroller","text":"interface VolumeInfoController","title":"VolumeInfoController"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/#properties","text":"Name Summary volumeInfo abstract val volumeInfo: VolumeInfo","title":"Properties"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/#functions","text":"Name Summary addVolumeChangedListener abstract fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit removeVolumeChangedListener abstract fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit setVolumeInfo abstract fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"Functions"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/add-volume-changed-listener/","text":"kohii-core / kohii.v1.core / VolumeInfoController / addVolumeChangedListener addVolumeChangedListener \u00b6 abstract fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit","title":"Add volume changed listener"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/add-volume-changed-listener/#addvolumechangedlistener","text":"abstract fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit","title":"addVolumeChangedListener"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/remove-volume-changed-listener/","text":"kohii-core / kohii.v1.core / VolumeInfoController / removeVolumeChangedListener removeVolumeChangedListener \u00b6 abstract fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit","title":"Remove volume changed listener"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/remove-volume-changed-listener/#removevolumechangedlistener","text":"abstract fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit","title":"removeVolumeChangedListener"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/set-volume-info/","text":"kohii-core / kohii.v1.core / VolumeInfoController / setVolumeInfo setVolumeInfo \u00b6 abstract fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"Set volume info"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/set-volume-info/#setvolumeinfo","text":"abstract fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"setVolumeInfo"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/volume-info/","text":"kohii-core / kohii.v1.core / VolumeInfoController / volumeInfo volumeInfo \u00b6 abstract val volumeInfo: VolumeInfo","title":"Volume info"},{"location":"api/kohii-core/kohii.v1.core/-volume-info-controller/volume-info/#volumeinfo","text":"abstract val volumeInfo: VolumeInfo","title":"volumeInfo"},{"location":"api/kohii-core/kohii.v1.media/","text":"kohii-core / kohii.v1.media Package kohii.v1.media \u00b6 Types \u00b6 Name Summary Media interface Media MediaDrm interface MediaDrm : Comparable < MediaDrm >, Parcelable Note: implementation of this interface must comparable using all 4 values, no more, no less. MediaItem open class MediaItem : Media , Parcelable PlaybackInfo data class PlaybackInfo : Parcelable VolumeInfo data class VolumeInfo : Parcelable","title":"Index"},{"location":"api/kohii-core/kohii.v1.media/#package-kohiiv1media","text":"","title":"Package kohii.v1.media"},{"location":"api/kohii-core/kohii.v1.media/#types","text":"Name Summary Media interface Media MediaDrm interface MediaDrm : Comparable < MediaDrm >, Parcelable Note: implementation of this interface must comparable using all 4 values, no more, no less. MediaItem open class MediaItem : Media , Parcelable PlaybackInfo data class PlaybackInfo : Parcelable VolumeInfo data class VolumeInfo : Parcelable","title":"Types"},{"location":"api/kohii-core/kohii.v1.media/-media/","text":"kohii-core / kohii.v1.media / Media Media \u00b6 interface Media Properties \u00b6 Name Summary mediaDrm abstract val mediaDrm: MediaDrm ? type abstract val type: String ? uri abstract val uri: Uri Inheritors \u00b6 Name Summary MediaItem open class MediaItem : Media , Parcelable","title":"Index"},{"location":"api/kohii-core/kohii.v1.media/-media/#media","text":"interface Media","title":"Media"},{"location":"api/kohii-core/kohii.v1.media/-media/#properties","text":"Name Summary mediaDrm abstract val mediaDrm: MediaDrm ? type abstract val type: String ? uri abstract val uri: Uri","title":"Properties"},{"location":"api/kohii-core/kohii.v1.media/-media/#inheritors","text":"Name Summary MediaItem open class MediaItem : Media , Parcelable","title":"Inheritors"},{"location":"api/kohii-core/kohii.v1.media/-media/media-drm/","text":"kohii-core / kohii.v1.media / Media / mediaDrm mediaDrm \u00b6 abstract val mediaDrm: MediaDrm ?","title":"Media drm"},{"location":"api/kohii-core/kohii.v1.media/-media/media-drm/#mediadrm","text":"abstract val mediaDrm: MediaDrm ?","title":"mediaDrm"},{"location":"api/kohii-core/kohii.v1.media/-media/type/","text":"kohii-core / kohii.v1.media / Media / type type \u00b6 abstract val type: String ?","title":"Type"},{"location":"api/kohii-core/kohii.v1.media/-media/type/#type","text":"abstract val type: String ?","title":"type"},{"location":"api/kohii-core/kohii.v1.media/-media/uri/","text":"kohii-core / kohii.v1.media / Media / uri uri \u00b6 abstract val uri: Uri","title":"Uri"},{"location":"api/kohii-core/kohii.v1.media/-media/uri/#uri","text":"abstract val uri: Uri","title":"uri"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/","text":"kohii-core / kohii.v1.media / MediaDrm MediaDrm \u00b6 interface MediaDrm : Comparable < MediaDrm >, Parcelable Note: implementation of this interface must comparable using all 4 values, no more, no less. Author eneim (2018/06/25). Properties \u00b6 Name Summary keyRequestPropertiesArray abstract val keyRequestPropertiesArray: Array < String >? licenseUrl abstract val licenseUrl: String multiSession abstract val multiSession: Boolean type abstract val type: String Functions \u00b6 Name Summary compareTo open fun compareTo(other: MediaDrm ): Int","title":"Index"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/#mediadrm","text":"interface MediaDrm : Comparable < MediaDrm >, Parcelable Note: implementation of this interface must comparable using all 4 values, no more, no less. Author eneim (2018/06/25).","title":"MediaDrm"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/#properties","text":"Name Summary keyRequestPropertiesArray abstract val keyRequestPropertiesArray: Array < String >? licenseUrl abstract val licenseUrl: String multiSession abstract val multiSession: Boolean type abstract val type: String","title":"Properties"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/#functions","text":"Name Summary compareTo open fun compareTo(other: MediaDrm ): Int","title":"Functions"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/compare-to/","text":"kohii-core / kohii.v1.media / MediaDrm / compareTo compareTo \u00b6 open fun compareTo(other: MediaDrm ): Int","title":"Compare to"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/compare-to/#compareto","text":"open fun compareTo(other: MediaDrm ): Int","title":"compareTo"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/key-request-properties-array/","text":"kohii-core / kohii.v1.media / MediaDrm / keyRequestPropertiesArray keyRequestPropertiesArray \u00b6 abstract val keyRequestPropertiesArray: Array < String >?","title":"Key request properties array"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/key-request-properties-array/#keyrequestpropertiesarray","text":"abstract val keyRequestPropertiesArray: Array < String >?","title":"keyRequestPropertiesArray"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/license-url/","text":"kohii-core / kohii.v1.media / MediaDrm / licenseUrl licenseUrl \u00b6 abstract val licenseUrl: String","title":"License url"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/license-url/#licenseurl","text":"abstract val licenseUrl: String","title":"licenseUrl"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/multi-session/","text":"kohii-core / kohii.v1.media / MediaDrm / multiSession multiSession \u00b6 abstract val multiSession: Boolean","title":"Multi session"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/multi-session/#multisession","text":"abstract val multiSession: Boolean","title":"multiSession"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/type/","text":"kohii-core / kohii.v1.media / MediaDrm / type type \u00b6 abstract val type: String","title":"Type"},{"location":"api/kohii-core/kohii.v1.media/-media-drm/type/#type","text":"abstract val type: String","title":"type"},{"location":"api/kohii-core/kohii.v1.media/-media-item/","text":"kohii-core / kohii.v1.media / MediaItem MediaItem \u00b6 open class MediaItem : Media , Parcelable Author eneim (2018/10/19). Constructors \u00b6 Name Summary <init> MediaItem(url: String , type: String ? = null, mediaDrm: MediaDrm ? = null) MediaItem(uri: Uri , type: String ? = null, mediaDrm: MediaDrm ? = null) Properties \u00b6 Name Summary mediaDrm open val mediaDrm: MediaDrm ? type open val type: String ? uri open val uri: Uri Functions \u00b6 Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Index"},{"location":"api/kohii-core/kohii.v1.media/-media-item/#mediaitem","text":"open class MediaItem : Media , Parcelable Author eneim (2018/10/19).","title":"MediaItem"},{"location":"api/kohii-core/kohii.v1.media/-media-item/#constructors","text":"Name Summary <init> MediaItem(url: String , type: String ? = null, mediaDrm: MediaDrm ? = null) MediaItem(uri: Uri , type: String ? = null, mediaDrm: MediaDrm ? = null)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.media/-media-item/#properties","text":"Name Summary mediaDrm open val mediaDrm: MediaDrm ? type open val type: String ? uri open val uri: Uri","title":"Properties"},{"location":"api/kohii-core/kohii.v1.media/-media-item/#functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int toString open fun toString(): String","title":"Functions"},{"location":"api/kohii-core/kohii.v1.media/-media-item/-init-/","text":"kohii-core / kohii.v1.media / MediaItem / <init> <init> \u00b6 MediaItem(url: String , type: String ? = null, mediaDrm: MediaDrm ? = null)``MediaItem(uri: Uri , type: String ? = null, mediaDrm: MediaDrm ? = null) Author eneim (2018/10/19).","title":" init "},{"location":"api/kohii-core/kohii.v1.media/-media-item/-init-/#init","text":"MediaItem(url: String , type: String ? = null, mediaDrm: MediaDrm ? = null)``MediaItem(uri: Uri , type: String ? = null, mediaDrm: MediaDrm ? = null) Author eneim (2018/10/19).","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.media/-media-item/equals/","text":"kohii-core / kohii.v1.media / MediaItem / equals equals \u00b6 open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/kohii-core/kohii.v1.media/-media-item/equals/#equals","text":"open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/kohii-core/kohii.v1.media/-media-item/hash-code/","text":"kohii-core / kohii.v1.media / MediaItem / hashCode hashCode \u00b6 open fun hashCode(): Int","title":"Hash code"},{"location":"api/kohii-core/kohii.v1.media/-media-item/hash-code/#hashcode","text":"open fun hashCode(): Int","title":"hashCode"},{"location":"api/kohii-core/kohii.v1.media/-media-item/media-drm/","text":"kohii-core / kohii.v1.media / MediaItem / mediaDrm mediaDrm \u00b6 open val mediaDrm: MediaDrm ? Overrides Media.mediaDrm","title":"Media drm"},{"location":"api/kohii-core/kohii.v1.media/-media-item/media-drm/#mediadrm","text":"open val mediaDrm: MediaDrm ? Overrides Media.mediaDrm","title":"mediaDrm"},{"location":"api/kohii-core/kohii.v1.media/-media-item/to-string/","text":"kohii-core / kohii.v1.media / MediaItem / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"api/kohii-core/kohii.v1.media/-media-item/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/kohii-core/kohii.v1.media/-media-item/type/","text":"kohii-core / kohii.v1.media / MediaItem / type type \u00b6 open val type: String ? Overrides Media.type","title":"Type"},{"location":"api/kohii-core/kohii.v1.media/-media-item/type/#type","text":"open val type: String ? Overrides Media.type","title":"type"},{"location":"api/kohii-core/kohii.v1.media/-media-item/uri/","text":"kohii-core / kohii.v1.media / MediaItem / uri uri \u00b6 open val uri: Uri Overrides Media.uri","title":"Uri"},{"location":"api/kohii-core/kohii.v1.media/-media-item/uri/#uri","text":"open val uri: Uri Overrides Media.uri","title":"uri"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/","text":"kohii-core / kohii.v1.media / PlaybackInfo PlaybackInfo \u00b6 data class PlaybackInfo : Parcelable Author eneim (2018/06/24). Constructors \u00b6 Name Summary <init> PlaybackInfo() PlaybackInfo(resumeWindow: Int , resumePosition: Long ) Properties \u00b6 Name Summary resumePosition var resumePosition: Long resumeWindow var resumeWindow: Int Companion Object Properties \u00b6 Name Summary INDEX_UNSET const val INDEX_UNSET: Int TIME_UNSET const val TIME_UNSET: Long","title":"Index"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/#playbackinfo","text":"data class PlaybackInfo : Parcelable Author eneim (2018/06/24).","title":"PlaybackInfo"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/#constructors","text":"Name Summary <init> PlaybackInfo() PlaybackInfo(resumeWindow: Int , resumePosition: Long )","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/#properties","text":"Name Summary resumePosition var resumePosition: Long resumeWindow var resumeWindow: Int","title":"Properties"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/#companion-object-properties","text":"Name Summary INDEX_UNSET const val INDEX_UNSET: Int TIME_UNSET const val TIME_UNSET: Long","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/-i-n-d-e-x_-u-n-s-e-t/","text":"kohii-core / kohii.v1.media / PlaybackInfo / INDEX_UNSET INDEX_UNSET \u00b6 const val INDEX_UNSET: Int","title":" i n d e x  u n s e t"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/-i-n-d-e-x_-u-n-s-e-t/#index_unset","text":"const val INDEX_UNSET: Int","title":"INDEX_UNSET"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/-init-/","text":"kohii-core / kohii.v1.media / PlaybackInfo / <init> <init> \u00b6 PlaybackInfo()``PlaybackInfo(resumeWindow: Int , resumePosition: Long ) Author eneim (2018/06/24).","title":" init "},{"location":"api/kohii-core/kohii.v1.media/-playback-info/-init-/#init","text":"PlaybackInfo()``PlaybackInfo(resumeWindow: Int , resumePosition: Long ) Author eneim (2018/06/24).","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/-t-i-m-e_-u-n-s-e-t/","text":"kohii-core / kohii.v1.media / PlaybackInfo / TIME_UNSET TIME_UNSET \u00b6 const val TIME_UNSET: Long","title":" t i m e  u n s e t"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/-t-i-m-e_-u-n-s-e-t/#time_unset","text":"const val TIME_UNSET: Long","title":"TIME_UNSET"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/resume-position/","text":"kohii-core / kohii.v1.media / PlaybackInfo / resumePosition resumePosition \u00b6 var resumePosition: Long","title":"Resume position"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/resume-position/#resumeposition","text":"var resumePosition: Long","title":"resumePosition"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/resume-window/","text":"kohii-core / kohii.v1.media / PlaybackInfo / resumeWindow resumeWindow \u00b6 var resumeWindow: Int","title":"Resume window"},{"location":"api/kohii-core/kohii.v1.media/-playback-info/resume-window/#resumewindow","text":"var resumeWindow: Int","title":"resumeWindow"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/","text":"kohii-core / kohii.v1.media / VolumeInfo VolumeInfo \u00b6 data class VolumeInfo : Parcelable Author eneim (2018/06/24). Constructors \u00b6 Name Summary <init> VolumeInfo(original: VolumeInfo ) VolumeInfo(mute: Boolean = false, volume: Float = 1F) Properties \u00b6 Name Summary mute val mute: Boolean volume val volume: Float Companion Object Properties \u00b6 Name Summary DEFAULT_ACTIVE val DEFAULT_ACTIVE: VolumeInfo DEFAULT_INACTIVE val DEFAULT_INACTIVE: VolumeInfo","title":"Index"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/#volumeinfo","text":"data class VolumeInfo : Parcelable Author eneim (2018/06/24).","title":"VolumeInfo"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/#constructors","text":"Name Summary <init> VolumeInfo(original: VolumeInfo ) VolumeInfo(mute: Boolean = false, volume: Float = 1F)","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/#properties","text":"Name Summary mute val mute: Boolean volume val volume: Float","title":"Properties"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/#companion-object-properties","text":"Name Summary DEFAULT_ACTIVE val DEFAULT_ACTIVE: VolumeInfo DEFAULT_INACTIVE val DEFAULT_INACTIVE: VolumeInfo","title":"Companion Object Properties"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/-d-e-f-a-u-l-t_-a-c-t-i-v-e/","text":"kohii-core / kohii.v1.media / VolumeInfo / DEFAULT_ACTIVE DEFAULT_ACTIVE \u00b6 val DEFAULT_ACTIVE: VolumeInfo","title":" d e f a u l t  a c t i v e"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/-d-e-f-a-u-l-t_-a-c-t-i-v-e/#default_active","text":"val DEFAULT_ACTIVE: VolumeInfo","title":"DEFAULT_ACTIVE"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/-d-e-f-a-u-l-t_-i-n-a-c-t-i-v-e/","text":"kohii-core / kohii.v1.media / VolumeInfo / DEFAULT_INACTIVE DEFAULT_INACTIVE \u00b6 val DEFAULT_INACTIVE: VolumeInfo","title":" d e f a u l t  i n a c t i v e"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/-d-e-f-a-u-l-t_-i-n-a-c-t-i-v-e/#default_inactive","text":"val DEFAULT_INACTIVE: VolumeInfo","title":"DEFAULT_INACTIVE"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/-init-/","text":"kohii-core / kohii.v1.media / VolumeInfo / <init> <init> \u00b6 VolumeInfo(original: VolumeInfo )``VolumeInfo(mute: Boolean = false, volume: Float = 1F) Author eneim (2018/06/24).","title":" init "},{"location":"api/kohii-core/kohii.v1.media/-volume-info/-init-/#init","text":"VolumeInfo(original: VolumeInfo )``VolumeInfo(mute: Boolean = false, volume: Float = 1F) Author eneim (2018/06/24).","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/mute/","text":"kohii-core / kohii.v1.media / VolumeInfo / mute mute \u00b6 val mute: Boolean","title":"Mute"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/mute/#mute","text":"val mute: Boolean","title":"mute"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/volume/","text":"kohii-core / kohii.v1.media / VolumeInfo / volume volume \u00b6 val volume: Float","title":"Volume"},{"location":"api/kohii-core/kohii.v1.media/-volume-info/volume/#volume","text":"val volume: Float","title":"volume"},{"location":"api/kohii-core/kohii.v1.utils/","text":"kohii-core / kohii.v1.utils Package kohii.v1.utils \u00b6 Types \u00b6 Name Summary Capsule open class Capsule<T : Any , in A> Singleton Holder","title":"Index"},{"location":"api/kohii-core/kohii.v1.utils/#package-kohiiv1utils","text":"","title":"Package kohii.v1.utils"},{"location":"api/kohii-core/kohii.v1.utils/#types","text":"Name Summary Capsule open class Capsule<T : Any , in A> Singleton Holder","title":"Types"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/","text":"kohii-core / kohii.v1.utils / Capsule Capsule \u00b6 open class Capsule<T : Any , in A> Singleton Holder Constructors \u00b6 Name Summary <init> Capsule(creator: ( A ) -> T , onCreate: ( T ) -> Unit = { if (it is Engine<*>) it.master.registerEngine(it) }) Singleton Holder Functions \u00b6 Name Summary get fun get(arg: A ): T getInstance fun getInstance(arg: A ): T","title":"Index"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/#capsule","text":"open class Capsule<T : Any , in A> Singleton Holder","title":"Capsule"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/#constructors","text":"Name Summary <init> Capsule(creator: ( A ) -> T , onCreate: ( T ) -> Unit = { if (it is Engine<*>) it.master.registerEngine(it) }) Singleton Holder","title":"Constructors"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/#functions","text":"Name Summary get fun get(arg: A ): T getInstance fun getInstance(arg: A ): T","title":"Functions"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/-init-/","text":"kohii-core / kohii.v1.utils / Capsule / <init> <init> \u00b6 Capsule(creator: ( A ) -> T , onCreate: ( T ) -> Unit = { if (it is Engine<*>) it.master.registerEngine(it) }) Singleton Holder","title":" init "},{"location":"api/kohii-core/kohii.v1.utils/-capsule/-init-/#init","text":"Capsule(creator: ( A ) -> T , onCreate: ( T ) -> Unit = { if (it is Engine<*>) it.master.registerEngine(it) }) Singleton Holder","title":"&lt;init&gt;"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/get-instance/","text":"kohii-core / kohii.v1.utils / Capsule / getInstance getInstance \u00b6 protected fun getInstance(arg: A ): T","title":"Get instance"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/get-instance/#getinstance","text":"protected fun getInstance(arg: A ): T","title":"getInstance"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/get/","text":"kohii-core / kohii.v1.utils / Capsule / get get \u00b6 fun get(arg: A ): T","title":"Get"},{"location":"api/kohii-core/kohii.v1.utils/-capsule/get/#get","text":"fun get(arg: A ): T","title":"get"},{"location":"api/kohii-exoplayer/","text":"kohii-exoplayer Packages \u00b6 Name Summary kohii.v1.exoplayer kohii.v1.exoplayer.internal Index \u00b6 All Types","title":"kohii-exoplayer"},{"location":"api/kohii-exoplayer/#packages","text":"Name Summary kohii.v1.exoplayer kohii.v1.exoplayer.internal","title":"Packages"},{"location":"api/kohii-exoplayer/#index","text":"All Types","title":"Index"},{"location":"api/kohii-exoplayer/alltypes/","text":"All Types \u00b6 Name Summary kohii.v1.exoplayer.BandwidthMeterFactory kohii.v1.exoplayer.DefaultDrmSessionManagerProvider kohii.v1.exoplayer.DefaultMediaSourceFactoryProvider kohii.v1.exoplayer.DrmSessionManagerProvider kohii.v1.exoplayer.ExoPlayerCache A convenient object to help creating and reusing a Cache for the media content. It supports a lruCacheSingleton which is a SimpleCache that uses the LeastRecentlyUsedCacheEvictor internally, and a downloadCacheSingleton which is a SimpleCache that doesn't evict cache, which is useful to store downloaded content. kohii.v1.exoplayer.ExoPlayerConfig Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. kohii.v1.exoplayer.ExoPlayerPool A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. kohii.v1.exoplayer.HybridMediaItem kohii.v1.exoplayer.Kohii kohii.v1.exoplayer.KohiiExoPlayer Extend the SimpleExoPlayer to have custom configuration. kohii.v1.exoplayer.LoadControlFactory kohii.v1.exoplayer.MediaSourceFactoryProvider com.google.android.exoplayer2.Player (extensions in package kohii.v1.exoplayer.internal) kohii.v1.exoplayer.PlayerViewBridge kohii.v1.exoplayer.PlayerViewBridgeCreator kohii.v1.exoplayer.PlayerViewBridgeCreatorFactory kohii.v1.exoplayer.PlayerViewPlayable kohii.v1.exoplayer.PlayerViewPlayableCreator kohii.v1.exoplayer.PlayerViewProvider kohii.v1.exoplayer.TrackSelectorFactory An interface that is used by the ExoPlayerPool to create a new DefaultTrackSelector when needed.","title":"Index"},{"location":"api/kohii-exoplayer/alltypes/#all-types","text":"Name Summary kohii.v1.exoplayer.BandwidthMeterFactory kohii.v1.exoplayer.DefaultDrmSessionManagerProvider kohii.v1.exoplayer.DefaultMediaSourceFactoryProvider kohii.v1.exoplayer.DrmSessionManagerProvider kohii.v1.exoplayer.ExoPlayerCache A convenient object to help creating and reusing a Cache for the media content. It supports a lruCacheSingleton which is a SimpleCache that uses the LeastRecentlyUsedCacheEvictor internally, and a downloadCacheSingleton which is a SimpleCache that doesn't evict cache, which is useful to store downloaded content. kohii.v1.exoplayer.ExoPlayerConfig Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. kohii.v1.exoplayer.ExoPlayerPool A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. kohii.v1.exoplayer.HybridMediaItem kohii.v1.exoplayer.Kohii kohii.v1.exoplayer.KohiiExoPlayer Extend the SimpleExoPlayer to have custom configuration. kohii.v1.exoplayer.LoadControlFactory kohii.v1.exoplayer.MediaSourceFactoryProvider com.google.android.exoplayer2.Player (extensions in package kohii.v1.exoplayer.internal) kohii.v1.exoplayer.PlayerViewBridge kohii.v1.exoplayer.PlayerViewBridgeCreator kohii.v1.exoplayer.PlayerViewBridgeCreatorFactory kohii.v1.exoplayer.PlayerViewPlayable kohii.v1.exoplayer.PlayerViewPlayableCreator kohii.v1.exoplayer.PlayerViewProvider kohii.v1.exoplayer.TrackSelectorFactory An interface that is used by the ExoPlayerPool to create a new DefaultTrackSelector when needed.","title":"All Types"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/","text":"kohii-exoplayer / kohii.v1.exoplayer Package kohii.v1.exoplayer \u00b6 Types \u00b6 Name Summary BandwidthMeterFactory interface BandwidthMeterFactory DefaultDrmSessionManagerProvider class DefaultDrmSessionManagerProvider : DrmSessionManagerProvider DefaultMediaSourceFactoryProvider class DefaultMediaSourceFactoryProvider : MediaSourceFactoryProvider DrmSessionManagerProvider interface DrmSessionManagerProvider ExoPlayerCache object ExoPlayerCache A convenient object to help creating and reusing a Cache for the media content. It supports a lruCacheSingleton which is a SimpleCache that uses the LeastRecentlyUsedCacheEvictor internally, and a downloadCacheSingleton which is a SimpleCache that doesn't evict cache, which is useful to store downloaded content. ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. ExoPlayerPool class ExoPlayerPool : PlayerPool <Player> A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. HybridMediaItem class HybridMediaItem : Media , MediaSource Kohii open class Kohii : Engine <PlayerView> KohiiExoPlayer open class KohiiExoPlayer : SimpleExoPlayer, VolumeInfoController , DefaultTrackSelectorHolder Extend the SimpleExoPlayer to have custom configuration. LoadControlFactory interface LoadControlFactory MediaSourceFactoryProvider interface MediaSourceFactoryProvider PlayerViewBridge open class PlayerViewBridge : AbstractBridge <PlayerView>, PlayerEventListener PlayerViewBridgeCreator class PlayerViewBridgeCreator : BridgeCreator <PlayerView> PlayerViewPlayable class PlayerViewPlayable : AbstractPlayable <PlayerView> PlayerViewPlayableCreator class PlayerViewPlayableCreator : PlayableCreator <PlayerView> PlayerViewProvider class PlayerViewProvider : ViewRendererProvider TrackSelectorFactory interface TrackSelectorFactory An interface that is used by the ExoPlayerPool to create a new DefaultTrackSelector when needed. Type Aliases \u00b6 Name Summary PlayerViewBridgeCreatorFactory typealias PlayerViewBridgeCreatorFactory = ( Context ) -> BridgeCreator <PlayerView> Functions \u00b6 Name Summary createDefaultMediaSourceFactoryProvider fun ExoPlayerConfig .createDefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory): DefaultMediaSourceFactoryProvider createDefaultPlayerPool fun ExoPlayerConfig .createDefaultPlayerPool(context: Context ): ExoPlayerPool createKohii fun createKohii(context: Context , config: ExoPlayerConfig ): Kohii Creates a new Kohii instance using an ExoPlayerConfig . Note that an application should not hold many instance of Kohii . fun createKohii(context: Context , playerCreator: (( Context ) -> Player)? = null, mediaSourceFactoryCreator: (( Media ) -> MediaSourceFactory)? = null, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }): Kohii Creates a new Kohii instance using a custom playerCreator , mediaSourceFactoryCreator and rendererProviderFactory . Note that an application should not hold many instance of Kohii .","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/#package-kohiiv1exoplayer","text":"","title":"Package kohii.v1.exoplayer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/#types","text":"Name Summary BandwidthMeterFactory interface BandwidthMeterFactory DefaultDrmSessionManagerProvider class DefaultDrmSessionManagerProvider : DrmSessionManagerProvider DefaultMediaSourceFactoryProvider class DefaultMediaSourceFactoryProvider : MediaSourceFactoryProvider DrmSessionManagerProvider interface DrmSessionManagerProvider ExoPlayerCache object ExoPlayerCache A convenient object to help creating and reusing a Cache for the media content. It supports a lruCacheSingleton which is a SimpleCache that uses the LeastRecentlyUsedCacheEvictor internally, and a downloadCacheSingleton which is a SimpleCache that doesn't evict cache, which is useful to store downloaded content. ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. ExoPlayerPool class ExoPlayerPool : PlayerPool <Player> A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. HybridMediaItem class HybridMediaItem : Media , MediaSource Kohii open class Kohii : Engine <PlayerView> KohiiExoPlayer open class KohiiExoPlayer : SimpleExoPlayer, VolumeInfoController , DefaultTrackSelectorHolder Extend the SimpleExoPlayer to have custom configuration. LoadControlFactory interface LoadControlFactory MediaSourceFactoryProvider interface MediaSourceFactoryProvider PlayerViewBridge open class PlayerViewBridge : AbstractBridge <PlayerView>, PlayerEventListener PlayerViewBridgeCreator class PlayerViewBridgeCreator : BridgeCreator <PlayerView> PlayerViewPlayable class PlayerViewPlayable : AbstractPlayable <PlayerView> PlayerViewPlayableCreator class PlayerViewPlayableCreator : PlayableCreator <PlayerView> PlayerViewProvider class PlayerViewProvider : ViewRendererProvider TrackSelectorFactory interface TrackSelectorFactory An interface that is used by the ExoPlayerPool to create a new DefaultTrackSelector when needed.","title":"Types"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/#type-aliases","text":"Name Summary PlayerViewBridgeCreatorFactory typealias PlayerViewBridgeCreatorFactory = ( Context ) -> BridgeCreator <PlayerView>","title":"Type Aliases"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/#functions","text":"Name Summary createDefaultMediaSourceFactoryProvider fun ExoPlayerConfig .createDefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory): DefaultMediaSourceFactoryProvider createDefaultPlayerPool fun ExoPlayerConfig .createDefaultPlayerPool(context: Context ): ExoPlayerPool createKohii fun createKohii(context: Context , config: ExoPlayerConfig ): Kohii Creates a new Kohii instance using an ExoPlayerConfig . Note that an application should not hold many instance of Kohii . fun createKohii(context: Context , playerCreator: (( Context ) -> Player)? = null, mediaSourceFactoryCreator: (( Media ) -> MediaSourceFactory)? = null, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }): Kohii Creates a new Kohii instance using a custom playerCreator , mediaSourceFactoryCreator and rendererProviderFactory . Note that an application should not hold many instance of Kohii .","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridgeCreatorFactory PlayerViewBridgeCreatorFactory \u00b6 typealias PlayerViewBridgeCreatorFactory = ( Context ) -> BridgeCreator <PlayerView>","title":" player view bridge creator factory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator-factory/#playerviewbridgecreatorfactory","text":"typealias PlayerViewBridgeCreatorFactory = ( Context ) -> BridgeCreator <PlayerView>","title":"PlayerViewBridgeCreatorFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-default-media-source-factory-provider/","text":"kohii-exoplayer / kohii.v1.exoplayer / createDefaultMediaSourceFactoryProvider createDefaultMediaSourceFactoryProvider \u00b6 fun ExoPlayerConfig .createDefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory): DefaultMediaSourceFactoryProvider","title":"Create default media source factory provider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-default-media-source-factory-provider/#createdefaultmediasourcefactoryprovider","text":"fun ExoPlayerConfig .createDefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory): DefaultMediaSourceFactoryProvider","title":"createDefaultMediaSourceFactoryProvider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-default-player-pool/","text":"kohii-exoplayer / kohii.v1.exoplayer / createDefaultPlayerPool createDefaultPlayerPool \u00b6 fun ExoPlayerConfig .createDefaultPlayerPool(context: Context ): ExoPlayerPool","title":"Create default player pool"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-default-player-pool/#createdefaultplayerpool","text":"fun ExoPlayerConfig .createDefaultPlayerPool(context: Context ): ExoPlayerPool","title":"createDefaultPlayerPool"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-kohii/","text":"kohii-exoplayer / kohii.v1.exoplayer / createKohii createKohii \u00b6 fun createKohii(context: Context , config: ExoPlayerConfig ): Kohii Creates a new Kohii instance using an ExoPlayerConfig . Note that an application should not hold many instance of Kohii . Parameters \u00b6 context - the Context . config - the ExoPlayerConfig . @JvmOverloads fun createKohii(context: Context , playerCreator: (( Context ) -> Player)? = null, mediaSourceFactoryCreator: (( Media ) -> MediaSourceFactory)? = null, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }): Kohii Creates a new Kohii instance using a custom playerCreator , mediaSourceFactoryCreator and rendererProviderFactory . Note that an application should not hold many instance of Kohii . Parameters \u00b6 context - the Context . playerCreator - the custom creator for the Player . If null , it will use the default one. mediaSourceFactoryCreator - the custom creator for the MediaSourceFactory . If null , it will use the default one. rendererProviderFactory - the custom RendererProviderFactory .","title":"Create kohii"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-kohii/#createkohii","text":"fun createKohii(context: Context , config: ExoPlayerConfig ): Kohii Creates a new Kohii instance using an ExoPlayerConfig . Note that an application should not hold many instance of Kohii .","title":"createKohii"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-kohii/#parameters","text":"context - the Context . config - the ExoPlayerConfig . @JvmOverloads fun createKohii(context: Context , playerCreator: (( Context ) -> Player)? = null, mediaSourceFactoryCreator: (( Media ) -> MediaSourceFactory)? = null, rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }): Kohii Creates a new Kohii instance using a custom playerCreator , mediaSourceFactoryCreator and rendererProviderFactory . Note that an application should not hold many instance of Kohii .","title":"Parameters"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/create-kohii/#parameters_1","text":"context - the Context . playerCreator - the custom creator for the Player . If null , it will use the default one. mediaSourceFactoryCreator - the custom creator for the MediaSourceFactory . If null , it will use the default one. rendererProviderFactory - the custom RendererProviderFactory .","title":"Parameters"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-bandwidth-meter-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / BandwidthMeterFactory BandwidthMeterFactory \u00b6 interface BandwidthMeterFactory Functions \u00b6 Name Summary createBandwidthMeter abstract fun createBandwidthMeter(context: Context ): BandwidthMeter Inheritors \u00b6 Name Summary ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-bandwidth-meter-factory/#bandwidthmeterfactory","text":"interface BandwidthMeterFactory","title":"BandwidthMeterFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-bandwidth-meter-factory/#functions","text":"Name Summary createBandwidthMeter abstract fun createBandwidthMeter(context: Context ): BandwidthMeter","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-bandwidth-meter-factory/#inheritors","text":"Name Summary ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Inheritors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-bandwidth-meter-factory/create-bandwidth-meter/","text":"kohii-exoplayer / kohii.v1.exoplayer / BandwidthMeterFactory / createBandwidthMeter createBandwidthMeter \u00b6 abstract fun createBandwidthMeter(context: Context ): BandwidthMeter","title":"Create bandwidth meter"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-bandwidth-meter-factory/create-bandwidth-meter/#createbandwidthmeter","text":"abstract fun createBandwidthMeter(context: Context ): BandwidthMeter","title":"createBandwidthMeter"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/","text":"kohii-exoplayer / kohii.v1.exoplayer / DefaultDrmSessionManagerProvider DefaultDrmSessionManagerProvider \u00b6 class DefaultDrmSessionManagerProvider : DrmSessionManagerProvider Author eneim (2018/10/27). Constructors \u00b6 Name Summary <init> DefaultDrmSessionManagerProvider(context: Context , httpDataSourceFactory: Factory) Functions \u00b6 Name Summary provideDrmSessionManager fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>?","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/#defaultdrmsessionmanagerprovider","text":"class DefaultDrmSessionManagerProvider : DrmSessionManagerProvider Author eneim (2018/10/27).","title":"DefaultDrmSessionManagerProvider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/#constructors","text":"Name Summary <init> DefaultDrmSessionManagerProvider(context: Context , httpDataSourceFactory: Factory)","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/#functions","text":"Name Summary provideDrmSessionManager fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>?","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / DefaultDrmSessionManagerProvider / <init> <init> \u00b6 DefaultDrmSessionManagerProvider(context: Context , httpDataSourceFactory: Factory) Author eneim (2018/10/27).","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/-init-/#init","text":"DefaultDrmSessionManagerProvider(context: Context , httpDataSourceFactory: Factory) Author eneim (2018/10/27).","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/provide-drm-session-manager/","text":"kohii-exoplayer / kohii.v1.exoplayer / DefaultDrmSessionManagerProvider / provideDrmSessionManager provideDrmSessionManager \u00b6 fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>? Overrides DrmSessionManagerProvider.provideDrmSessionManager","title":"Provide drm session manager"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-drm-session-manager-provider/provide-drm-session-manager/#providedrmsessionmanager","text":"fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>? Overrides DrmSessionManagerProvider.provideDrmSessionManager","title":"provideDrmSessionManager"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/","text":"kohii-exoplayer / kohii.v1.exoplayer / DefaultMediaSourceFactoryProvider DefaultMediaSourceFactoryProvider \u00b6 class DefaultMediaSourceFactoryProvider : MediaSourceFactoryProvider Author eneim (2018/10/27). Constructors \u00b6 Name Summary <init> DefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory) DefaultMediaSourceFactoryProvider(context: Context ) DefaultMediaSourceFactoryProvider(dataSourceFactory: Factory, drmSessionManagerProvider: DrmSessionManagerProvider ? = null, mediaCache: Cache? = null) Functions \u00b6 Name Summary provideMediaSourceFactory fun provideMediaSourceFactory(media: Media ): MediaSourceFactory","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/#defaultmediasourcefactoryprovider","text":"class DefaultMediaSourceFactoryProvider : MediaSourceFactoryProvider Author eneim (2018/10/27).","title":"DefaultMediaSourceFactoryProvider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/#constructors","text":"Name Summary <init> DefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory) DefaultMediaSourceFactoryProvider(context: Context ) DefaultMediaSourceFactoryProvider(dataSourceFactory: Factory, drmSessionManagerProvider: DrmSessionManagerProvider ? = null, mediaCache: Cache? = null)","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/#functions","text":"Name Summary provideMediaSourceFactory fun provideMediaSourceFactory(media: Media ): MediaSourceFactory","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / DefaultMediaSourceFactoryProvider / <init> <init> \u00b6 DefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory) DefaultMediaSourceFactoryProvider(context: Context )``DefaultMediaSourceFactoryProvider(dataSourceFactory: Factory, drmSessionManagerProvider: DrmSessionManagerProvider ? = null, mediaCache: Cache? = null) Author eneim (2018/10/27).","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/-init-/#init","text":"DefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory) DefaultMediaSourceFactoryProvider(context: Context )``DefaultMediaSourceFactoryProvider(dataSourceFactory: Factory, drmSessionManagerProvider: DrmSessionManagerProvider ? = null, mediaCache: Cache? = null) Author eneim (2018/10/27).","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/provide-media-source-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / DefaultMediaSourceFactoryProvider / provideMediaSourceFactory provideMediaSourceFactory \u00b6 fun provideMediaSourceFactory(media: Media ): MediaSourceFactory Overrides MediaSourceFactoryProvider.provideMediaSourceFactory","title":"Provide media source factory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-default-media-source-factory-provider/provide-media-source-factory/#providemediasourcefactory","text":"fun provideMediaSourceFactory(media: Media ): MediaSourceFactory Overrides MediaSourceFactoryProvider.provideMediaSourceFactory","title":"provideMediaSourceFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-drm-session-manager-provider/","text":"kohii-exoplayer / kohii.v1.exoplayer / DrmSessionManagerProvider DrmSessionManagerProvider \u00b6 interface DrmSessionManagerProvider Author eneim (2018/10/27). Functions \u00b6 Name Summary provideDrmSessionManager abstract fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>? Inheritors \u00b6 Name Summary DefaultDrmSessionManagerProvider class DefaultDrmSessionManagerProvider : DrmSessionManagerProvider","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-drm-session-manager-provider/#drmsessionmanagerprovider","text":"interface DrmSessionManagerProvider Author eneim (2018/10/27).","title":"DrmSessionManagerProvider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-drm-session-manager-provider/#functions","text":"Name Summary provideDrmSessionManager abstract fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>?","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-drm-session-manager-provider/#inheritors","text":"Name Summary DefaultDrmSessionManagerProvider class DefaultDrmSessionManagerProvider : DrmSessionManagerProvider","title":"Inheritors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-drm-session-manager-provider/provide-drm-session-manager/","text":"kohii-exoplayer / kohii.v1.exoplayer / DrmSessionManagerProvider / provideDrmSessionManager provideDrmSessionManager \u00b6 abstract fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>?","title":"Provide drm session manager"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-drm-session-manager-provider/provide-drm-session-manager/#providedrmsessionmanager","text":"abstract fun provideDrmSessionManager(media: Media ): DrmSessionManager<ExoMediaCrypto>?","title":"provideDrmSessionManager"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerCache ExoPlayerCache \u00b6 object ExoPlayerCache A convenient object to help creating and reusing a Cache for the media content. It supports a lruCacheSingleton which is a SimpleCache that uses the LeastRecentlyUsedCacheEvictor internally, and a downloadCacheSingleton which is a SimpleCache that doesn't evict cache, which is useful to store downloaded content. Properties \u00b6 Name Summary downloadCacheSingleton val downloadCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the NoOpCacheEvictor internally. lruCacheSingleton val lruCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the LeastRecentlyUsedCacheEvictor internally.","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/#exoplayercache","text":"object ExoPlayerCache A convenient object to help creating and reusing a Cache for the media content. It supports a lruCacheSingleton which is a SimpleCache that uses the LeastRecentlyUsedCacheEvictor internally, and a downloadCacheSingleton which is a SimpleCache that doesn't evict cache, which is useful to store downloaded content.","title":"ExoPlayerCache"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/#properties","text":"Name Summary downloadCacheSingleton val downloadCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the NoOpCacheEvictor internally. lruCacheSingleton val lruCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the LeastRecentlyUsedCacheEvictor internally.","title":"Properties"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/download-cache-singleton/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerCache / downloadCacheSingleton downloadCacheSingleton \u00b6 val downloadCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the NoOpCacheEvictor internally. Usage: val cache = ExoPlayerCache . downloadCacheSingleton . get ( context )","title":"Download cache singleton"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/download-cache-singleton/#downloadcachesingleton","text":"val downloadCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the NoOpCacheEvictor internally. Usage: val cache = ExoPlayerCache . downloadCacheSingleton . get ( context )","title":"downloadCacheSingleton"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/lru-cache-singleton/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerCache / lruCacheSingleton lruCacheSingleton \u00b6 val lruCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the LeastRecentlyUsedCacheEvictor internally. Usage: val cache = ExoPlayerCache . lruCacheSingleton . get ( context )","title":"Lru cache singleton"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-cache/lru-cache-singleton/#lrucachesingleton","text":"val lruCacheSingleton: Capsule <Cache, Context > A reusable Cache that uses the LeastRecentlyUsedCacheEvictor internally. Usage: val cache = ExoPlayerCache . lruCacheSingleton . get ( context )","title":"lruCacheSingleton"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig ExoPlayerConfig \u00b6 data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. See Also createKohii Constructors \u00b6 Name Summary <init> ExoPlayerConfig(clock: Clock = Clock.DEFAULT, trackSelectorParameters: Parameters = Parameters.DEFAULT_WITHOUT_CONTEXT, trackSelectionFactory: Factory = AdaptiveTrackSelection.Factory(), overrideInitialBitrateEstimate: Long = -1, resetOnNetworkTypeChange: Boolean = true, slidingWindowMaxWeight: Int = DefaultBandwidthMeter.DEFAULT_SLIDING_WINDOW_MAX_WEIGHT, enableDecoderFallback: Boolean = true, allowedVideoJoiningTimeMs: Long = DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS, extensionRendererMode: Int = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF, playClearSamplesWithoutKeys: Boolean = false, mediaCodecSelector: MediaCodecSelector = MediaCodecSelector.DEFAULT, allocator: DefaultAllocator = DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE), minBufferMs: Int = DefaultLoadControl.DEFAULT_MIN_BUFFER_MS, maxBufferMs: Int = DefaultLoadControl.DEFAULT_MAX_BUFFER_MS, bufferForPlaybackMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_MS, bufferForPlaybackAfterRebufferMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS, prioritizeTimeOverSizeThresholds: Boolean = DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS, targetBufferBytes: Int = DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES, backBufferDurationMs: Int = DefaultLoadControl.DEFAULT_BACK_BUFFER_DURATION_MS, retainBackBufferFromKeyframe: Boolean = DefaultLoadControl.DEFAULT_RETAIN_BACK_BUFFER_FROM_KEYFRAME, cache: Cache? = null, drmSessionManagerProvider: DefaultDrmSessionManagerProvider ? = null) Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. Functions \u00b6 Name Summary createBandwidthMeter fun createBandwidthMeter(context: Context ): BandwidthMeter createDefaultTrackSelector fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application. createLoadControl fun createLoadControl(): LoadControl Returns a LoadControl . Companion Object Properties \u00b6 Name Summary DEFAULT val DEFAULT: ExoPlayerConfig Every fields are default, following the setup by ExoPlayer. FAST_START val FAST_START: ExoPlayerConfig Reduce some setting for fast start playback. Extension Functions \u00b6 Name Summary createDefaultMediaSourceFactoryProvider fun ExoPlayerConfig .createDefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory): DefaultMediaSourceFactoryProvider createDefaultPlayerPool fun ExoPlayerConfig .createDefaultPlayerPool(context: Context ): ExoPlayerPool","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/#exoplayerconfig","text":"data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. See Also createKohii","title":"ExoPlayerConfig"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/#constructors","text":"Name Summary <init> ExoPlayerConfig(clock: Clock = Clock.DEFAULT, trackSelectorParameters: Parameters = Parameters.DEFAULT_WITHOUT_CONTEXT, trackSelectionFactory: Factory = AdaptiveTrackSelection.Factory(), overrideInitialBitrateEstimate: Long = -1, resetOnNetworkTypeChange: Boolean = true, slidingWindowMaxWeight: Int = DefaultBandwidthMeter.DEFAULT_SLIDING_WINDOW_MAX_WEIGHT, enableDecoderFallback: Boolean = true, allowedVideoJoiningTimeMs: Long = DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS, extensionRendererMode: Int = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF, playClearSamplesWithoutKeys: Boolean = false, mediaCodecSelector: MediaCodecSelector = MediaCodecSelector.DEFAULT, allocator: DefaultAllocator = DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE), minBufferMs: Int = DefaultLoadControl.DEFAULT_MIN_BUFFER_MS, maxBufferMs: Int = DefaultLoadControl.DEFAULT_MAX_BUFFER_MS, bufferForPlaybackMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_MS, bufferForPlaybackAfterRebufferMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS, prioritizeTimeOverSizeThresholds: Boolean = DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS, targetBufferBytes: Int = DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES, backBufferDurationMs: Int = DefaultLoadControl.DEFAULT_BACK_BUFFER_DURATION_MS, retainBackBufferFromKeyframe: Boolean = DefaultLoadControl.DEFAULT_RETAIN_BACK_BUFFER_FROM_KEYFRAME, cache: Cache? = null, drmSessionManagerProvider: DefaultDrmSessionManagerProvider ? = null) Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/#functions","text":"Name Summary createBandwidthMeter fun createBandwidthMeter(context: Context ): BandwidthMeter createDefaultTrackSelector fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application. createLoadControl fun createLoadControl(): LoadControl Returns a LoadControl .","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/#companion-object-properties","text":"Name Summary DEFAULT val DEFAULT: ExoPlayerConfig Every fields are default, following the setup by ExoPlayer. FAST_START val FAST_START: ExoPlayerConfig Reduce some setting for fast start playback.","title":"Companion Object Properties"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/#extension-functions","text":"Name Summary createDefaultMediaSourceFactoryProvider fun ExoPlayerConfig .createDefaultMediaSourceFactoryProvider(context: Context , dataSourceFactory: Factory): DefaultMediaSourceFactoryProvider createDefaultPlayerPool fun ExoPlayerConfig .createDefaultPlayerPool(context: Context ): ExoPlayerPool","title":"Extension Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/-d-e-f-a-u-l-t/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig / DEFAULT DEFAULT \u00b6 @JvmStatic val DEFAULT: ExoPlayerConfig Every fields are default, following the setup by ExoPlayer.","title":" d e f a u l t"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/-d-e-f-a-u-l-t/#default","text":"@JvmStatic val DEFAULT: ExoPlayerConfig Every fields are default, following the setup by ExoPlayer.","title":"DEFAULT"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/-f-a-s-t_-s-t-a-r-t/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig / FAST_START FAST_START \u00b6 @JvmStatic val FAST_START: ExoPlayerConfig Reduce some setting for fast start playback.","title":" f a s t  s t a r t"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/-f-a-s-t_-s-t-a-r-t/#fast_start","text":"@JvmStatic val FAST_START: ExoPlayerConfig Reduce some setting for fast start playback.","title":"FAST_START"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig / <init> <init> \u00b6 ExoPlayerConfig(clock: Clock = Clock.DEFAULT, trackSelectorParameters: Parameters = Parameters.DEFAULT_WITHOUT_CONTEXT, trackSelectionFactory: Factory = AdaptiveTrackSelection.Factory(), overrideInitialBitrateEstimate: Long = -1, resetOnNetworkTypeChange: Boolean = true, slidingWindowMaxWeight: Int = DefaultBandwidthMeter.DEFAULT_SLIDING_WINDOW_MAX_WEIGHT, enableDecoderFallback: Boolean = true, allowedVideoJoiningTimeMs: Long = DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS, extensionRendererMode: Int = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF, playClearSamplesWithoutKeys: Boolean = false, mediaCodecSelector: MediaCodecSelector = MediaCodecSelector.DEFAULT, allocator: DefaultAllocator = DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE), minBufferMs: Int = DefaultLoadControl.DEFAULT_MIN_BUFFER_MS, maxBufferMs: Int = DefaultLoadControl.DEFAULT_MAX_BUFFER_MS, bufferForPlaybackMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_MS, bufferForPlaybackAfterRebufferMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS, prioritizeTimeOverSizeThresholds: Boolean = DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS, targetBufferBytes: Int = DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES, backBufferDurationMs: Int = DefaultLoadControl.DEFAULT_BACK_BUFFER_DURATION_MS, retainBackBufferFromKeyframe: Boolean = DefaultLoadControl.DEFAULT_RETAIN_BACK_BUFFER_FROM_KEYFRAME, cache: Cache? = null, drmSessionManagerProvider: DefaultDrmSessionManagerProvider ? = null) Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. See Also createKohii","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/-init-/#init","text":"ExoPlayerConfig(clock: Clock = Clock.DEFAULT, trackSelectorParameters: Parameters = Parameters.DEFAULT_WITHOUT_CONTEXT, trackSelectionFactory: Factory = AdaptiveTrackSelection.Factory(), overrideInitialBitrateEstimate: Long = -1, resetOnNetworkTypeChange: Boolean = true, slidingWindowMaxWeight: Int = DefaultBandwidthMeter.DEFAULT_SLIDING_WINDOW_MAX_WEIGHT, enableDecoderFallback: Boolean = true, allowedVideoJoiningTimeMs: Long = DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS, extensionRendererMode: Int = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF, playClearSamplesWithoutKeys: Boolean = false, mediaCodecSelector: MediaCodecSelector = MediaCodecSelector.DEFAULT, allocator: DefaultAllocator = DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE), minBufferMs: Int = DefaultLoadControl.DEFAULT_MIN_BUFFER_MS, maxBufferMs: Int = DefaultLoadControl.DEFAULT_MAX_BUFFER_MS, bufferForPlaybackMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_MS, bufferForPlaybackAfterRebufferMs: Int = DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS, prioritizeTimeOverSizeThresholds: Boolean = DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS, targetBufferBytes: Int = DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES, backBufferDurationMs: Int = DefaultLoadControl.DEFAULT_BACK_BUFFER_DURATION_MS, retainBackBufferFromKeyframe: Boolean = DefaultLoadControl.DEFAULT_RETAIN_BACK_BUFFER_FROM_KEYFRAME, cache: Cache? = null, drmSessionManagerProvider: DefaultDrmSessionManagerProvider ? = null) Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user. See Also createKohii","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/create-bandwidth-meter/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig / createBandwidthMeter createBandwidthMeter \u00b6 fun createBandwidthMeter(context: Context ): BandwidthMeter Overrides BandwidthMeterFactory.createBandwidthMeter","title":"Create bandwidth meter"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/create-bandwidth-meter/#createbandwidthmeter","text":"fun createBandwidthMeter(context: Context ): BandwidthMeter Overrides BandwidthMeterFactory.createBandwidthMeter","title":"createBandwidthMeter"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/create-default-track-selector/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig / createDefaultTrackSelector createDefaultTrackSelector \u00b6 fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Overrides TrackSelectorFactory.createDefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application.","title":"Create default track selector"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/create-default-track-selector/#createdefaulttrackselector","text":"fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Overrides TrackSelectorFactory.createDefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application.","title":"createDefaultTrackSelector"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/create-load-control/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerConfig / createLoadControl createLoadControl \u00b6 fun createLoadControl(): LoadControl Overrides LoadControlFactory.createLoadControl Returns a LoadControl .","title":"Create load control"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-config/create-load-control/#createloadcontrol","text":"fun createLoadControl(): LoadControl Overrides LoadControlFactory.createLoadControl Returns a LoadControl .","title":"createLoadControl"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerPool ExoPlayerPool \u00b6 class ExoPlayerPool : PlayerPool <Player> A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. See Also KohiiExoPlayer Constructors \u00b6 Name Summary <init> ExoPlayerPool(poolSize: Int = DEFAULT_POOL_SIZE, context: Context , clock: Clock = Clock.DEFAULT, bandwidthMeterFactory: BandwidthMeterFactory = ExoPlayerConfig.DEFAULT, trackSelectorFactory: TrackSelectorFactory = ExoPlayerConfig.DEFAULT, loadControlFactory: LoadControlFactory = ExoPlayerConfig.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext)) A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. Functions \u00b6 Name Summary createPlayer fun createPlayer(media: Media ): Player destroyPlayer fun destroyPlayer(player: Player): Unit resetPlayer fun resetPlayer(player: Player): Unit","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/#exoplayerpool","text":"class ExoPlayerPool : PlayerPool <Player> A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. See Also KohiiExoPlayer","title":"ExoPlayerPool"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/#constructors","text":"Name Summary <init> ExoPlayerPool(poolSize: Int = DEFAULT_POOL_SIZE, context: Context , clock: Clock = Clock.DEFAULT, bandwidthMeterFactory: BandwidthMeterFactory = ExoPlayerConfig.DEFAULT, trackSelectorFactory: TrackSelectorFactory = ExoPlayerConfig.DEFAULT, loadControlFactory: LoadControlFactory = ExoPlayerConfig.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext)) A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation.","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/#functions","text":"Name Summary createPlayer fun createPlayer(media: Media ): Player destroyPlayer fun destroyPlayer(player: Player): Unit resetPlayer fun resetPlayer(player: Player): Unit","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerPool / <init> <init> \u00b6 ExoPlayerPool(poolSize: Int = DEFAULT_POOL_SIZE, context: Context , clock: Clock = Clock.DEFAULT, bandwidthMeterFactory: BandwidthMeterFactory = ExoPlayerConfig.DEFAULT, trackSelectorFactory: TrackSelectorFactory = ExoPlayerConfig.DEFAULT, loadControlFactory: LoadControlFactory = ExoPlayerConfig.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext)) A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. See Also KohiiExoPlayer","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/-init-/#init","text":"ExoPlayerPool(poolSize: Int = DEFAULT_POOL_SIZE, context: Context , clock: Clock = Clock.DEFAULT, bandwidthMeterFactory: BandwidthMeterFactory = ExoPlayerConfig.DEFAULT, trackSelectorFactory: TrackSelectorFactory = ExoPlayerConfig.DEFAULT, loadControlFactory: LoadControlFactory = ExoPlayerConfig.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext)) A PlayerPool for the Player implementation. By default it uses the KohiiExoPlayer implementation. See Also KohiiExoPlayer","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/create-player/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerPool / createPlayer createPlayer \u00b6 fun createPlayer(media: Media ): Player","title":"Create player"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/create-player/#createplayer","text":"fun createPlayer(media: Media ): Player","title":"createPlayer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/destroy-player/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerPool / destroyPlayer destroyPlayer \u00b6 fun destroyPlayer(player: Player): Unit","title":"Destroy player"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/destroy-player/#destroyplayer","text":"fun destroyPlayer(player: Player): Unit","title":"destroyPlayer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/reset-player/","text":"kohii-exoplayer / kohii.v1.exoplayer / ExoPlayerPool / resetPlayer resetPlayer \u00b6 fun resetPlayer(player: Player): Unit","title":"Reset player"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-exo-player-pool/reset-player/#resetplayer","text":"fun resetPlayer(player: Player): Unit","title":"resetPlayer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/","text":"kohii-exoplayer / kohii.v1.exoplayer / HybridMediaItem HybridMediaItem \u00b6 class HybridMediaItem : Media , MediaSource Constructors \u00b6 Name Summary <init> HybridMediaItem(media: Media , mediaSource: MediaSource) Properties \u00b6 Name Summary media val media: Media mediaSource val mediaSource: MediaSource","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/#hybridmediaitem","text":"class HybridMediaItem : Media , MediaSource","title":"HybridMediaItem"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/#constructors","text":"Name Summary <init> HybridMediaItem(media: Media , mediaSource: MediaSource)","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/#properties","text":"Name Summary media val media: Media mediaSource val mediaSource: MediaSource","title":"Properties"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / HybridMediaItem / <init> <init> \u00b6 HybridMediaItem(media: Media , mediaSource: MediaSource)","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/-init-/#init","text":"HybridMediaItem(media: Media , mediaSource: MediaSource)","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/media-source/","text":"kohii-exoplayer / kohii.v1.exoplayer / HybridMediaItem / mediaSource mediaSource \u00b6 val mediaSource: MediaSource","title":"Media source"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/media-source/#mediasource","text":"val mediaSource: MediaSource","title":"mediaSource"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/media/","text":"kohii-exoplayer / kohii.v1.exoplayer / HybridMediaItem / media media \u00b6 val media: Media","title":"Media"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-hybrid-media-item/media/#media","text":"val media: Media","title":"media"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii Kohii \u00b6 open class Kohii : Engine <PlayerView> Types \u00b6 Name Summary Builder class Builder Constructors \u00b6 Name Summary <init> Kohii(master: Master , playableCreator: PlayableCreator <PlayerView> = PlayerViewPlayableCreator(master), rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() }) Functions \u00b6 Name Summary createControlDispatcher fun createControlDispatcher(playback: Playback ): ControlDispatcher Creates a ControlDispatcher that can be used to setup the renderer when it is a PlayerView . This method must be used for the Playback that supports manual playback control (the Playback.Config.controller is not null). prepare open fun prepare(manager: Manager ): Unit Companion Object Functions \u00b6 Name Summary get operator fun get(context: Context ): Kohii operator fun get(fragment: Fragment ): Kohii","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/#kohii","text":"open class Kohii : Engine <PlayerView>","title":"Kohii"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/#constructors","text":"Name Summary <init> Kohii(master: Master , playableCreator: PlayableCreator <PlayerView> = PlayerViewPlayableCreator(master), rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() })","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/#functions","text":"Name Summary createControlDispatcher fun createControlDispatcher(playback: Playback ): ControlDispatcher Creates a ControlDispatcher that can be used to setup the renderer when it is a PlayerView . This method must be used for the Playback that supports manual playback control (the Playback.Config.controller is not null). prepare open fun prepare(manager: Manager ): Unit","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/#companion-object-functions","text":"Name Summary get operator fun get(context: Context ): Kohii operator fun get(fragment: Fragment ): Kohii","title":"Companion Object Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / <init> <init> \u00b6 Kohii(master: Master , playableCreator: PlayableCreator <PlayerView> = PlayerViewPlayableCreator(master), rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() })","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-init-/#init","text":"Kohii(master: Master , playableCreator: PlayableCreator <PlayerView> = PlayerViewPlayableCreator(master), rendererProviderFactory: RendererProviderFactory = { PlayerViewProvider() })","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/create-control-dispatcher/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / createControlDispatcher createControlDispatcher \u00b6 fun createControlDispatcher(playback: Playback ): ControlDispatcher Creates a ControlDispatcher that can be used to setup the renderer when it is a PlayerView . This method must be used for the Playback that supports manual playback control (the Playback.Config.controller is not null).","title":"Create control dispatcher"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/create-control-dispatcher/#createcontroldispatcher","text":"fun createControlDispatcher(playback: Playback ): ControlDispatcher Creates a ControlDispatcher that can be used to setup the renderer when it is a PlayerView . This method must be used for the Playback that supports manual playback control (the Playback.Config.controller is not null).","title":"createControlDispatcher"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/get/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / get get \u00b6 @JvmStatic operator fun get(context: Context ): Kohii @JvmStatic operator fun get(fragment: Fragment ): Kohii","title":"Get"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/get/#get","text":"@JvmStatic operator fun get(context: Context ): Kohii @JvmStatic operator fun get(fragment: Fragment ): Kohii","title":"get"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/prepare/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / prepare prepare \u00b6 open fun prepare(manager: Manager ): Unit","title":"Prepare"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/prepare/#prepare","text":"open fun prepare(manager: Manager ): Unit","title":"prepare"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(context: Context ) Functions \u00b6 Name Summary build fun build(): Kohii setPlayableCreator fun setPlayableCreator(playableCreator: PlayableCreator <PlayerView>): Kohii.Builder setRendererProviderFactory fun setRendererProviderFactory(factory: RendererProviderFactory ): Kohii.Builder","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/#constructors","text":"Name Summary <init> Builder(context: Context )","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/#functions","text":"Name Summary build fun build(): Kohii setPlayableCreator fun setPlayableCreator(playableCreator: PlayableCreator <PlayerView>): Kohii.Builder setRendererProviderFactory fun setRendererProviderFactory(factory: RendererProviderFactory ): Kohii.Builder","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / Builder / <init> <init> \u00b6 Builder(context: Context )","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/-init-/#init","text":"Builder(context: Context )","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/build/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / Builder / build build \u00b6 fun build(): Kohii","title":"Build"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/build/#build","text":"fun build(): Kohii","title":"build"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/set-playable-creator/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / Builder / setPlayableCreator setPlayableCreator \u00b6 fun setPlayableCreator(playableCreator: PlayableCreator <PlayerView>): Kohii.Builder","title":"Set playable creator"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/set-playable-creator/#setplayablecreator","text":"fun setPlayableCreator(playableCreator: PlayableCreator <PlayerView>): Kohii.Builder","title":"setPlayableCreator"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/set-renderer-provider-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / Kohii / Builder / setRendererProviderFactory setRendererProviderFactory \u00b6 fun setRendererProviderFactory(factory: RendererProviderFactory ): Kohii.Builder","title":"Set renderer provider factory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii/-builder/set-renderer-provider-factory/#setrendererproviderfactory","text":"fun setRendererProviderFactory(factory: RendererProviderFactory ): Kohii.Builder","title":"setRendererProviderFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer KohiiExoPlayer \u00b6 open class KohiiExoPlayer : SimpleExoPlayer, VolumeInfoController , DefaultTrackSelectorHolder Extend the SimpleExoPlayer to have custom configuration. Author eneim (2018/06/25). Constructors \u00b6 Name Summary <init> KohiiExoPlayer(context: Context , clock: Clock = Clock.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext), trackSelector: DefaultTrackSelector = DefaultTrackSelector(context.applicationContext), loadControl: LoadControl = DefaultLoadControl.Builder().createDefaultLoadControl(), bandwidthMeter: BandwidthMeter = DefaultBandwidthMeter.Builder(context.applicationContext).build(), looper: Looper = Util.getLooper()) Extend the SimpleExoPlayer to have custom configuration. Properties \u00b6 Name Summary trackSelector open val trackSelector: DefaultTrackSelector volumeInfo open val volumeInfo: VolumeInfo Functions \u00b6 Name Summary addVolumeChangedListener open fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit removeVolumeChangedListener open fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit setVolume open fun setVolume(audioVolume: Float ): Unit setVolumeInfo open fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean Extension Functions \u00b6 Name Summary addEventListener fun Player.addEventListener(listener: PlayerEventListener ): Unit getVolumeInfo fun Player.getVolumeInfo(): VolumeInfo removeEventListener fun Player.removeEventListener(listener: PlayerEventListener ): Unit setVolumeInfo fun Player.setVolumeInfo(volume: VolumeInfo ): Unit","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/#kohiiexoplayer","text":"open class KohiiExoPlayer : SimpleExoPlayer, VolumeInfoController , DefaultTrackSelectorHolder Extend the SimpleExoPlayer to have custom configuration. Author eneim (2018/06/25).","title":"KohiiExoPlayer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/#constructors","text":"Name Summary <init> KohiiExoPlayer(context: Context , clock: Clock = Clock.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext), trackSelector: DefaultTrackSelector = DefaultTrackSelector(context.applicationContext), loadControl: LoadControl = DefaultLoadControl.Builder().createDefaultLoadControl(), bandwidthMeter: BandwidthMeter = DefaultBandwidthMeter.Builder(context.applicationContext).build(), looper: Looper = Util.getLooper()) Extend the SimpleExoPlayer to have custom configuration.","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/#properties","text":"Name Summary trackSelector open val trackSelector: DefaultTrackSelector volumeInfo open val volumeInfo: VolumeInfo","title":"Properties"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/#functions","text":"Name Summary addVolumeChangedListener open fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit removeVolumeChangedListener open fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit setVolume open fun setVolume(audioVolume: Float ): Unit setVolumeInfo open fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/#extension-functions","text":"Name Summary addEventListener fun Player.addEventListener(listener: PlayerEventListener ): Unit getVolumeInfo fun Player.getVolumeInfo(): VolumeInfo removeEventListener fun Player.removeEventListener(listener: PlayerEventListener ): Unit setVolumeInfo fun Player.setVolumeInfo(volume: VolumeInfo ): Unit","title":"Extension Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / <init> <init> \u00b6 KohiiExoPlayer(context: Context , clock: Clock = Clock.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext), trackSelector: DefaultTrackSelector = DefaultTrackSelector(context.applicationContext), loadControl: LoadControl = DefaultLoadControl.Builder().createDefaultLoadControl(), bandwidthMeter: BandwidthMeter = DefaultBandwidthMeter.Builder(context.applicationContext).build(), looper: Looper = Util.getLooper()) Extend the SimpleExoPlayer to have custom configuration. Author eneim (2018/06/25).","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/-init-/#init","text":"KohiiExoPlayer(context: Context , clock: Clock = Clock.DEFAULT, renderersFactory: RenderersFactory = DefaultRenderersFactory(context.applicationContext), trackSelector: DefaultTrackSelector = DefaultTrackSelector(context.applicationContext), loadControl: LoadControl = DefaultLoadControl.Builder().createDefaultLoadControl(), bandwidthMeter: BandwidthMeter = DefaultBandwidthMeter.Builder(context.applicationContext).build(), looper: Looper = Util.getLooper()) Extend the SimpleExoPlayer to have custom configuration. Author eneim (2018/06/25).","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/add-volume-changed-listener/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / addVolumeChangedListener addVolumeChangedListener \u00b6 open fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit","title":"Add volume changed listener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/add-volume-changed-listener/#addvolumechangedlistener","text":"open fun addVolumeChangedListener(listener: VolumeChangedListener ): Unit","title":"addVolumeChangedListener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/remove-volume-changed-listener/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / removeVolumeChangedListener removeVolumeChangedListener \u00b6 open fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit","title":"Remove volume changed listener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/remove-volume-changed-listener/#removevolumechangedlistener","text":"open fun removeVolumeChangedListener(listener: VolumeChangedListener ?): Unit","title":"removeVolumeChangedListener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/set-volume-info/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / setVolumeInfo setVolumeInfo \u00b6 open fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"Set volume info"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/set-volume-info/#setvolumeinfo","text":"open fun setVolumeInfo(volumeInfo: VolumeInfo ): Boolean","title":"setVolumeInfo"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/set-volume/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / setVolume setVolume \u00b6 @CallSuper open fun setVolume(audioVolume: Float ): Unit","title":"Set volume"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/set-volume/#setvolume","text":"@CallSuper open fun setVolume(audioVolume: Float ): Unit","title":"setVolume"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/track-selector/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / trackSelector trackSelector \u00b6 open val trackSelector: DefaultTrackSelector","title":"Track selector"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/track-selector/#trackselector","text":"open val trackSelector: DefaultTrackSelector","title":"trackSelector"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/volume-info/","text":"kohii-exoplayer / kohii.v1.exoplayer / KohiiExoPlayer / volumeInfo volumeInfo \u00b6 open val volumeInfo: VolumeInfo","title":"Volume info"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-kohii-exo-player/volume-info/#volumeinfo","text":"open val volumeInfo: VolumeInfo","title":"volumeInfo"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-load-control-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / LoadControlFactory LoadControlFactory \u00b6 interface LoadControlFactory Functions \u00b6 Name Summary createLoadControl abstract fun createLoadControl(): LoadControl Returns a LoadControl . Inheritors \u00b6 Name Summary ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-load-control-factory/#loadcontrolfactory","text":"interface LoadControlFactory","title":"LoadControlFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-load-control-factory/#functions","text":"Name Summary createLoadControl abstract fun createLoadControl(): LoadControl Returns a LoadControl .","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-load-control-factory/#inheritors","text":"Name Summary ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Inheritors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-load-control-factory/create-load-control/","text":"kohii-exoplayer / kohii.v1.exoplayer / LoadControlFactory / createLoadControl createLoadControl \u00b6 abstract fun createLoadControl(): LoadControl Returns a LoadControl .","title":"Create load control"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-load-control-factory/create-load-control/#createloadcontrol","text":"abstract fun createLoadControl(): LoadControl Returns a LoadControl .","title":"createLoadControl"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-media-source-factory-provider/","text":"kohii-exoplayer / kohii.v1.exoplayer / MediaSourceFactoryProvider MediaSourceFactoryProvider \u00b6 interface MediaSourceFactoryProvider Author eneim (2018/10/27). Functions \u00b6 Name Summary provideMediaSourceFactory abstract fun provideMediaSourceFactory(media: Media ): MediaSourceFactory Inheritors \u00b6 Name Summary DefaultMediaSourceFactoryProvider class DefaultMediaSourceFactoryProvider : MediaSourceFactoryProvider","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-media-source-factory-provider/#mediasourcefactoryprovider","text":"interface MediaSourceFactoryProvider Author eneim (2018/10/27).","title":"MediaSourceFactoryProvider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-media-source-factory-provider/#functions","text":"Name Summary provideMediaSourceFactory abstract fun provideMediaSourceFactory(media: Media ): MediaSourceFactory","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-media-source-factory-provider/#inheritors","text":"Name Summary DefaultMediaSourceFactoryProvider class DefaultMediaSourceFactoryProvider : MediaSourceFactoryProvider","title":"Inheritors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-media-source-factory-provider/provide-media-source-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / MediaSourceFactoryProvider / provideMediaSourceFactory provideMediaSourceFactory \u00b6 abstract fun provideMediaSourceFactory(media: Media ): MediaSourceFactory","title":"Provide media source factory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-media-source-factory-provider/provide-media-source-factory/#providemediasourcefactory","text":"abstract fun provideMediaSourceFactory(media: Media ): MediaSourceFactory","title":"provideMediaSourceFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge PlayerViewBridge \u00b6 open class PlayerViewBridge : AbstractBridge <PlayerView>, PlayerEventListener Author eneim (2018/06/24). Constructors \u00b6 Name Summary <init> PlayerViewBridge(context: Context , media: Media , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider ) Properties \u00b6 Name Summary media val media: Media playbackInfo open var playbackInfo: PlaybackInfo player var player: Player? playerParameters open var playerParameters: PlayerParameters playerPool val playerPool: PlayerPool <Player> playerState open val playerState: Int renderer open var renderer: PlayerView? repeatMode open var repeatMode: Int volumeInfo open var volumeInfo: VolumeInfo Functions \u00b6 Name Summary createMediaSource open fun createMediaSource(): MediaSource isPlaying open fun isPlaying(): Boolean onPlayerError open fun onPlayerError(error: ExoPlaybackException): Unit onPositionDiscontinuity open fun onPositionDiscontinuity(reason: Int ): Unit onTracksChanged open fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit pause open fun pause(): Unit play open fun play(): Unit prepare open fun prepare(loadSource: Boolean ): Unit ready open fun ready(): Unit release open fun release(): Unit reset open fun reset(resetPlayer: Boolean ): Unit seekTo open fun seekTo(positionMs: Long ): Unit","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/#playerviewbridge","text":"open class PlayerViewBridge : AbstractBridge <PlayerView>, PlayerEventListener Author eneim (2018/06/24).","title":"PlayerViewBridge"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/#constructors","text":"Name Summary <init> PlayerViewBridge(context: Context , media: Media , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider )","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/#properties","text":"Name Summary media val media: Media playbackInfo open var playbackInfo: PlaybackInfo player var player: Player? playerParameters open var playerParameters: PlayerParameters playerPool val playerPool: PlayerPool <Player> playerState open val playerState: Int renderer open var renderer: PlayerView? repeatMode open var repeatMode: Int volumeInfo open var volumeInfo: VolumeInfo","title":"Properties"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/#functions","text":"Name Summary createMediaSource open fun createMediaSource(): MediaSource isPlaying open fun isPlaying(): Boolean onPlayerError open fun onPlayerError(error: ExoPlaybackException): Unit onPositionDiscontinuity open fun onPositionDiscontinuity(reason: Int ): Unit onTracksChanged open fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit pause open fun pause(): Unit play open fun play(): Unit prepare open fun prepare(loadSource: Boolean ): Unit ready open fun ready(): Unit release open fun release(): Unit reset open fun reset(resetPlayer: Boolean ): Unit seekTo open fun seekTo(positionMs: Long ): Unit","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / <init> <init> \u00b6 PlayerViewBridge(context: Context , media: Media , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider ) Author eneim (2018/06/24).","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/-init-/#init","text":"PlayerViewBridge(context: Context , media: Media , playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider ) Author eneim (2018/06/24).","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/create-media-source/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / createMediaSource createMediaSource \u00b6 protected open fun createMediaSource(): MediaSource","title":"Create media source"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/create-media-source/#createmediasource","text":"protected open fun createMediaSource(): MediaSource","title":"createMediaSource"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/is-playing/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / isPlaying isPlaying \u00b6 open fun isPlaying(): Boolean","title":"Is playing"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/is-playing/#isplaying","text":"open fun isPlaying(): Boolean","title":"isPlaying"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/media/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / media media \u00b6 protected val media: Media","title":"Media"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/media/#media","text":"protected val media: Media","title":"media"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/on-player-error/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / onPlayerError onPlayerError \u00b6 open fun onPlayerError(error: ExoPlaybackException): Unit","title":"On player error"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/on-player-error/#onplayererror","text":"open fun onPlayerError(error: ExoPlaybackException): Unit","title":"onPlayerError"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/on-position-discontinuity/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / onPositionDiscontinuity onPositionDiscontinuity \u00b6 open fun onPositionDiscontinuity(reason: Int ): Unit","title":"On position discontinuity"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/on-position-discontinuity/#onpositiondiscontinuity","text":"open fun onPositionDiscontinuity(reason: Int ): Unit","title":"onPositionDiscontinuity"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/on-tracks-changed/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / onTracksChanged onTracksChanged \u00b6 open fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit","title":"On tracks changed"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/on-tracks-changed/#ontrackschanged","text":"open fun onTracksChanged(trackGroups: TrackGroupArray, trackSelections: TrackSelectionArray): Unit","title":"onTracksChanged"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/pause/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / pause pause \u00b6 open fun pause(): Unit","title":"Pause"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/pause/#pause","text":"open fun pause(): Unit","title":"pause"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/play/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / play play \u00b6 open fun play(): Unit","title":"Play"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/play/#play","text":"open fun play(): Unit","title":"play"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/playback-info/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / playbackInfo playbackInfo \u00b6 open var playbackInfo: PlaybackInfo","title":"Playback info"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/playback-info/#playbackinfo","text":"open var playbackInfo: PlaybackInfo","title":"playbackInfo"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player-parameters/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / playerParameters playerParameters \u00b6 open var playerParameters: PlayerParameters","title":"Player parameters"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player-parameters/#playerparameters","text":"open var playerParameters: PlayerParameters","title":"playerParameters"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player-pool/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / playerPool playerPool \u00b6 protected val playerPool: PlayerPool <Player>","title":"Player pool"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player-pool/#playerpool","text":"protected val playerPool: PlayerPool <Player>","title":"playerPool"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player-state/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / playerState playerState \u00b6 open val playerState: Int","title":"Player state"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player-state/#playerstate","text":"open val playerState: Int","title":"playerState"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / player player \u00b6 protected var player: Player?","title":"Player"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/player/#player","text":"protected var player: Player?","title":"player"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/prepare/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / prepare prepare \u00b6 open fun prepare(loadSource: Boolean ): Unit","title":"Prepare"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/prepare/#prepare","text":"open fun prepare(loadSource: Boolean ): Unit","title":"prepare"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/ready/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / ready ready \u00b6 open fun ready(): Unit","title":"Ready"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/ready/#ready","text":"open fun ready(): Unit","title":"ready"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/release/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / release release \u00b6 open fun release(): Unit","title":"Release"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/release/#release","text":"open fun release(): Unit","title":"release"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/renderer/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / renderer renderer \u00b6 open var renderer: PlayerView?","title":"Renderer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/renderer/#renderer","text":"open var renderer: PlayerView?","title":"renderer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/repeat-mode/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / repeatMode repeatMode \u00b6 open var repeatMode: Int","title":"Repeat mode"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/repeat-mode/#repeatmode","text":"open var repeatMode: Int","title":"repeatMode"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/reset/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / reset reset \u00b6 open fun reset(resetPlayer: Boolean ): Unit","title":"Reset"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/reset/#reset","text":"open fun reset(resetPlayer: Boolean ): Unit","title":"reset"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/seek-to/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / seekTo seekTo \u00b6 open fun seekTo(positionMs: Long ): Unit","title":"Seek to"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/seek-to/#seekto","text":"open fun seekTo(positionMs: Long ): Unit","title":"seekTo"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/volume-info/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridge / volumeInfo volumeInfo \u00b6 open var volumeInfo: VolumeInfo","title":"Volume info"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge/volume-info/#volumeinfo","text":"open var volumeInfo: VolumeInfo","title":"volumeInfo"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridgeCreator PlayerViewBridgeCreator \u00b6 class PlayerViewBridgeCreator : BridgeCreator <PlayerView> Constructors \u00b6 Name Summary <init> PlayerViewBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider ) Functions \u00b6 Name Summary cleanUp fun cleanUp(): Unit createBridge fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/#playerviewbridgecreator","text":"class PlayerViewBridgeCreator : BridgeCreator <PlayerView>","title":"PlayerViewBridgeCreator"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/#constructors","text":"Name Summary <init> PlayerViewBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider )","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/#functions","text":"Name Summary cleanUp fun cleanUp(): Unit createBridge fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridgeCreator / <init> <init> \u00b6 PlayerViewBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider )","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/-init-/#init","text":"PlayerViewBridgeCreator(playerPool: PlayerPool <Player>, mediaSourceFactoryProvider: MediaSourceFactoryProvider )","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/clean-up/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridgeCreator / cleanUp cleanUp \u00b6 fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/clean-up/#cleanup","text":"fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/create-bridge/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewBridgeCreator / createBridge createBridge \u00b6 fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"Create bridge"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-bridge-creator/create-bridge/#createbridge","text":"fun createBridge(context: Context , media: Media ): Bridge <PlayerView>","title":"createBridge"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayable PlayerViewPlayable \u00b6 class PlayerViewPlayable : AbstractPlayable <PlayerView> Constructors \u00b6 Name Summary <init> PlayerViewPlayable(master: Master , media: Media , config: Config , bridge: Bridge <PlayerView>) Properties \u00b6 Name Summary renderer var renderer: Any ? Functions \u00b6 Name Summary onRendererAttached fun onRendererAttached(playback: Playback , renderer: Any ?): Unit onRendererDetached fun onRendererDetached(playback: Playback , renderer: Any ?): Unit","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/#playerviewplayable","text":"class PlayerViewPlayable : AbstractPlayable <PlayerView>","title":"PlayerViewPlayable"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/#constructors","text":"Name Summary <init> PlayerViewPlayable(master: Master , media: Media , config: Config , bridge: Bridge <PlayerView>)","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/#properties","text":"Name Summary renderer var renderer: Any ?","title":"Properties"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/#functions","text":"Name Summary onRendererAttached fun onRendererAttached(playback: Playback , renderer: Any ?): Unit onRendererDetached fun onRendererDetached(playback: Playback , renderer: Any ?): Unit","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayable / <init> <init> \u00b6 PlayerViewPlayable(master: Master , media: Media , config: Config , bridge: Bridge <PlayerView>)","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/-init-/#init","text":"PlayerViewPlayable(master: Master , media: Media , config: Config , bridge: Bridge <PlayerView>)","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/on-renderer-attached/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayable / onRendererAttached onRendererAttached \u00b6 protected fun onRendererAttached(playback: Playback , renderer: Any ?): Unit","title":"On renderer attached"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/on-renderer-attached/#onrendererattached","text":"protected fun onRendererAttached(playback: Playback , renderer: Any ?): Unit","title":"onRendererAttached"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/on-renderer-detached/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayable / onRendererDetached onRendererDetached \u00b6 protected fun onRendererDetached(playback: Playback , renderer: Any ?): Unit","title":"On renderer detached"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/on-renderer-detached/#onrendererdetached","text":"protected fun onRendererDetached(playback: Playback , renderer: Any ?): Unit","title":"onRendererDetached"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/renderer/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayable / renderer renderer \u00b6 var renderer: Any ?","title":"Renderer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable/renderer/#renderer","text":"var renderer: Any ?","title":"renderer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator PlayerViewPlayableCreator \u00b6 class PlayerViewPlayableCreator : PlayableCreator <PlayerView> Types \u00b6 Name Summary Builder class Builder Constructors \u00b6 Name Summary <init> PlayerViewPlayableCreator(context: Context ) Functions \u00b6 Name Summary cleanUp fun cleanUp(): Unit createPlayable fun createPlayable(config: Config , media: Media ): Playable","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/#playerviewplayablecreator","text":"class PlayerViewPlayableCreator : PlayableCreator <PlayerView>","title":"PlayerViewPlayableCreator"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/#constructors","text":"Name Summary <init> PlayerViewPlayableCreator(context: Context )","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/#functions","text":"Name Summary cleanUp fun cleanUp(): Unit createPlayable fun createPlayable(config: Config , media: Media ): Playable","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / <init> <init> \u00b6 PlayerViewPlayableCreator(context: Context )","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-init-/#init","text":"PlayerViewPlayableCreator(context: Context )","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/clean-up/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / cleanUp cleanUp \u00b6 fun cleanUp(): Unit","title":"Clean up"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/clean-up/#cleanup","text":"fun cleanUp(): Unit","title":"cleanUp"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/create-playable/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / createPlayable createPlayable \u00b6 fun createPlayable(config: Config , media: Media ): Playable","title":"Create playable"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/create-playable/#createplayable","text":"fun createPlayable(config: Config , media: Media ): Playable","title":"createPlayable"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(context: Context ) Functions \u00b6 Name Summary build fun build(): PlayableCreator <PlayerView> setBridgeCreatorFactory fun setBridgeCreatorFactory(factory: PlayerViewBridgeCreatorFactory ): PlayerViewPlayableCreator.Builder","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/#constructors","text":"Name Summary <init> Builder(context: Context )","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/#functions","text":"Name Summary build fun build(): PlayableCreator <PlayerView> setBridgeCreatorFactory fun setBridgeCreatorFactory(factory: PlayerViewBridgeCreatorFactory ): PlayerViewPlayableCreator.Builder","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / Builder / <init> <init> \u00b6 Builder(context: Context )","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/-init-/#init","text":"Builder(context: Context )","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/build/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / Builder / build build \u00b6 fun build(): PlayableCreator <PlayerView>","title":"Build"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/build/#build","text":"fun build(): PlayableCreator <PlayerView>","title":"build"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/set-bridge-creator-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewPlayableCreator / Builder / setBridgeCreatorFactory setBridgeCreatorFactory \u00b6 fun setBridgeCreatorFactory(factory: PlayerViewBridgeCreatorFactory ): PlayerViewPlayableCreator.Builder","title":"Set bridge creator factory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-playable-creator/-builder/set-bridge-creator-factory/#setbridgecreatorfactory","text":"fun setBridgeCreatorFactory(factory: PlayerViewBridgeCreatorFactory ): PlayerViewPlayableCreator.Builder","title":"setBridgeCreatorFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewProvider PlayerViewProvider \u00b6 class PlayerViewProvider : ViewRendererProvider Constructors \u00b6 Name Summary <init> PlayerViewProvider() Functions \u00b6 Name Summary createRenderer fun createRenderer(playback: Playback , rendererType: Int ): PlayerView getRendererType fun getRendererType(container: ViewGroup , media: Media ): Int","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/#playerviewprovider","text":"class PlayerViewProvider : ViewRendererProvider","title":"PlayerViewProvider"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/#constructors","text":"Name Summary <init> PlayerViewProvider()","title":"Constructors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/#functions","text":"Name Summary createRenderer fun createRenderer(playback: Playback , rendererType: Int ): PlayerView getRendererType fun getRendererType(container: ViewGroup , media: Media ): Int","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/-init-/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewProvider / <init> <init> \u00b6 PlayerViewProvider()","title":" init "},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/-init-/#init","text":"PlayerViewProvider()","title":"&lt;init&gt;"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/create-renderer/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewProvider / createRenderer createRenderer \u00b6 protected fun createRenderer(playback: Playback , rendererType: Int ): PlayerView","title":"Create renderer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/create-renderer/#createrenderer","text":"protected fun createRenderer(playback: Playback , rendererType: Int ): PlayerView","title":"createRenderer"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/get-renderer-type/","text":"kohii-exoplayer / kohii.v1.exoplayer / PlayerViewProvider / getRendererType getRendererType \u00b6 protected fun getRendererType(container: ViewGroup , media: Media ): Int","title":"Get renderer type"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-player-view-provider/get-renderer-type/#getrenderertype","text":"protected fun getRendererType(container: ViewGroup , media: Media ): Int","title":"getRendererType"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-track-selector-factory/","text":"kohii-exoplayer / kohii.v1.exoplayer / TrackSelectorFactory TrackSelectorFactory \u00b6 interface TrackSelectorFactory An interface that is used by the ExoPlayerPool to create a new DefaultTrackSelector when needed. Functions \u00b6 Name Summary createDefaultTrackSelector abstract fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application. Inheritors \u00b6 Name Summary ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-track-selector-factory/#trackselectorfactory","text":"interface TrackSelectorFactory An interface that is used by the ExoPlayerPool to create a new DefaultTrackSelector when needed.","title":"TrackSelectorFactory"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-track-selector-factory/#functions","text":"Name Summary createDefaultTrackSelector abstract fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application.","title":"Functions"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-track-selector-factory/#inheritors","text":"Name Summary ExoPlayerConfig data class ExoPlayerConfig : LoadControlFactory , BandwidthMeterFactory , TrackSelectorFactory Detailed config for building a com.google.android.exoplayer2.SimpleExoPlayer . Only for advanced user.","title":"Inheritors"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-track-selector-factory/create-default-track-selector/","text":"kohii-exoplayer / kohii.v1.exoplayer / TrackSelectorFactory / createDefaultTrackSelector createDefaultTrackSelector \u00b6 abstract fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application.","title":"Create default track selector"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer/-track-selector-factory/create-default-track-selector/#createdefaulttrackselector","text":"abstract fun createDefaultTrackSelector(context: Context ): DefaultTrackSelector Creates a new DefaultTrackSelector instance, given the Context of the Application.","title":"createDefaultTrackSelector"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/","text":"kohii-exoplayer / kohii.v1.exoplayer.internal Package kohii.v1.exoplayer.internal \u00b6 Extensions for External Classes \u00b6 Name Summary com.google.android.exoplayer2.Player","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/#package-kohiiv1exoplayerinternal","text":"","title":"Package kohii.v1.exoplayer.internal"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/#extensions-for-external-classes","text":"Name Summary com.google.android.exoplayer2.Player","title":"Extensions for External Classes"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/","text":"kohii-exoplayer / kohii.v1.exoplayer.internal / com.google.android.exoplayer2.Player Extensions for com.google.android.exoplayer2.Player \u00b6 Name Summary addEventListener fun Player.addEventListener(listener: PlayerEventListener ): Unit getVolumeInfo fun Player.getVolumeInfo(): VolumeInfo removeEventListener fun Player.removeEventListener(listener: PlayerEventListener ): Unit setVolumeInfo fun Player.setVolumeInfo(volume: VolumeInfo ): Unit","title":"Index"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/#extensions-for-comgoogleandroidexoplayer2player","text":"Name Summary addEventListener fun Player.addEventListener(listener: PlayerEventListener ): Unit getVolumeInfo fun Player.getVolumeInfo(): VolumeInfo removeEventListener fun Player.removeEventListener(listener: PlayerEventListener ): Unit setVolumeInfo fun Player.setVolumeInfo(volume: VolumeInfo ): Unit","title":"Extensions for com.google.android.exoplayer2.Player"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/add-event-listener/","text":"kohii-exoplayer / kohii.v1.exoplayer.internal / com.google.android.exoplayer2.Player / addEventListener addEventListener \u00b6 fun Player.addEventListener(listener: PlayerEventListener ): Unit","title":"Add event listener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/add-event-listener/#addeventlistener","text":"fun Player.addEventListener(listener: PlayerEventListener ): Unit","title":"addEventListener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/get-volume-info/","text":"kohii-exoplayer / kohii.v1.exoplayer.internal / com.google.android.exoplayer2.Player / getVolumeInfo getVolumeInfo \u00b6 fun Player.getVolumeInfo(): VolumeInfo","title":"Get volume info"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/get-volume-info/#getvolumeinfo","text":"fun Player.getVolumeInfo(): VolumeInfo","title":"getVolumeInfo"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/remove-event-listener/","text":"kohii-exoplayer / kohii.v1.exoplayer.internal / com.google.android.exoplayer2.Player / removeEventListener removeEventListener \u00b6 fun Player.removeEventListener(listener: PlayerEventListener ): Unit","title":"Remove event listener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/remove-event-listener/#removeeventlistener","text":"fun Player.removeEventListener(listener: PlayerEventListener ): Unit","title":"removeEventListener"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/set-volume-info/","text":"kohii-exoplayer / kohii.v1.exoplayer.internal / com.google.android.exoplayer2.Player / setVolumeInfo setVolumeInfo \u00b6 fun Player.setVolumeInfo(volume: VolumeInfo ): Unit","title":"Set volume info"},{"location":"api/kohii-exoplayer/kohii.v1.exoplayer.internal/com.google.android.exoplayer2.-player/set-volume-info/#setvolumeinfo","text":"fun Player.setVolumeInfo(volume: VolumeInfo ): Unit","title":"setVolumeInfo"}]}